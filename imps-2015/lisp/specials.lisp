(in-package "TEA-IMPLEMENTATION")

(proclaim '(special TEA::XVIEW-TRANSLATION-FOR-ENV))
(proclaim '(special TEA::XVIEW-BNF-FOR-ENV))
(proclaim '(special TEA::XVIEW-THEORY-FOR-ENV))
(proclaim '(special TEA::XVIEW-LANGUAGE-FOR-ENV))
(proclaim '(special TEA::XVIEW-THEORY-FOR-FIGURE))
(proclaim '(special TEA::XVIEW-FIGURE))
(proclaim '(special TEA::DISPLAY-STRINGS-AS-EXPRESSIONS))
(proclaim '(special TEA::PRESENT-TEX-SEQUENCE))
(proclaim '(special TEA::PRESENT-SEQUENCE))
(proclaim '(special TEA::BUILD-SEQUENCE-FROM-CONSES))
(proclaim '(special TEA::PREFIX-SEQUENCE-OPERATOR-METHOD))
(proclaim '(special TEA::PARSE-QC-BINDING-OPERATOR-BOTH-SYNTAXES))
(proclaim '(special TEA::PARSE-QC-BINDING-OPERATOR-BOTH-SYNTAXES-AUX))
(proclaim '(special TEA::PRESENT-TEX-INDICATOR-CONSTRUCTOR-OPERATOR))
(proclaim '(special TEA::PRESENT-INDICATOR-CONSTRUCTOR-OPERATOR))
(proclaim '(special TEA::PARSE-INDICATOR-CONSTRUCTOR-BOTH-SYNTAXES))
(proclaim '(special TEA::ASSERTION-SPECIAL-COMMANDS-INSTALL-PREDICATES-FROM-LIST))
(proclaim '(special TEA::ANTECEDENT-SPECIAL-COMMANDS-INSTALL-PREDICATES-FROM-LIST))
(proclaim '(special TEA::APPLICABLE-SPECIAL-COMMANDS))
(proclaim '(special TEA::ASSERTION-SPECIAL-COMMANDS-INSTALL-PREDICATE))
(proclaim '(special TEA::ANTECEDENT-SPECIAL-COMMANDS-INSTALL-PREDICATE))
(proclaim '(special TEA::*UNIVERSALLY-APPLICABLE-SPECIAL-COMMAND-NAMES*))
(proclaim '(special TEA::*SPECIAL-COMMAND-APPLICABILITY-TABLE*))
(proclaim '(special TEA::UNFOLDABLE-RECURSIVE-DEFS?))
(proclaim '(special TEA::UNFOLDABLE-DIRECT-DEFS?))
(proclaim '(special TEA::UNFOLDABLE-DEFS?))
(proclaim '(special TEA::BACKWARDS-BACKCHAINABLE?))
(proclaim '(special TEA::BACKCHAINABLE?))
(proclaim '(special TEA::ASSERTION-COMMANDS-INSTALL-PREDICATES-FROM-LIST))
(proclaim '(special TEA::ANTECEDENT-COMMANDS-INSTALL-PREDICATES-FROM-LIST))
(proclaim '(special TEA::RC-I-APPLICABLE?))
(proclaim '(special TEA::I-BR-I-APPLICABLE?))
(proclaim '(special TEA::BR-I-APPLICABLE?))
(proclaim '(special TEA::X-I-APPLICABLE?))
(proclaim '(special TEA::IOTA-I-APPLICABLE?))
(proclaim '(special TEA::A-I-APPLICABLE?))
(proclaim '(special TEA::I-D-I-APPLICABLE?))
(proclaim '(special TEA::D-I-APPLICABLE?))
(proclaim '(special TEA::APPLICABLE-COMMANDS))
(proclaim '(special TEA::ASSERTION-COMMANDS-INSTALL-PREDICATE))
(proclaim '(special TEA::ANTECEDENT-COMMANDS-INSTALL-PREDICATE))
(proclaim '(special TEA::*UNIVERSALLY-APPLICABLE-COMMAND-NAMES*))
(proclaim '(special TEA::*COMMAND-APPLICABILITY-TABLE*))
(proclaim '(special TEA::DEFAULT-NAMER))
(proclaim '(special TEA::DEFAULT-BINARY-NAMER))
(proclaim '(special TEA::POLY-REPLICATE-THEORY))
(proclaim '(special TEA::REPLICATE-THEORY))
(proclaim '(special TEA::TT-TRANSPORT-RECURSIVE-DEFINITION))
(proclaim '(special TEA::TT-TRANSPORT-DEFINITION))
(proclaim '(special TEA::TT-TRANSPORT-SORT-DEFINITION))
(proclaim '(special TEA::TT-TRANSPORT-DEFINED-SORTS-AND-CONSTANTS))
(proclaim '(special TEA::TT-CONSTANT-SORT-AXIOMS))
(proclaim '(special TEA::TT-SORT-ENCLOSURE-AXIOMS))
(proclaim '(special TEA::CHECK-ARGUMENTS-FOR-TRANSPORT-THEORY))
(proclaim '(special TEA::TRANSPORT-THEORY-AUX))
(proclaim '(special TEA::TRANSPORT-THEORY))
(proclaim '(special TEA::TRANSPORT-BASIC-LANGUAGE))
(proclaim '(special TEA::REPLICATE-BASIC-LANGUAGE))
(proclaim '(special TEA::TRANSLATE-OR-TRANSPORT-UNNAMED-SORT))
(proclaim '(special TEA::TRANSLATE-OR-TRANSPORT-SORT))
(proclaim '(special TEA::TRANSPORT-RESOLVER))
(proclaim '(special TEA::TRANSPORT-COMPOUND-LANGUAGE))
(proclaim '(special TEA::CHECK-ARGUMENTS-FOR-TRANSPORT-LANGUAGE))
(proclaim '(special TEA::TRANSPORT-LANGUAGE))
(proclaim '(special TEA::FIXED-THEORIES-SET))
(proclaim '(special TEA::TRANSLATION-EXTENDS-ALISTS?))
(proclaim '(special TEA::FIND-FIRST-ENCOMPASSING-TRANS-IN-LIST))
(proclaim '(special TEA::FIND-ENCOMPASSING-TRANSLATIONS))
(proclaim '(special TEA::FIND-FIRST-ENCOMPASSING-THEORY-INTERPRETATION))
(proclaim '(special TEA::TRANSLATION-MATCH-VARIABLES))
(proclaim '(special TEA::TRANSLATION-MATCH-MAXIMAL-HIGHER-SORT))
(proclaim '(special TEA::TRANSLATION-MATCH-NAMED-SORT))
(proclaim '(special TEA::TRANSLATION-MATCH-SORT))
(proclaim '(special TEA::TRANSLATION-MATCH-CONSTANT))
(proclaim '(special TEA::BUILD-TRANSLATION-COMPONENTS-FROM-LIST-AUX))
(proclaim '(special TEA::BUILD-TRANSLATION-COMPONENTS-AUX))
(proclaim '(special TEA::BUILD-TRANSLATION-COMPONENTS-FROM-LIST))
(proclaim '(special TEA::BUILD-TRANSLATION-COMPONENTS))
(proclaim '(special TEA::CLEANSE-SORT-OR-CONSTANT-ALIST))
(proclaim '(special TEA::TRANSLATION-MATCH))
(proclaim '(special TEA::TRY-TO-BUILD-TRANSLATION?))
(proclaim '(special TEA::TRANSLATION-AND-SUBSTITUTION-MATCH))
(proclaim '(special TEA::AUTO-INSTANTIATE-THEOREM-WITH-TERMS))
(proclaim '(special TEA::TRANSPORT-DEFINED-SORTS-AND-CONSTANTS))
(proclaim '(special TEA::TRANSPORT-ALL-DEFINED-SORTS-AND-CONSTANTS))
(proclaim '(special TEA::TRANSPORT-RECURSIVE-DEFINITION))
(proclaim '(special TEA::TRANSPORT-DEFINITION))
(proclaim '(special TEA::TRANSPORT-SORT-DEFINITION))
(proclaim '(special TEA::TRANSPORT-CONVERGENCE-AND-REWRITE-THEOREMS))
(proclaim '(special TEA::TRANSPORT-THEOREMS-BY-USAGE))
(proclaim '(special TEA::TRANSPORT-THEOREM-USING-MACETE))
(proclaim '(special TEA::TRANSPORT-THEOREM-AUX))
(proclaim '(special TEA::TRANSPORT-ALL-THEOREMS))
(proclaim '(special TEA::THEORY-ADD-GENERALIZED-THEOREM))
(proclaim '(special TEA::TRANSPORT-THEOREM-FROM-THEORY-TO-SUBTHEORY))
(proclaim '(special TEA::TRANSPORT-THEOREM-VIA-A-TRANSLATION))
(proclaim '(special TEA::TRANSPORT-THEOREM))
(proclaim '(special TEA::THEORY-ADD-MACETED-THEOREM))
(proclaim '(special TEA::THEORY-ADD-MACETED-TRANSPORTED-THEOREM))
(proclaim '(special TEA::THEORY-ADD-TRANSPORTED-THEOREM))
(proclaim '(special TEA::REPLACE-SUBSTRING-RENAMER))
(proclaim '(special TEA::FIND-MATCHING-SUBSTRING))
(proclaim '(special TEA::REPLACE-SUBSTRING))
(proclaim '(special TEA::REPEATEDLY-REPLACE-SUBSTRING))
(proclaim '(special TEA::THEORY-TO-SUBTHEORY-TRANSLATION))
(proclaim '(special TEA::IDENTITY-TRANSLATION))
(proclaim '(special TEA::JOIN-TRANSLATIONS))
(proclaim '(special TEA::EXTEND-TRANSLATION))
(proclaim '(special TEA::COMPOSE-TRANSLATIONS))
(proclaim '(special TEA::TRANSLATION->THEORY-INTERPRETATION))
(proclaim '(special TEA::BUILD-LANGUAGE-TRANSLATION))
(proclaim '(special TEA::EXPLICITLY-TRANSLATED-CONSTANTS))
(proclaim '(special TEA::IMPLICITLY-TRANSLATED-CONSTANT?))
(proclaim '(special TEA::EXPLICITLY-TRANSLATED-CONSTANT?))
(proclaim '(special TEA::EXPLICITLY-TRANSLATED-SORTS))
(proclaim '(special TEA::IMPLICITLY-TRANSLATED-SORT?))
(proclaim '(special TEA::EXPLICITLY-TRANSLATED-SORT?))
(proclaim '(special TEA::DESTRUCTURE-CONSTANT-PAIRS))
(proclaim '(special TEA::DESTRUCTURE-SORT-PAIRS))
(proclaim '(special TEA::DESTRUCTURE-ASSUMPTIONS))
(proclaim '(special TEA::DESTRUCTURE-TRANSLATION-DEFINITION))
(proclaim '(special TEA::TRANSLATION-FROM-DEFINITION))
(proclaim '(special TEA::SET-TO-THEORY-INTERPRETATION))
(proclaim '(special TEA::FORCE-THEORY-INTERPRETATION-CHECK))
(proclaim '(special TEA::BUILD-SENTENCE-FROM-ASSUMPTIONS-AND-FORMULA))
(proclaim '(special TEA::BUILD-SENTENCE-FROM-CONTEXT-AND-FORMULA))
(proclaim '(special TEA::THEORY-INTERPRETATION-CHECK-USING-SIMPLIFICATION))
(proclaim '(special TEA::SIMPLIFY-OUTSTANDING-OBLIGATIONS))
(proclaim '(special TEA::TEST-OBLIGATION-WITH-ASSUMPTIONS))
(proclaim '(special TEA::OUTSTANDING-OBLIGATIONS))
(proclaim '(special TEA::THEORY-INTERPRETATION-CHECK))
(proclaim '(special TEA::THEORY-INTERPRETATION-CHECK-USING-METHOD))
(proclaim '(special TEA::QUICK-THEORY-INTERPRETATION-CHECK))
(proclaim '(special TEA::TRANSLATION-PRINT-OBLIGATIONS-AUX))
(proclaim '(special TEA::TRANSLATION-PRINT-OBLIGATIONS))
(proclaim '(special TEA::TRANSLATION-PRINT-INITIAL-OBLIGATIONS))
(proclaim '(special TEA::MAKE-OBLIGATION))
(proclaim '(special TEA::ENTER-OBLIGATION-IN-TABLE))
(proclaim '(special TEA::FORMULA->OBLIGATION-INFORMATION))
(proclaim '(special TEA::*TRANSLATION-OBLIGATION-TABLE*))
(proclaim '(special TEA::MAKE-DISTINCT-CONSTANT-OBLIGATIONS))
(proclaim '(special TEA::MAKE-DC-OBLIGATIONS-OUTER-LOOP))
(proclaim '(special TEA::MAKE-DEFINED-SORT-OBLIGATIONS))
(proclaim '(special TEA::MAKE-RECURSIVELY-DEFINED-CONSTANT-OBLIGATIONS))
(proclaim '(special TEA::MAKE-DIRECTLY-DEFINED-CONSTANT-OBLIGATIONS))
(proclaim '(special TEA::MAKE-AXIOM-OBLIGATIONS))
(proclaim '(special TEA::MAKE-SORTING-FORMULA))
(proclaim '(special TEA::MAKE-SORTING-OBLIGATIONS))
(proclaim '(special TEA::MAKE-ENCLOSURE-OBLIGATIONS))
(proclaim '(special TEA::MAKE-NONEMPTYNESS-OBLIGATIONS))
(proclaim '(special TEA::MAKE-TRANSLATION-OBLIGATIONS))
(proclaim '(special TEA::DONT-CHECK-OBLIGATIONS?))
(proclaim '(special TEA::DONT-BUILD-OBLIGATIONS?))
(proclaim '(special TEA::BUILD-AND-CHECK-TRANSLATION-OBLIGATIONS))
(proclaim '(special TEA::ENTER-THEORY-INTERP-IN-PAIR-TABLE))
(proclaim '(special TEA::ENTER-PAIR-TI-IN-PAIR-TABLE))
(proclaim '(special TEA::*PAIR-THEORY-INTERP-TABLE*))
(proclaim '(special TEA::MAKE-TRANSLATED-THEOREM-NAME))
(proclaim '(special TEA::TRANSLATE-THEOREM))
(proclaim '(special TEA::TRANSLATION-PROCESS-RECURSIVE-DEFINITION))
(proclaim '(special TEA::TRANSLATION-PROCESS-DEFINITION))
(proclaim '(special TEA::TRANSLATION-PROCESS-SORT-DEFINITION))
(proclaim '(special TEA::TRANSLATE-CONSTANT))
(proclaim '(special TEA::TRANSLATE-SORT))
(proclaim '(special TEA::TRANSLATE-VARIABLES-TO-CONDITIONS))
(proclaim '(special TEA::TRANSLATE-VARIABLE-TO-CONDITION))
(proclaim '(special TEA::TRANSLATE-VARIABLES-TO-VARIABLES))
(proclaim '(special TEA::TRANSLATE-VARIABLE-TO-VARIABLE))
(proclaim '(special TEA::TRANSLATE-VARIABLE-TO-SORT))
(proclaim '(special TEA::BINDING-EXPRESSION-WITH-CONDITIONS))
(proclaim '(special TEA::TRANSLATE-EXPRESSION-AUX))
(proclaim '(special TEA::TRANSLATE-EXPRESSION-AND-BETA-REDUCE))
(proclaim '(special TEA::TRANSLATE-EXPRESSION))
(proclaim '(special TEA::TRANSLATE-SENTENCE-AND-BETA-REDUCE))
(proclaim '(special TEA::TRANSLATE-SENTENCE))
(proclaim '(special TEA::TRANSLATE-BASE-TYPE))
(proclaim '(special TEA::TRANSLATE-TYPE))
(proclaim '(special TEA::TRANSLATION-FIXED-THEOREM?))
(proclaim '(special TEA::TRANSLATION-OBLIGATIONS-WITH-CONTEXT))
(proclaim '(special TEA::TRANSLATION-EXTEND-FIXED-CONSTANTS))
(proclaim '(special TEA::TRANSLATION-EXTEND-DEFINED-CONSTANT-ALIST))
(proclaim '(special TEA::TRANSLATION-EXTEND-DEFINED-SORT-ALIST))
(proclaim '(special TEA::TRANSLATION-CLEANSE-DEFINED-ALISTS))
(proclaim '(special TEA::ENRICH-TRANSLATION))
(proclaim '(special TEA::GATHER-FREE-VARIABLES-FROM-TARGETS))
(proclaim '(special TEA::RESOLVE-TRANSLATION-NAME-AUX))
(proclaim '(special TEA::RESOLVE-TRANSLATION-NAME))
(proclaim '(special TEA::REMOVE-CONSTANT-PAIRS))
(proclaim '(special TEA::REMOVE-SORT-PAIRS))
(proclaim '(special TEA::ADD-PRIMITIVE-CONSTANT-PAIRS))
(proclaim '(special TEA::ADD-PRIMITIVE-SORT-PAIRS))
(proclaim '(special TEA::CHECK-FIXED-THEORIES))
(proclaim '(special TEA::ARGUMENTS-OF-BUILD-TRANSLATION-CHECK?))
(proclaim '(special TEA::BUILD-TRANSLATION))
(proclaim '(special TEA::COUNT-THEORY-INTERPRETATIONS))
(proclaim '(special TEA::COUNT-TRANSLATIONS))
(proclaim '(special TEA::THEORY-INTERPRETATIONS-IN-GLOBAL-TRANSLATION-ALIST))
(proclaim '(special TEA::TRANSLATIONS-IN-GLOBAL-TRANSLATION-ALIST))
(proclaim '(special TEA::UPDATE-SORT-CONSTANT-ALIST))
(proclaim '(special TEA::ENTER-TRANSLATION))
(proclaim '(special TEA::FIND-TRANSLATION))
(proclaim '(special TEA::*GLOBAL-TRANSLATION-ALIST*))
(proclaim '(special TEA::TRANSLATION-EMPTY-ASSUMPTIONS?))
(proclaim '(special TEA::TRANSLATION-DEFAULT-RENAMER))
(proclaim '(special TEA::TRANSLATION-THEORY-INTERPRETATION?))
(proclaim '(special TEA::TRANSLATION-OBLIGATIONS))
(proclaim '(special TEA::TRANSLATION-ENRICH?))
(proclaim '(special TEA::TRANSLATION-DEFINED-CONSTANT-ALIST))
(proclaim '(special TEA::TRANSLATION-DEFINED-SORT-ALIST))
(proclaim '(special TEA::TRANSLATION-FREE-VARIABLES))
(proclaim '(special TEA::TRANSLATION-CONSTANT-ALIST))
(proclaim '(special TEA::TRANSLATION-SORT-ALIST))
(proclaim '(special TEA::TRANSLATION-FIXED-CONSTANTS))
(proclaim '(special TEA::TRANSLATION-FIXED-SORTS))
(proclaim '(special TEA::TRANSLATION-FIXED-THEORIES))
(proclaim '(special TEA::TRANSLATION-ASSUMPTIONS))
(proclaim '(special TEA::TRANSLATION-TARGET-THEORY))
(proclaim '(special TEA::TRANSLATION-SOURCE-THEORY))
(proclaim '(special TEA::MAKE-TRANSLATION))
(proclaim '(special TEA::TRANSLATION?))
(proclaim '(special TEA::NAME->TRANSLATION))
(proclaim '(special TEA::*NAME-TRANSLATION-TABLE*))
(proclaim '(special TEA::BNF-SORTNAME->CASE-AXIOM-NAME))
(proclaim '(special TEA::BNF-SORT->CASE-AXIOM))
(proclaim '(special TEA::BNF-SINGLE-CONSTRUCTOR-SELECTOR-DEFINEDNESS-FORMULAS))
(proclaim '(special TEA::BNF-SINGLE-CONSTRUCTOR-THMS))
(proclaim '(special TEA::BNF-SORT-HAS-SINGLE-CONSTRUCTOR?))
(proclaim '(special TEA::BNF-SINGLE-CONSTRUCTOR-SORTS))
(proclaim '(special TEA::BNF-ADD-AUXILIARY-THEOREMS))
(proclaim '(special TEA::BNF-PR-READ-LAMBDA))
(proclaim '(special TEA::BNF-PR-READ-CONSTRUCTORS))
(proclaim '(special TEA::BNF-PR-READ-ATOMS))
(proclaim '(special TEA::BNF-PR-MAYBE-COERCE-ARGUMENT))
(proclaim '(special TEA::BNF-PR-BUILD-INDUCTIVE-STEP-REWRITES))
(proclaim '(special TEA::BNF-PR-BUILD-BASE-REWRITES))
(proclaim '(special TEA::BNF-BUILD-PR-CONSTANT))
(proclaim '(special TEA::BNF-PR-RECURSIVE-FUN-VAR))
(proclaim '(special TEA::BNF-PR-CONSTRUCTOR-FUN-ARGS))
(proclaim '(special TEA::BNF-PR-ATOM-ARGS))
(proclaim '(special TEA::BNF-PR-ARGUMENT-LISTS))
(proclaim '(special TEA::BNF-PR-CONSTRUCTOR-COND-EXPRS))
(proclaim '(special TEA::BNF-PR-ATOM-COND-EXPRS))
(proclaim '(special TEA::BNF-PR-THEOREMS))
(proclaim '(special TEA::BNF-INSTALL-PRIMITIVE-RECURSION))
(proclaim '(special TEA::BNF-CONSTRUCTOR->SELECTORS))
(proclaim '(special TEA::BNF-BUILD-SELECTOR-CONSTRUCTOR-UNDEFINEDNESS-THEOREMS))
(proclaim '(special TEA::BNF-SELECTOR-CONSTRUCTOR-UNDEFINEDNESS-THEOREMS))
(proclaim '(special TEA::BNF-SORT-IMMEDIATE-SUBSORTS))
(proclaim '(special TEA::BNF-SORT-CONSTRUCTOR-LISTS))
(proclaim '(special TEA::BNF-SORT-ATOM-LISTS))
(proclaim '(special TEA::BNF-SORT-CASE-BUILD-AXIOM))
(proclaim '(special TEA::BNF-BUILD-SORT-CASE-AXIOMS))
(proclaim '(special TEA::BNF-INSTALL-SORT-CASE-AXIOMS))
(proclaim '(special TEA::BNF-IMMEDIATE-SORT-INCLUSION?))
(proclaim '(special TEA::BNF-SORT-INCLUSION-LISTS))
(proclaim '(special TEA::BNF-BUILD-SORT-INCLUSION-AXIOMS))
(proclaim '(special TEA::BNF-INSTALL-SORT-INCLUSION-AXIOMS))
(proclaim '(special TEA::BNF-CONSTRUCTOR-SELECTOR-WHEN-SELECTORS-DEFINED-THEOREM))
(proclaim '(special TEA::BNF-THEOREMS-WHEN-SELECTORS-DEFINED))
(proclaim '(special TEA::BNF-CONSTRUCTOR-INJECTIVENESS-THEOREMS))
(proclaim '(special TEA::BNF-ALL-CONSTRUCTOR-INJECTIVENESS-THEOREMS))
(proclaim '(special TEA::BNF-ONE-CONSTRUCTOR-AND-SELECTORS))
(proclaim '(special TEA::BNF-CONSTRUCTOR-SELECTORS))
(proclaim '(special TEA::BNF-INSTALL-CONSTRUCTOR-SELECTORS))
(proclaim '(special TEA::BNF-CONSTRUCTOR-ATOM-DISJOINTNESS))
(proclaim '(special TEA::BNF-ADDITIONAL-CONSTRUCTOR-DISJOINTNESS-THEOREMS))
(proclaim '(special TEA::BNF-CONSTRUCTOR-DISJOINTNESS))
(proclaim '(special TEA::BNF-BUILD-DISJOINTNESS-PRINCIPLES))
(proclaim '(special TEA::BNF-INSTALL-DISJOINTNESS-PRINCIPLES))
(proclaim '(special TEA::BNF-BUILD-INDUCTION-AXIOM))
(proclaim '(special TEA::BNF-INSTALL-INDUCTION-AXIOM))
(proclaim '(special TEA::BNF-BUILD-CONSTRUCTOR-DEFINEDNESS-AXIOMS))
(proclaim '(special TEA::BNF-INSTALL-CONSTRUCTOR-DEFINEDNESS-AXIOMS))
(proclaim '(special TEA::BNF-SEEK-UNINHABITED))
(proclaim '(special TEA::BNF-CHECK-INHABITATION-GET-MORE))
(proclaim '(special TEA::BNF-BUILD-ONE-CONSTRUCTOR-AND-ITS-SELECTORS))
(proclaim '(special TEA::BNF-BUILD-CONSTRUCTORS-AND-SELECTORS))
(proclaim '(special TEA::BNF-BUILD-ATOMS))
(proclaim '(special TEA::FIND-GENERIC-TYPE-NAME))
(proclaim '(special TEA::BNF-SORT-RESOLVER-FROM-DEFINITION))
(proclaim '(special TEA::BNF-BUILD-LANGUAGE-ETC))
(proclaim '(special TEA::BNF-BUILD-THEORY))
(proclaim '(special TEA::BNF-GENERIC-THEORY))
(proclaim '(special TEA::BNF-GENERIC-TYPE))
(proclaim '(special TEA::BNF-PRIMITIVE-RECURSIVE-DEFINITION-TYPE))
(proclaim '(special TEA::BNF-PRIMITIVE-RECURSIVE-UNFOLDING-THEOREM))
(proclaim '(special TEA::BNF-PRIMITIVE-RECURSIVE-IOTA-THEOREM))
(proclaim '(special TEA::BNF-INDUCTOR))
(proclaim '(special TEA::BNF-AUXILIARY-THEOREMS))
(proclaim '(special TEA::BNF-SORT-CASE-AXIOMS))
(proclaim '(special TEA::BNF-SORT-INCLUSION-AXIOMS))
(proclaim '(special TEA::BNF-SELECTOR-UNDEFINEDNESS-AXIOMS))
(proclaim '(special TEA::BNF-SELECTOR-CONSTRUCTOR-AXIOMS))
(proclaim '(special TEA::BNF-DISJOINTNESS-AXIOMS))
(proclaim '(special TEA::BNF-INDUCTION-AXIOM))
(proclaim '(special TEA::BNF-CONSTRUCTOR-DEFINEDNESS-AXIOMS))
(proclaim '(special TEA::BNF-SEMANTIC-INCLUSIONS))
(proclaim '(special TEA::BNF-SELECTOR-LISTS))
(proclaim '(special TEA::BNF-CONSTRUCTORS))
(proclaim '(special TEA::BNF-ATOMS))
(proclaim '(special TEA::BNF-SORTS))
(proclaim '(special TEA::BNF-PRIMARY-TYPE))
(proclaim '(special TEA::BNF-THEORY))
(proclaim '(special TEA::BNF-COMPONENT-THEORY))
(proclaim '(special TEA::BNF-LANGUAGE))
(proclaim '(special TEA::MAKE-BNF))
(proclaim '(special TEA::BNF?))
(proclaim '(special TEA::NAME->BNF))
(proclaim '(special TEA::BNF-TABLE))
(proclaim '(special TEA::TREE-INDUCTION-SHOW-PREDICATE))
(proclaim '(special TEA::TREE-INDUCTION-STRATEGY))
(proclaim '(special TEA::AUTO-INSTANTIATE-BACKCHAIN-AND-SIMPLIFY))
(proclaim '(special TEA::CONTINUE-FAILING-COMMAND))
(proclaim '(special TEA::CONTINUE-TERMINAL-COMMAND-WITH-COMMAND))
(proclaim '(special TEA::MAKE-SQN-LIST-CONTINUATION))
(proclaim '(special TEA::CONTINUE-COMMAND-ON-UNSUPPORTED-DESCENDANTS))
(proclaim '(special TEA::COMMAND-NEW-UNSUPPORTED-NODES))
(proclaim '(special TEA::INVOKE-ON-SQN-IF-NECESSARY))
(proclaim '(special TEA::INVOKE-IF-NECESSARY))
(proclaim '(special TEA::SQN-NEW-ASSUMPTION))
(proclaim '(special TEA::INFN-NEW-ASSUMPTION))
(proclaim '(special TEA::FIXPOINT-COMPUTE-IMPS-PRED))
(proclaim '(special TEA::FIXPOINT-COMPUTE-IMPS-PRED-DEFAULT))
(proclaim '(special TEA::FIXPOINT-INDUCTION-STRATEGY))
(proclaim '(special TEA::FIXPOINT-INSTANTIATOR))
(proclaim '(special TEA::DEDUCTION-GRAPH-DIRECT-INFERENCE-TO-FIXPOINT-GOAL-FORM))
(proclaim '(special TEA::BUILD-TRANSLATED-INDUCTOR-FROM-INDUCTION-PRINCIPLE))
(proclaim '(special TEA::ADD-MACETE-TO-INDUCTION-STEP-HOOK))
(proclaim '(special TEA::NAME->INDUCTOR))
(proclaim '(special TEA::BUILD-INDUCTOR-FROM-INDUCTION-PRINCIPLE))
(proclaim '(special TEA::INDUCT-ON-VARIABLES-STRATEGY))
(proclaim '(special TEA::INDUCTION-STEP-HOOK-APPLICATION))
(proclaim '(special TEA::INDUCTION-STEP-GLOBAL-MACETE-APPLICATION))
(proclaim '(special TEA::INDUCTION-STEP-DEFINITION-EXPANSION))
(proclaim '(special TEA::DO-INDUCTION-STEP-INFERENCES))
(proclaim '(special TEA::RAISE-CONDITIONALS-AFTER-INDUCTION?))
(proclaim '(special TEA::DO-BASE-CASE-INFERENCES))
(proclaim '(special TEA::IMMEDIATE-INDUCTION-INFERENCE))
(proclaim '(special TEA::REVERT-FORMULAS-FROM-CONTEXT-TO-ASSERTION))
(proclaim '(special TEA::INSISTENTLY-SPLIT-CONJUNCTIONS))
(proclaim '(special TEA::RECOVER-INDUCTION-FROM-SEQUENT-AUX))
(proclaim '(special TEA::INDUCTION-VARIABLES-GIVEN?))
(proclaim '(special TEA::RECOVER-INDUCTION-FROM-SEQUENT))
(proclaim '(special TEA::GENERALIZE-AND-INDUCT))
(proclaim '(special TEA::SEEK-AND-DO-INDUCTION-INFERENCE))
(proclaim '(special TEA::NON-TRIVIAL-FORMULA-FOR-INDUCTION?))
(proclaim '(special TEA::FRINGE-TERM-INSTANTIATIONS))
(proclaim '(special TEA::FRINGE-TERMS))
(proclaim '(special TEA::FIND-INDUCTION-VARIABLES-IN-FORMULA))
(proclaim '(special TEA::BUILD-INDUCTOR))
(proclaim '(special TEA::*IMPS-INDUCTORS*))
(proclaim '(special TEA::INDUCTOR-DONT-UNFOLD))
(proclaim '(special TEA::INDUCTOR-INDUCTION-STEP-MATCHER))
(proclaim '(special TEA::INDUCTOR-INDUCTION-STEP-INSTANTIATIONS))
(proclaim '(special TEA::INDUCTOR-INDUCTION-STEP))
(proclaim '(special TEA::INDUCTOR-INDUCTION-MACETE))
(proclaim '(special TEA::INDUCTOR-INDUCTION-VARIABLES))
(proclaim '(special TEA::INDUCTOR-UNIVERSAL-MATRIX-MATCHER))
(proclaim '(special TEA::INDUCTOR-MATCHER))
(proclaim '(special TEA::INDUCTOR-INDUCTION-STEP-HOOK))
(proclaim '(special TEA::INDUCTOR-BASE-CASE-HOOK))
(proclaim '(special TEA::INDUCTOR-NAME))
(proclaim '(special TEA::MAKE-INDUCTOR))
(proclaim '(special TEA::INDUCTOR?))
(proclaim '(special TEA::REPEATED-DEFINITION-EXPANSION-STRATEGY))
(proclaim '(special TEA::DEFINITION-EXPANSION-STRATEGY))
(proclaim '(special TEA::GLOBAL-INDUCTION-STEP-HOOK))
(proclaim '(special TEA::DEDUCTION-GRAPH-REPEATEDLY-APPLY-MACETE-CONDITIONALLY))
(proclaim '(special TEA::DEDUCTION-GRAPH-APPLY-MACETE-CONDITIONALLY))
(proclaim '(special TEA::DEDUCTION-GRAPH-REPEATEDLY-UNFOLD-RECURSIVE-DEFINITIONS))
(proclaim '(special TEA::DEDUCTION-GRAPH-REPEATEDLY-UNFOLD-DEFINITIONS))
(proclaim '(special TEA::DEDUCTION-GRAPH-UNFOLD-DEFINITIONS))
(proclaim '(special TEA::DEDUCTION-GRAPH-UNFOLD-DEFINITIONS-ONCE))
(proclaim '(special TEA::PATHS-TO-DEFINED-OPERATOR-APPLICATION-TERMS))
(proclaim '(special TEA::BACKCHAIN-REPEATEDLY))
(proclaim '(special TEA::DEDUCTION-GRAPH-ELIMINATE-DEFINED-IOTA-EXPRESSION))
(proclaim '(special TEA::SORT-DEFINEDNESS-AND-CONDITIONALS))
(proclaim '(special TEA::DIRECT-AND-ANTECEDENT-INFERENCE-STRATEGY-WITH-SIMPLIFICATION))
(proclaim '(special TEA::INSISTENT-DIRECT-AND-ANTECEDENT-INFERENCE-STRATEGY))
(proclaim '(special TEA::DIRECT-AND-ANTECEDENT-INFERENCE-STRATEGY))
(proclaim '(special TEA::CASE-SPLIT-ON-CONDITIONALS))
(proclaim '(special TEA::USE-DEFINITIONS))
(proclaim '(special TEA::INSTANTIATE-THEOREM-WITH-SEQUENT-FREE-VARIABLES))
(proclaim '(special TEA::LOCAL-DEFINITION-STRATEGY))
(proclaim '(special TEA::CASE-SPLIT-STRATEGY))
(proclaim '(special TEA::CASE-SPLIT))
(proclaim '(special TEA::TRANSPORT-AND-ASSUME-THEOREM-STRATEGY))
(proclaim '(special TEA::SELECTIVE-ANTECEDENT-INFERENCES-STRATEGY))
(proclaim '(special TEA::SELECTIVE-ANTECEDENT-INFERENCES))
(proclaim '(special TEA::PROVE-BY-INSISTENT-DIRECT-INFERENCE))
(proclaim '(special TEA::PROVE-BY-DIRECT-INFERENCE))
(proclaim '(special TEA::AUTO-TRANSPORT-AND-INSTANTIATE-THEOREM-STRATEGY))
(proclaim '(special TEA::TRANSPORT-AND-INSTANTIATE-THEOREM-STRATEGY))
(proclaim '(special TEA::INSTANTIATE-THEOREM-STRATEGY))
(proclaim '(special TEA::BETA-REDUCE-ANTECEDENT-STRATEGY-AUX-2))
(proclaim '(special TEA::BETA-REDUCE-ANTECEDENT-STRATEGY-AUX-1))
(proclaim '(special TEA::BETA-REDUCE-ANTECEDENT-STRATEGY))
(proclaim '(special TEA::SIMPLIFY-ANTECEDENT-STRATEGY))
(proclaim '(special TEA::INSTANTIATE-UNIVERSAL-ANTECEDENT-STRATEGY))
(proclaim '(special TEA::INSTANTIATE-UNIVERSAL-ANTECEDENT-MULTIPLY-STRATEGY))
(proclaim '(special TEA::INSTANTIATE-EXISTENTIAL-STRATEGY))
(proclaim '(special TEA::UNIVERSAL-INSTANTIATION?))
(proclaim '(special TEA::EXISTENTIAL-GENERALIZATION?))
(proclaim '(special TEA::PRECEDE-BY-DIRECT-OR-ANTECEDENT-INFERENCES))
(proclaim '(special TEA::DEDUCTION-GRAPH-EXISTENTIAL-ANTECEDENT-INFERENCES))
(proclaim '(special TEA::DEDUCTION-GRAPH-UNIVERSAL-DIRECT-INFERENCES))
(proclaim '(special TEA::GENERALIZE-EXISTENTIAL-ASSERTION))
(proclaim '(special TEA::SORT-EXPRESSION-LIST-BY-CONSTRUCTOR))
(proclaim '(special TEA::DEDUCTION-GRAPH-RAISE-CONDITIONAL-AND-DIRECT-INFERENCE))
(proclaim '(special TEA::PROVE-BY-LOGIC-AND-SIMPLIFICATION))
(proclaim '(special TEA::PROVE-BY-RAISING-CONDITIONALS-AND-SIMPLIFICATION))
(proclaim '(special TEA::INFERENCE-ULTIMATELY-SUCCEEDS-FOR-STRATEGY?))
(proclaim '(special TEA::MARK-AS-VISITED))
(proclaim '(special TEA::FAILED-OR-REDUNDANT-INFERENCE?))
(proclaim '(special TEA::SET-STRATEGY-PERSISTENCE))
(proclaim '(special TEA::STRATEGY-PARAMETERS-AVOID-ASSUMPTIONS))
(proclaim '(special TEA::STRATEGY-PARAMETERS-WEAKEN))
(proclaim '(special TEA::STRATEGY-PARAMETERS-DO-SIMPLIFICATION?))
(proclaim '(special TEA::STRATEGY-PARAMETERS-PERSISTENCE))
(proclaim '(special TEA::STRATEGY-PARAMETERS-NODE-LIST))
(proclaim '(special TEA::MAKE-STRATEGY-PARAMETERS))
(proclaim '(special TEA::STRATEGY-PARAMETERS?))
(proclaim '(special TEA::GLOBAL-STRATEGY-PERSISTENCE))
(proclaim '(special TEA::DEDUCTION-GRAPH-APPLY-IN-SEQUENCE))
(proclaim '(special TEA::PARALLEL-STRATEGY-CONSTRUCTOR))
(proclaim '(special TEA::SEQUENTIAL-STRATEGY-CONSTRUCTOR))
(proclaim '(special TEA::REPEAT-STRATEGY-CONSTRUCTOR))
(proclaim '(special TEA::REPEAT-STRATEGY-CONSTRUCTOR-AUX))
(proclaim '(special TEA::SERIES-STRATEGY-CONSTRUCTOR))
(proclaim '(special TEA::DEDUCTION-GRAPH-CROSS-FERTILIZE))
(proclaim '(special TEA::DEDUCTION-GRAPH-INFERENCES-FOR-CROSS-FERTILIZATION))
(proclaim '(special TEA::DEDUCTION-GRAPH-CONJUNCTIVE-AND-EXISTENTIAL-ANTECEDENT-INFERENCES))
(proclaim '(special TEA::DEDUCTION-GRAPH-UNIVERSAL-AND-IMPLICATION-DIRECT-INFERENCES-FOR-CF))
(proclaim '(special TEA::DEDUCTION-GRAPH-DIRECT-INFERENCE-TO-MATCH))
(proclaim '(special TEA::DEDUCTION-GRAPH-DIRECT-INFERENCE-TO-SATISFACTION))
(proclaim '(special TEA::INFERENCE-NODE-SIMPLIFY-MINOR-HYPOTHESES))
(proclaim '(special TEA::DEDUCTION-GRAPH-STRATEGY-SIMPLIFICATION-PROCEDURE))
(proclaim '(special TEA::AUTO-INSTANTIATE-UNIVERSAL-ANTECEDENT))
(proclaim '(special TEA::AUTO-INSTANTIATE-SUBSTS->TERMS))
(proclaim '(special TEA::AUTO-INSTANTIATE-REORDER-SUBST))
(proclaim '(special TEA::AUTO-INSTANTIATE-SELECTIVELY-JOIN-SUBSTS))
(proclaim '(special TEA::AUTO-INSTANTIATE-SELECT-SUBST))
(proclaim '(special TEA::AUTO-INSTANTIATE-FIND-SUBST))
(proclaim '(special TEA::AUTO-INSTANTIATE-EXISTENTIAL-FIND-TERMS))
(proclaim '(special TEA::AUTO-INSTANTIATE-EXISTENTIAL))
(proclaim '(special TEA::DERIVE-INSTANCE-FROM-MACETE-STRATEGY))
(proclaim '(special TEA::SEQUENT-DERIVE-INSTANCE-FROM-MACETE))
(proclaim '(special TEA::PATHS-AND-SUBSTS-UNIFYING-EXISTENTIAL-TO-MACETE))
(proclaim '(special TEA::PATHS-AND-SUBSTS-UNIFYING))
(proclaim '(special TEA::INSTANTIATE-EXISTENTIAL))
(proclaim '(special TEA::INSTANTIATE-UNIVERSAL-ANTECEDENT))
(proclaim '(special TEA::INSTANTIATE-UNIVERSAL-ANTECEDENT-MULTIPLY))
(proclaim '(special TEA::INSTANTIATE-UNIVERSAL-ANTECEDENT-ONCE))
(proclaim '(special TEA::INSTANTIATE-THEOREM-1))
(proclaim '(special TEA::INSTANTIATE-THEOREM))
(proclaim '(special TEA::*RECURSIVE-UNFOLDING-AND-REDUCTION-MACETE*))
(proclaim '(special TEA::*DEFINITION-UNFOLDING-MACETE-AND-REDUCTION-MACETE*))
(proclaim '(special TEA::*BETA-REDUCE-UNSTOPPABLY-MACETE*))
(proclaim '(special TEA::*BETA-REDUCE-REPEATEDLY-MACETE*))
(proclaim '(special TEA::*RECURSIVE-UNFOLDING-MACETE*))
(proclaim '(special TEA::*DEFINITION-UNFOLDING-MACETE*))
(proclaim '(special TEA::*SIMPLIFY-MACETE*))
(proclaim '(special TEA::*BETA-REDUCE-MACETE*))
(proclaim '(special TEA::*BETA-REDUCE-INSISTENTLY-MACETE*))
(proclaim '(special TEA::CONTEXT-BETA-REDUCE-INSISTENTLY))
(proclaim '(special TEA::CONTEXT-BETA-REDUCE))
(proclaim '(special TEA::KERNEL-THEORY?))
(proclaim '(special TEA::THE-KERNEL-THEORY))
(proclaim '(special TEA::THE-KERNEL-THEORY-THEOREMS))
(proclaim '(special TEA::THE-KERNEL-THEORY-AXIOMS))
(proclaim '(special TEA::UNIT-SORT-REWRITE-RULE))
(proclaim '(special TEA::UNIT-SORT-DEFINING-AXIOM))
(proclaim '(special TEA::ARBITRARY-INDIVIDUAL))
(proclaim '(special TEA::SORT-OF-ARBITRARY-INDIVIDUAL))
(proclaim '(special TEA::UNIT%SORT))
(proclaim '(special TEA::THE-KERNEL-LANGUAGE))
(proclaim '(special TEA::BUILD-STRATEGY-FROM-MACETE))
(proclaim '(special TEA::MACETE->STRATEGY))
(proclaim '(special TEA::BUILD-AND-INSTALL-MACETE-FROM-SEXP))
(proclaim '(special TEA::BUILD-MACETE-FROM-SEXP))
(proclaim '(special TEA::BUILD-ANONYMOUS-MACETE))
(proclaim '(special TEA::SOUND-MACETE-CONSTRUCTOR))
(proclaim '(special TEA::REPEAT-MACETE-CONSTRUCTOR))
(proclaim '(special TEA::PARALLEL-MACETE-CONSTRUCTOR))
(proclaim '(special TEA::SEQUENTIAL-MACETE-CONSTRUCTOR))
(proclaim '(special TEA::HANDLING-MINOR-PREMISES-MACETE-CONSTRUCTOR))
(proclaim '(special TEA::WITHOUT-MINOR-PREMISES-MACETE-CONSTRUCTOR))
(proclaim '(special TEA::SERIES-MACETE-CONSTRUCTOR))
(proclaim '(special TEA::GUARD-AMALGAMATOR))
(proclaim '(special TEA::UNION-AMALGAMATOR))
(proclaim '(special TEA::PARALLEL-MACETE->STRATEGY-CONVERTER))
(proclaim '(special TEA::SEQUENTIAL-MACETE->STRATEGY-CONVERTER))
(proclaim '(special TEA::REPEAT-MACETE->STRATEGY-CONVERTER))
(proclaim '(special TEA::SERIES-MACETE->STRATEGY-CONVERTER))
(proclaim '(special TEA::DEFAULT-MACETE->STRATEGY-CONVERTER))
(proclaim '(special TEA::DEFAULT-SOUNDNESS-PREDICATE))
(proclaim '(special TEA::DEFAULT-BIDIRECTIONALITY-PREDICATE))
(proclaim '(special TEA::CONSTRUCTOR-NAME->MACETE-CONSTRUCTOR))
(proclaim '(special TEA::MAKE-MACETE-CONSTRUCTOR))
(proclaim '(special TEA::MACETE-CONSTRUCTOR-TABLE))
(proclaim '(special TEA::CONSTRUCTOR-KEY-AMALGAMATOR))
(proclaim '(special TEA::CONSTRUCTOR-MACETE->STRATEGY-CONVERTER))
(proclaim '(special TEA::MACETE-CONSTRUCTOR))
(proclaim '(special TEA::MACETE-CONSTRUCTOR-NAME))
(proclaim '(special TEA::MACETE-COMPONENTS))
(proclaim '(special TEA::COMPOSITE-MACETE?))
(proclaim '(special TEA::THEORY-NONSIMPLE-INTERACTIVE-MACETES))
(proclaim '(special TEA::APPLY-MACETE-WITHOUT-MINOR-PREMISES))
(proclaim '(special TEA::ADD-MACETE))
(proclaim '(special TEA::COMPOUND-OR-ODDBALL-MACETE?))
(proclaim '(special TEA::MACETE-AT-PATHS-WITH-MINOR-PREMISES-RULE-GENERATOR))
(proclaim '(special TEA::MACETE-AT-PATHS-RULE-GENERATOR))
(proclaim '(special TEA::MACETE->SEXP))
(proclaim '(special TEA::BUILD-MACETE))
(proclaim '(special TEA::*MESSAGE-END*))
(proclaim '(special TEA::*MESSAGE-BEGIN*))
(proclaim '(special TEA::MACETE-NORMAL-END-MESSAGE))
(proclaim '(special TEA::MACETE-NORMAL-BEGIN-MESSAGE))
(proclaim '(special TEA::INTERACTIVE-MACETE?))
(proclaim '(special TEA::MACETE-SOUND-IN-THEORY?))
(proclaim '(special TEA::BIDIRECTIONAL-MACETE?))
(proclaim '(special TEA::MACETE-DOCUMENTATION-STRING))
(proclaim '(special TEA::APPLY-MACETE))
(proclaim '(special TEA::NAME->MACETE-RAISE-NO-ERROR))
(proclaim '(special TEA::NAME->MACETE))
(proclaim '(special TEA::COUNT-MACETES))
(proclaim '(special TEA::*MACETE-TABLE*))
(proclaim '(special TEA::MACETE?))
(proclaim '(special TEA::THEORY-CONSTANTS-DISTINCT?))
(proclaim '(special TEA::EQUATE-TO-ZERO))
(proclaim '(special TEA::SIMP=))
(proclaim '(special TEA::SUBSORT-OF-BASESORT?))
(proclaim '(special TEA::PROCESSOR-SIMPLIFY-EQUALITY))
(proclaim '(special TEA::PROCESSOR-SIMPLIFY-EQUALITY-WITH-REQUIREMENTS))
(proclaim '(special TEA::THEORY-INEQUALITY-INSTANCES-CONTAINING-HOT-SUBTERMS))
(proclaim '(special TEA::CONTEXT-INEQUALITY-INSTANCES-CONTAINING-HOT-SUBTERMS))
(proclaim '(special TEA::THEORY-WALK-INEQUALITIES))
(proclaim '(special TEA::CONTEXT-AND-THEORY-INEQUALITY-INSTANCES-CONTAINING-HOT-SUBTERMS))
(proclaim '(special TEA::CONSULT-THEORY-INEQUALITIES?))
(proclaim '(special TEA::TERM-HOT-SUBTERMS))
(proclaim '(special TEA::EQUALITY-OR-INEQUALITY-HOT-SUBTERMS))
(proclaim '(special TEA::CONTEXT-ENTAILS-LINEAR-EQUALITY?))
(proclaim '(special TEA::CONTEXT-ENTAILS-LINEAR-INEQUALITY?))
(proclaim '(special TEA::INFEASIBLE-SET?))
(proclaim '(special TEA::LESS-THAN-OR-EQUALS?))
(proclaim '(special TEA::LESS-THAN?))
(proclaim '(special TEA::COMPUTE-LINEAR-INEQUALITY-FOR-EXPRESSION))
(proclaim '(special TEA::COMPUTE-LINEAR-FORM-FOR-EXPRESSION))
(proclaim '(special TEA::COMPUTE-CONSTANT-TERM-FOR-EXPRESSION))
(proclaim '(special TEA::COERCE-TO-MONOMIAL-OR-FIND-AND-INSTALL))
(proclaim '(special TEA::COERCE-TO-MONOMIAL))
(proclaim '(special TEA::DISCRETIZE-INEQUALITY))
(proclaim '(special TEA::FILTER-DISCRETIZABLE-INEQUALITIES))
(proclaim '(special TEA::CONTEXT-ADD-FULLY-INSTANTIATED-INEQUALITIES-AND-NEGATED-EQUALITIES))
(proclaim '(special TEA::CONTEXT-EXTRACT-FULLY-INSTANTIATED-INEQUALITIES))
(proclaim '(special TEA::CONTEXT-ADD-FULLY-INSTANTIATED-NEGATED-EQUALITIES))
(proclaim '(special TEA::CONTEXT-WALK-NEGATED-EQUALITIES))
(proclaim '(special TEA::CONTEXT-WALK-IMPLICIT-INEQUALITIES))
(proclaim '(special TEA::CONTEXT-WALK-NEGATED-INEQUALITIES))
(proclaim '(special TEA::CONTEXT-WALK-INEQUALITIES))
(proclaim '(special TEA::FULLY-INSTANTIATED-IN-CONTEXT?))
(proclaim '(special TEA::MINIMIZE-VARIABLE-COSTS))
(proclaim '(special TEA::VARIABLE-COST))
(proclaim '(special TEA::VARIABLE-SIDE))
(proclaim '(special TEA::LINEAR-INEQUALITY-SET-INFEASIBLE?))
(proclaim '(special TEA::LINEAR-INEQUALITY-SET-ELIMINATE-VARIABLE))
(proclaim '(special TEA::SEPARATOR-BUILD-INEQUALITY-SET))
(proclaim '(special TEA::LINEAR-INEQUALITY-SEPARATE))
(proclaim '(special TEA::SEPARATOR-RHS))
(proclaim '(special TEA::SEPARATOR-LHS))
(proclaim '(special TEA::SEPARATOR-NEUTRAL))
(proclaim '(special TEA::MAKE-SEPARATOR))
(proclaim '(special TEA::SEPARATOR?))
(proclaim '(special TEA::INEQUALITY-SUBTRACT))
(proclaim '(special TEA::LINEAR-INEQUALITY-ELIMINATE-VARIABLE))
(proclaim '(special TEA::LINEAR-INEQUALITY-ADD-MONOMIAL))
(proclaim '(special TEA::LINEAR-INEQUALITY-SET-OBVIOUSLY-INFEASIBLE?))
(proclaim '(special TEA::LINEAR-INEQUALITY-REDUNDANT?))
(proclaim '(special TEA::OBVIOUSLY-INFEASIBLE?))
(proclaim '(special TEA::INEQUALITY-CONTAINS-UNIVERSALLY-QUANTIFIED-VARIABLE?))
(proclaim '(special TEA::LINEAR-INEQUALITY-EXTRACT-COEFFICIENT))
(proclaim '(special TEA::LINEAR-INEQUALITY-VARIABLES))
(proclaim '(special TEA::INEQUALITY-INCLUDED?))
(proclaim '(special TEA::INEQUALITY-ENTRIES-EQUAL?))
(proclaim '(special TEA::LINEAR-INEQUALITIES-EQUAL?))
(proclaim '(special TEA::BUILD-LINEAR-INEQUALITY))
(proclaim '(special TEA::LINEAR-INEQUALITY-PRED))
(proclaim '(special TEA::LINEAR-INEQUALITY-CONSTANT))
(proclaim '(special TEA::LINEAR-INEQUALITY-FORM))
(proclaim '(special TEA::MAKE-LINEAR-INEQUALITY))
(proclaim '(special TEA::LINEAR-INEQUALITY?))
(proclaim '(special TEA::NORMALIZE-COEFFICIENTS))
(proclaim '(special TEA::DEFAULT-SUMMATION-PARTITIONER))
(proclaim '(special TEA::MONOMIAL-BASE))
(proclaim '(special TEA::MONOMIAL-COEFFICIENT))
(proclaim '(special TEA::BUILD-MONOMIAL))
(proclaim '(special TEA::ALTERNATE-SUMMATION-PARTITIONER))
(proclaim '(special TEA::APPLY-INVARIANT-BINOP-REVERSE))
(proclaim '(special TEA::APPLY-INVARIANT-BINOP))
(proclaim '(special TEA::SIMP<=))
(proclaim '(special TEA::SIMP<))
(proclaim '(special TEA::REMOVE-COMMON-FACTORS))
(proclaim '(special TEA::SUBTRACT-RH-SUMMANDS-FROM-LH-SUMMANDS))
(proclaim '(special TEA::SIMPLIFY-AND-LIST-FACTORS))
(proclaim '(special TEA::CONTEXT-IMMEDIATELY-ENTAILS-SIGN?))
(proclaim '(special TEA::FACTOR-IN-LIST?))
(proclaim '(special TEA::REMOVE-FACTOR-FROM-LIST))
(proclaim '(special TEA::ORDER-PROCESSOR-VALIDITY-CONDITIONS))
(proclaim '(special TEA::ASSERT-SORT-DISCRETENESS))
(proclaim '(special TEA::BUILD-ORDER-PROCESSOR-FROM-ALGEBRAIC-PROCESSOR))
(proclaim '(special TEA::<=R))
(proclaim '(special TEA::<R))
(proclaim '(special TEA::ORDER-PROCESSOR-SIMPLIFY-WITH-REQUIREMENTS))
(proclaim '(special TEA::ORDER-PROCESSOR-SIMPLIFY))
(proclaim '(special TEA::ORDER-PROCESSOR-REDUCED-TERMS))
(proclaim '(special TEA::ORDER-PROCESSOR-HANDLED-OPERATORS))
(proclaim '(special TEA::ORDER-PROCESSOR-ALGEBRAIC-PROCESSOR))
(proclaim '(special TEA::ORDER-PROCESSOR-SUM-PARTITIONER))
(proclaim '(special TEA::ORDER-PROCESSOR-DISCRETE-SORTS))
(proclaim '(special TEA::ORDER-PROCESSOR-<R))
(proclaim '(special TEA::ORDER-PROCESSOR-<=R))
(proclaim '(special TEA::MAKE-ORDER-PROCESSOR))
(proclaim '(special TEA::ORDER-PROCESSOR?))
(proclaim '(special TEA::PROCESSOR-DISCRETE-SORTS))
(proclaim '(special TEA::INSISTENTLY-REDUCE))
(proclaim '(special TEA::INSISTENTLY-ETA-REDUCE))
(proclaim '(special TEA::ETA-REDUCE))
(proclaim '(special TEA::ETA-REDUCIBLE?))
(proclaim '(special TEA::INSISTENT-BETA-REDUCE))
(proclaim '(special TEA::INSISTENTLY-BETA-REDUCE))
(proclaim '(special TEA::RECURSIVELY-BETA-REDUCE))
(proclaim '(special TEA::BETA-REDUCE))
(proclaim '(special TEA::BETA-REDUCE-RECKLESSLY))
(proclaim '(special TEA::CHECK-SIMPLE-SUBSTITUTION))
(proclaim '(special TEA::SIMPLE-SUBSTITUTION))
(proclaim '(special TEA::COMBINATION))
(proclaim '(special TEA::DIVIDE-LIST))
(proclaim '(special TEA::MAP-INDEPENDENTLY))
(proclaim '(special TEA::PRODUCT-OF-POWERS->EXPRESSION))
(proclaim '(special TEA::SUM-OF-PRODUCTS-OF-POWERS->EXPRESSION))
(proclaim '(special TEA::BINOMIAL))
(proclaim '(special TEA::BINOMIAL-EXPANSION))
(proclaim '(special TEA::EXPAND^))
(proclaim '(special TEA::SUM-OF-PRODUCTS->EXPRESSION))
(proclaim '(special TEA::PRODUCT->EXPRESSION))
(proclaim '(special TEA::CROSS-MULTIPLY-EXPR-LIST))
(proclaim '(special TEA::CROSS-MULTIPLY))
(proclaim '(special TEA::EXPAND*))
(proclaim '(special TEA::ESSENTIAL-MULTIPLICATIVE-ARGUMENTS))
(proclaim '(special TEA::USE-NUMERALS-FOR-GROUND-TERMS))
(proclaim '(special TEA::NUMERAL->REPEATED-SUM-OF-ONES))
(proclaim '(special TEA::REPEATED-SUM-OF-ONES->NUMERAL))
(proclaim '(special TEA::FORM-PRODUCT-EXPRESSION))
(proclaim '(special TEA::FORM-EXTERNAL-PRODUCT-EXPRESSION))
(proclaim '(special TEA::FORM-SUM-EXPRESSION))
(proclaim '(special TEA::WEIGHTED-PRODUCT-TALLY-CHART->EXPRESSION))
(proclaim '(special TEA::WEIGHTED-PRODUCT-ACCUMULATE-EXPRESSION))
(proclaim '(special TEA::MAKE-WEIGHTED-PRODUCT-TALLY-CHART))
(proclaim '(special TEA::WEIGHTED-SUM-TALLY-CHART->EXPRESSION))
(proclaim '(special TEA::WEIGHTED-SUM-ACCUMULATE-EXPRESSION))
(proclaim '(special TEA::MULTIPLICATIVE-ASSOCIATIVE-ARGUMENTS))
(proclaim '(special TEA::MAKE-WEIGHTED-SUM-TALLY-CHART))
(proclaim '(special TEA::SIMP/))
(proclaim '(special TEA::*SCALAR-INHIBITING-MULTIPLICATION))
(proclaim '(special TEA::^FORMAL-INHIBITING-EXPONENTIATION))
(proclaim '(special TEA::^FORMAL))
(proclaim '(special TEA::*SCALAR))
(proclaim '(special TEA::+SCALAR))
(proclaim '(special TEA::COMPARE-EXPRESSION-LISTS))
(proclaim '(special TEA::QUICK-COMPARE))
(proclaim '(special TEA::ORDER-BY-ALPHA-ROOTS?))
(proclaim '(special TEA::SIMP-SUB))
(proclaim '(special TEA::SIMP-))
(proclaim '(special TEA::SIMP^))
(proclaim '(special TEA::STRING-OUT-NESTED-EXPONENTIATION))
(proclaim '(special TEA::SIMP*-1))
(proclaim '(special TEA::ASSOCIATIVE-SCALARS-AND-VECTOR))
(proclaim '(special TEA::SIMP*))
(proclaim '(special TEA::MULTIPLY-EXPRESSION-LIST))
(proclaim '(special TEA::SUM-EXPRESSION-LIST))
(proclaim '(special TEA::SIMP+))
(proclaim '(special TEA::LABEL-TALLIES))
(proclaim '(special TEA::ACCUMULATE-LABEL))
(proclaim '(special TEA::ACCUMULATE-SCALAR))
(proclaim '(special TEA::INIT-TALLY-CHART))
(proclaim '(special TEA::TALLY-CHART-OBJECT-LIST))
(proclaim '(special TEA::TALLY-CHART-COMPARATOR))
(proclaim '(special TEA::TALLY-CHART-LABEL-EQUIVALENCE))
(proclaim '(special TEA::TALLY-CHART-LABEL-ACCUMULATOR))
(proclaim '(special TEA::TALLY-CHART-SCALAR-ACCUMULATOR))
(proclaim '(special TEA::TALLY-CHART-SCALAR))
(proclaim '(special TEA::MAKE-TALLY-CHART))
(proclaim '(special TEA::TALLY-CHART?))
(proclaim '(special TEA::TALLY-OBJECT-WEIGHT))
(proclaim '(special TEA::TALLY-OBJECT-LABEL))
(proclaim '(special TEA::TALLY))
(proclaim '(special TEA::INIT-TALLY-OBJECT))
(proclaim '(special TEA::DIVISION?))
(proclaim '(special TEA::SUBTRACTION?))
(proclaim '(special TEA::SIGN-NEGATION?))
(proclaim '(special TEA::EXPONENTIATION?))
(proclaim '(special TEA::MULTIPLICATION?))
(proclaim '(special TEA::ADDITION?))
(proclaim '(special TEA::PROCESSOR-SIMPLIFY-WITH-REQUIREMENTS))
(proclaim '(special TEA::PROCESSOR-PARAMETERS-PERSISTENCE))
(proclaim '(special TEA::PROCESSOR-PARAMETERS-REQUIREMENTS))
(proclaim '(special TEA::PROCESSOR-PARAMETERS-CONTEXT))
(proclaim '(special TEA::MAKE-PROCESSOR-PARAMETERS))
(proclaim '(special TEA::PROCESSOR-PARAMETERS?))
(proclaim '(special TEA::REQUIRE-CONVERGENCE-EVERY-FACTOR))
(proclaim '(special TEA::REQUIRE-CONVERGENCE-EVERY))
(proclaim '(special TEA::REQUIRE-CONVERGENCE))
(proclaim '(special TEA::REQUIRE-FORMULA))
(proclaim '(special TEA::ASSOCIATIVE-ARGUMENTS))
(proclaim '(special TEA::ALLOW-NEGATIVE-EXPONENTS?))
(proclaim '(special TEA::INHIBIT-MULTIPLICATION?))
(proclaim '(special TEA::INHIBIT-EXPONENTIATION?))
(proclaim '(special TEA::EXPONENT-TYPE))
(proclaim '(special TEA::NUMBER->EXPONENT-CONSTANT))
(proclaim '(special TEA::NUMBER->SCALAR-CONSTANT))
(proclaim '(special TEA::SCALAR-CONSTANT->NUMERICAL-OBJECT))
(proclaim '(special TEA::NUMERICAL-OBJECT->SCALAR-CONSTANT))
(proclaim '(special TEA::SCALAR-CONSTANT-=1?))
(proclaim '(special TEA::SCALAR-CONSTANT-=0?))
(proclaim '(special TEA::SCALAR-CONSTANT?))
(proclaim '(special TEA::BASE-SORTED?))
(proclaim '(special TEA::ZZ-EXTENSION?))
(proclaim '(special TEA::ANNOTATE-EXPRESSION-AS-REDUCED))
(proclaim '(special TEA::ANNOTATE-EXPRESSION-AS-UNIVERSALLY-REDUCED))
(proclaim '(special TEA::PROCESSOR-REDUCED?))
(proclaim '(special TEA::PROCESSOR-UNIVERSALLY-REDUCED?))
(proclaim '(special TEA::UNIVERSAL-REDUCTION-ENTRY))
(proclaim '(special TEA::UNIVERSAL-REDUCTION-ENTRY?))
(proclaim '(special TEA::PROCESSOR-SOUND-IN-THEORY?))
(proclaim '(special TEA::USE-TRIVIAL-SCALAR-CORRESPONDENCES))
(proclaim '(special TEA::BUILD-ALGEBRAIC-PROCESSOR))
(proclaim '(special TEA::RING-PROCESSOR?))
(proclaim '(special TEA::PROCESSOR-FAITHFUL-NUMERAL-REPRESENTATION?))
(proclaim '(special TEA::PROCESSOR-TERM-TO-NUMERAL-FUNCTION))
(proclaim '(special TEA::PROCESSOR-CONSTANT-RECOGNIZER-FUNCTION))
(proclaim '(special TEA::PROCESSOR-NUMERAL-TO-TERM-FUNCTION))
(proclaim '(special TEA::PROCESSOR-LANGUAGE))
(proclaim '(special TEA::PROCESSOR-CANCELLATION-VALID?))
(proclaim '(special TEA::SCALARS-TYPE))
(proclaim '(special TEA::COEFFICIENT-PROCESSOR))
(proclaim '(special TEA::EXPONENT-PROCESSOR))
(proclaim '(special TEA::COMMUTATIVE?))
(proclaim '(special TEA::/R))
(proclaim '(special TEA::SUB-R))
(proclaim '(special TEA::-R))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-SIMPLIFY-WITH-REQUIREMENTS))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-SIMPLIFY))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-INSISTENTLY-APPLY-REWRITE-RULES))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-APPLY-REWRITE-RULES))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-VALIDITY-CONDITIONS))
(proclaim '(special TEA::OPERATION-SORTS))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-REWRITE-RULES))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-SUM-PARTITIONER))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-CANCELLATION-VALID?))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-EXPAND))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-COMMUTES))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-HANDLED-OPERATORS))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-REDUCED-TERMS))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-/R))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-SUB-R))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-^R))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-*R))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-+R))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR--R))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-FAITHFUL-NUMERAL-REPRESENTATION?))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-TERM-TO-NUMERAL-FUNCTION))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-CONSTANT-RECOGNIZER-FUNCTION))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-NUMERAL-TO-TERM-FUNCTION))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-COEFFICIENT-PROCESSOR))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-EXPONENT-PROCESSOR))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-SCALARS-TYPE))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-LANGUAGE))
(proclaim '(special TEA::MAKE-ALGEBRAIC-PROCESSOR))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR?))
(proclaim '(special TEA::PARTITION-SUMMATION))
(proclaim '(special TEA::PROCESSOR-VALIDITY-CONDITIONS))
(proclaim '(special TEA::PROCESSOR?))
(proclaim '(special TEA::PROCESSOR-REDUCED-TERMS))
(proclaim '(special TEA::PROCESSOR-SIMPLIFY))
(proclaim '(special TEA::ALGEBRAIC-SUB-PROCESSOR))
(proclaim '(special TEA::FIND-APPLICABLES-WITH-LATEX-DESCRIPTION))
(proclaim '(special TEA::LAST-APPLICABLES))
(proclaim '(special TEA::LATEX-DESCRIPTION-FOR-APPLICABLE-MACETES))
(proclaim '(special TEA::MACETE-LATEX-DESCRIPTION))
(proclaim '(special TEA::APPLICABLE-MACETES-FOR-SQN-WITH-DESCRIPTION))
(proclaim '(special TEA::MACETE-DESCRIPTION))
(proclaim '(special TEA::APPLICABLE-MACETES-FOR-SQN))
(proclaim '(special TEA::APPLICABLE-MACETES))
(proclaim '(special TEA::QUASI-COMPONENT-PARITIES))
(proclaim '(special TEA::APPLICABLE-MACETES-AT-TOP-LEVEL))
(proclaim '(special TEA::TRANSLATION-QUICK-MATCH?))
(proclaim '(special TEA::QUICK-MATCH?))
(proclaim '(special TEA::INSERT-MACETE-KEY))
(proclaim '(special TEA::USABLE-MACETE?))
(proclaim '(special TEA::MACETE-IS-DEINITION-OR-VARIABLE-LHS?))
(proclaim '(special TEA::MACETE-KEYS))
(proclaim '(special TEA::RETRIEVE-KEY-BY-QC-AND-LEAD))
(proclaim '(special TEA::ENTER-KEY-BY-QC-AND-LEAD))
(proclaim '(special TEA::*QC-TO-ELEMENTARY-KEY-TABLE*))
(proclaim '(special TEA::*QC-TO-TRANSPORTABLE-KEY-TABLE*))
(proclaim '(special TEA::ENTER-MACETE-BY-KEY))
(proclaim '(special TEA::RETRIEVE-MACETES-FROM-KEY))
(proclaim '(special TEA::*KEYS-MACETE-TABLE*))
(proclaim '(special TEA::USE-OVERLOADED-NAMES?))
(proclaim '(special TEA::APPLY-OPERATOR-BUILDER))
(proclaim '(special TEA::APPLY-OPERATOR-SEXP-DECODER))
(proclaim '(special TEA::INSTALL-OVERLOADINGS-FOR-NAME-IN-THEORY-ENSEMBLE-INSTANCES))
(proclaim '(special TEA::THEORY-ENSEMBLE-INSTALL-OVERLOADINGS-FOR-DEFINED-CONSTANTS))
(proclaim '(special TEA::FORMAL-SYMBOL-OVERLOADED-NAME))
(proclaim '(special TEA::UNAMBIGOUSLY-CONSTRUCTIBLE-FROM-ARGUMENTS-IN-LANGUAGE?))
(proclaim '(special TEA::OVERLOADED-NAME-FOR-FORMAL-SYMBOL?))
(proclaim '(special TEA::DISAMBIGUATE-OVERLOADED-NAME-FROM-ARGUMENTS))
(proclaim '(special TEA::LANGUAGE-FIND-CONSTANTS))
(proclaim '(special TEA::POSSIBLE-SYMBOL-FORMS-BY-COMPARISON))
(proclaim '(special TEA::POSSIBLE-SYMBOL-FORMS))
(proclaim '(special TEA::REMOVE-OVERLOADED-NAME))
(proclaim '(special TEA::INSTALL-OVERLOADED-NAME-FOR-SYMBOL-NAMES))
(proclaim '(special TEA::INSTALL-OVERLOADED-NAME-FOR-FORMAL-SYMBOL))
(proclaim '(special TEA::*FORMAL-SYMBOL-OVERLOADED-NAMES-TABLE*))
(proclaim '(special TEA::*OVERLOADED-NAMES-TABLE*))
(proclaim '(special TEA::USE-SEXP-SYNTAX?))
(proclaim '(special TEA::SEXP-PRINT))
(proclaim '(special TEA::SEXP-READ))
(proclaim '(special TEA::PP-READ-MACRO-INVERSE))
(proclaim '(special TEA::LINE-OF))
(proclaim '(special TEA::COLUMN-OF))
(proclaim '(special TEA::MAKE-POSITION))
(proclaim '(special TEA::GO-TO-COLUMN))
(proclaim '(special TEA::*INDENTATIONS*))
(proclaim '(special TEA::HOOK-FORMATS))
(proclaim '(special TEA::LITTLE-ELL-FORMAT))
(proclaim '(special TEA::BIG-ELL-FORMAT))
(proclaim '(special TEA::HORIZONTAL-FORMAT))
(proclaim '(special TEA::VERTICAL-FORMAT))
(proclaim '(special TEA::REPEATEDLY))
(proclaim '(special TEA::INDEFINITELY))
(proclaim '(special TEA::ONCE))
(proclaim '(special TEA::INDENT-UNDER-HEAD))
(proclaim '(special TEA::INDENT-FOR-BODY))
(proclaim '(special TEA::INDENT-UNDER-FIRST))
(proclaim '(special TEA::ON-SAME-LINE))
(proclaim '(special TEA::COMPUTE-DIMENSIONS))
(proclaim '(special TEA::MAKE-LIST-NODE))
(proclaim '(special TEA::PP-PRESCAN-LIST))
(proclaim '(special TEA::PP-PRESCAN-PAIR))
(proclaim '(special TEA::PP-PRESCAN-VECTOR))
(proclaim '(special TEA::MAKE-PREFIX-NODE))
(proclaim '(special TEA::MAKE-LEAF))
(proclaim '(special TEA::PP-PRESCAN))
(proclaim '(special TEA::PRINT-NODE))
(proclaim '(special TEA::NODE-PASS-2))
(proclaim '(special TEA::NODE-DIMENSIONS))
(proclaim '(special TEA::SEXP-PRETTY-PRINT))
(proclaim '(special TEA::STREAM-REF))
(proclaim '(special TEA::MAP-STREAM))
(proclaim '(special TEA::*SINGLE-LINE-SPECIAL-FORM-LIMIT*))
(proclaim '(special TEA::*LINE-WIDTH*))
(proclaim '(special TEA::SET-COMMAND-DISPLAY))
(proclaim '(special TEA::DISPLAY-COMMAND))
(proclaim '(special TEA::*COMMAND-DISPLAY-PROCS*))
(proclaim '(special TEA::DEDUCTION-GRAPH-TEX-FORMATTER))
(proclaim '(special TEA::NAME-FOR-TEX))
(proclaim '(special TEA::DISPLAY-PRESCRIPTIVE-PROOF-IN-TEX-FORMAT))
(proclaim '(special TEA::FORMAT-A-LIST-ELEGANTLY))
(proclaim '(special TEA::ENUMERATE-A-LIST-OF-SEQUENT-NUMBERS))
(proclaim '(special TEA::SEQUENT-NUMBER-OR-GOAL))
(proclaim '(special TEA::TEX-SUMMARY-DISPLAY-HISTORY-ENTRY-IN-TEX-FORMAT))
(proclaim '(special TEA::TEX-SUMMARY-DISPLAY-SQN-CONTEXT-IN-TEX-FORMAT))
(proclaim '(special TEA::TEX-SUMMARY-DISPLAY-SQN-ASSERTION-IN-TEX-FORMAT))
(proclaim '(special TEA::TEX-SUMMARY-DISPLAY-SQN-IN-TEX-FORMAT))
(proclaim '(special TEA::TEX-SUMMARY-MARK-SQN-AS-SEEN))
(proclaim '(special TEA::TEX-SUMMARY-ASSERTION-SEEN?))
(proclaim '(special TEA::TEX-SUMMARY-CONTEXT-SEEN?))
(proclaim '(special TEA::TEX-SUMMARY-SEQUENT-SEEN?))
(proclaim '(special TEA::TEX-SUMMARY-GOAL-NODE?))
(proclaim '(special TEA::DG-HISTORY-ENTRY-SEQUENT-NODES))
(proclaim '(special TEA::DEDUCTION-GRAPH-BUILD-TEX-SUMMARY))
(proclaim '(special TEA::TEX-SUMMARY-SEEN-CONTEXT-SQN-ALIST))
(proclaim '(special TEA::TEX-SUMMARY-SEEN-ASSERTION-SQN-ALIST))
(proclaim '(special TEA::TEX-SUMMARY-SEEN-SEQUENT-NODES))
(proclaim '(special TEA::TEX-SUMMARY-GOAL-SEEN?))
(proclaim '(special TEA::TEX-SUMMARY-GRAPH))
(proclaim '(special TEA::TEX-SUMMARY-RELEVANT-SEQUENT-NODES))
(proclaim '(special TEA::TEX-SUMMARY-PORT))
(proclaim '(special TEA::MAKE-TEX-SUMMARY))
(proclaim '(special TEA::TEX-SUMMARY?))
(proclaim '(special TEA::XVIEW-THEOREMS-BY-NAME))
(proclaim '(special TEA::DISPLAY-THEORY-IN-TEX-FORMAT))
(proclaim '(special TEA::DISPLAY-BNF-IN-TEX-FORMAT))
(proclaim '(special TEA::TEX-DISPLAY-NON-COMPOSITE-MACETE-ACTIVELY))
(proclaim '(special TEA::MACETE-COLLECT-NON-COMPOSITES))
(proclaim '(special TEA::DISPLAY-MACETE-LIST))
(proclaim '(special TEA::DISPLAY-COMPOSITE-MACETE-IN-TEX-FORMAT))
(proclaim '(special TEA::DISPLAY-COMPOSITE-MACETE-IN-TEX-FORMAT-WITHOUT-THEOREMS))
(proclaim '(special TEA::DISPLAY-MACETE-IN-TEX-FORMAT))
(proclaim '(special TEA::EXPRESSION-WIDTH))
(proclaim '(special TEA::SMALL-EXPRESSION?))
(proclaim '(special TEA::*SMALL-EXPRESSION-CUTOFF*))
(proclaim '(special TEA::DISPLAY-SEXPRESSION-IN-TEX-FORMAT))
(proclaim '(special TEA::*USE-PERIODS?*))
(proclaim '(special TEA::DISPLAY-SINGLE-FORMULA-IN-TEX-FORMAT))
(proclaim '(special TEA::DISPLAY-EXPRESSION-LIST-IN-TEX-FORMAT))
(proclaim '(special TEA::DISPLAY-SORT-IN-TEX-FORMAT))
(proclaim '(special TEA::DISPLAY-SEQUENT-FREE-VARIABLES))
(proclaim '(special TEA::DISPLAY-OBJECT-IN-TEX-FORMAT-WITHOUT-PERIODS))
(proclaim '(special TEA::DISPLAY-OBJECT-IN-TEX-FORMAT))
(proclaim '(special TEA::BACKSLASH-SPECIAL-CHARS))
(proclaim '(special TEA::XVIEW))
(proclaim '(special TEA::DISPLAY-TEX-AND-PREVIEW))
(proclaim '(special TEA::INITIALIZE-TEX-PORT-AND-APPLY))
(proclaim '(special TEA::START-XTEX))
(proclaim '(special TEA::PREVIEWER-COMMAND))
(proclaim '(special TEA::XTV-FORMAT))
(proclaim '(special TEA::WRITE-SEXP-LEAVES-TO-PORT))
(proclaim '(special TEA::OUTPUT-PORT->TEX-OUTPUT-PORT))
(proclaim '(special TEA::MAKE-SEGMENTING-PORT))
(proclaim '(special TEA::END-VERBATIM))
(proclaim '(special TEA::BEGIN-VERBATIM))
(proclaim '(special TEA::PRESENT-TEX-ID-OPERATOR))
(proclaim '(special TEA::PRESENT-TEX-INVERSE-OPERATOR))
(proclaim '(special TEA::PRESENT-TEX-INVERSE-IMAGE-OPERATOR))
(proclaim '(special TEA::PRESENT-TEX-DIRECT-IMAGE-OPERATOR))
(proclaim '(special TEA::PRESENT-LET))
(proclaim '(special TEA::PRESENT-LET-GATHER-TYPED-VARS))
(proclaim '(special TEA::PRESENT-APPLICATION))
(proclaim '(special TEA::COMPOSITE-PRESENTATION-METHOD-FOR-TEX))
(proclaim '(special TEA::SEXP-LAMBDA-ABSTRACTION?))
(proclaim '(special TEA::TEX-EXPRESSION-WIDTH))
(proclaim '(special TEA::SHORT-SEXP?))
(proclaim '(special TEA::*SMALL-TEX-EXPRESSION-CUTOFF*))
(proclaim '(special TEA::PRESENT-TEX-LAMBDA-ABSTRACTION))
(proclaim '(special TEA::FORMAT-FORALL-SUCH-THAT))
(proclaim '(special TEA::PRESENT-TEX-QUANTIFICATION-OPERATOR))
(proclaim '(special TEA::*TEX-FORM*))
(proclaim '(special TEA::PRESENT-TEX-SYMBOL))
(proclaim '(special TEA::PRESENT-TEX-LIMIT-OPERATOR))
(proclaim '(special TEA::PRESENT-TEX-INTERVAL-ITERATION-OPERATOR))
(proclaim '(special TEA::PRESENT-TEX-CHOOSE))
(proclaim '(special TEA::PRESENT-TEX-BRACED-ARGUMENTS))
(proclaim '(special TEA::PRESENT-TEX-DELIMITED-EXPRESSION-WITH-TWO-COLONS))
(proclaim '(special TEA::PRESENT-TEX-DELIMITED-EXPRESSION-WITH-DOTS))
(proclaim '(special TEA::PRESENT-TEX-DELIMITED-EXPRESSION))
(proclaim '(special TEA::PRESENT-TEX-NONSTRICT-IF))
(proclaim '(special TEA::PRESENT-TEX-IN-SORT))
(proclaim '(special TEA::PRESENT-TEX-DEFINED-IN-SORT))
(proclaim '(special TEA::PRESENT-SUBSCRIPTED-SORT-ARG))
(proclaim '(special TEA::PRESENT-TEX-UNDEFINED-OF-SORT))
(proclaim '(special TEA::PRESENT-TEX-NEWTON-NOTATION))
(proclaim '(special TEA::PRESENT-TEX-LEIBNIZ-NOTATION))
(proclaim '(special TEA::PRESENT-TEX-DIFFERENTIATION))
(proclaim '(special TEA::PRESENT-TEX-SORTING))
(proclaim '(special TEA::PRESENT-TEX-PARAMETER-SPECIFICATION))
(proclaim '(special TEA::DONT-LIST-FREE-VARIABLES?))
(proclaim '(special TEA::BRIEF-PARAMETER-SPECIFICATION?))
(proclaim '(special TEA::PRESENT-TEX-PARAMETER-LIST))
(proclaim '(special TEA::PRESENT-TEX-WITH))
(proclaim '(special TEA::PRESENT-TEX-EXPONENTIATION))
(proclaim '(special TEA::PRESENT-TEX-NON-ASSOCIATIVE-INFIX-OPERATOR))
(proclaim '(special TEA::PRESENT-TEX-CONDITIONAL-FORMULA))
(proclaim '(special TEA::PRESENT-TEX-LOGICAL-OPERATOR))
(proclaim '(special TEA::PRESENT-TEX-BINARY-INFIX-OPERATOR))
(proclaim '(special TEA::PRESENT-TEX-SORT-DEPENDENT-PREFIX-OPERATOR))
(proclaim '(special TEA::PRESENT-TEX-PREFIX-OPERATOR))
(proclaim '(special TEA::PREFIX-TEX-OPERATOR-DELIMITERS))
(proclaim '(special TEA::PRESENT-TEX-SUBTRACTION-OPERATOR))
(proclaim '(special TEA::CURRENT-BULLET-SYMBOL))
(proclaim '(special TEA::CURRENT-INDENTATION))
(proclaim '(special TEA::MAXIMUM-NESTING-FOR-LOGICAL-EXPRESSIONS))
(proclaim '(special TEA::PROCESS-CHARACTERS-FOR-TEX))
(proclaim '(special TEA::DONT-SUBSCRIPT-UNDERSCORES?))
(proclaim '(special TEA::TEX-PROCESS-SYMBOL))
(proclaim '(special TEA::MAKE-TEX-CORRESPONDENCE))
(proclaim '(special TEA::PROCESS-CHARACTERS-FOR-TEX-SOFT))
(proclaim '(special TEA::FIND-TEX-CORRESPONDENCE))
(proclaim '(special TEA::TEX-CORRESPONDENCE-TABLE))
(proclaim '(special TEA::IMPS-STRING-PRINT-PROC))
(proclaim '(special TEA::QP-STRING))
(proclaim '(special TEA::*FORM*))
(proclaim '(special TEA::SORT->STRING))
(proclaim '(special TEA::ITERATION-OPERATOR-SAME-BINDING-VARIABLES?))
(proclaim '(special TEA::BINDER-BODY))
(proclaim '(special TEA::BINDER-VARIABLES))
(proclaim '(special TEA::BINDING-LIST-VARIABLES))
(proclaim '(special TEA::LIST-CONSTRUCTOR))
(proclaim '(special TEA::PRESENT-SORT-SPECS))
(proclaim '(special TEA::PRESENT-SPECIFICATION-LIST))
(proclaim '(special TEA::PRESENT-BINDING-OPERATOR-1-LINE))
(proclaim '(special TEA::PRESENT-BINDING-OPERATOR))
(proclaim '(special TEA::PRESENT-COND))
(proclaim '(special TEA::PRESENT-IN-SORT))
(proclaim '(special TEA::PRESENT-DEFINED-IN-SORT))
(proclaim '(special TEA::PRESENT-PREFIX-WITH-SORT-ARG))
(proclaim '(special TEA::PRESENT-UNDEFINED-OF-SORT))
(proclaim '(special TEA::PRESENT-LIST))
(proclaim '(special TEA::PRESENT-LIST-WITH-SETS))
(proclaim '(special TEA::ARROW-FOR-FUNCTION-SPECS))
(proclaim '(special TEA::PRESENT-SORT-DEPENDENT-PREFIX-OPERATOR))
(proclaim '(special TEA::PRESENT-POSTFIX-OPERATOR))
(proclaim '(special TEA::PRESENT-SUBTRACTION-OPERATOR))
(proclaim '(special TEA::PRESENT-BINARY-INFIX-OPERATOR))
(proclaim '(special TEA::PRESENT-LOGICAL-INFIX-OPERATOR))
(proclaim '(special TEA::PRESENT-RELATIONAL-INFIX-OPERATOR))
(proclaim '(special TEA::PRESENT-NON-ASSOCIATIVE-INFIX-OPERATOR))
(proclaim '(special TEA::PRESENT-LOGLIKE-OPERATOR))
(proclaim '(special TEA::PRESENT-PREFIX-OPERATOR))
(proclaim '(special TEA::PREFIX-OPERATOR-DELIMITERS))
(proclaim '(special TEA::PRESENT-LOGICAL-NARY-INFIX-OPERATOR))
(proclaim '(special TEA::PRESENT-NARY-INFIX-OPERATOR))
(proclaim '(special TEA::PARENTHESIZE-CONDITIONALLY))
(proclaim '(special TEA::FULLY-PARENTHESIZE))
(proclaim '(special TEA::PRESENTATION-BINDING-POWER))
(proclaim '(special TEA::PRESENTATION-FORMAT))
(proclaim '(special TEA::MAKE-PRESENTATION-FORMAT))
(proclaim '(special TEA::SEXPRESSION-LABEL-BINDING-POWER))
(proclaim '(special TEA::SEXPRESSION-LABEL-PRESENTATION-METHOD))
(proclaim '(special TEA::SEXPRESSION-LABEL-PRESENTATION-FORMAT))
(proclaim '(special TEA::MAKE-SEXPRESSION-LABEL))
(proclaim '(special TEA::SEXPRESSION-LABEL?))
(proclaim '(special TEA::SORT-LIST->STRING))
(proclaim '(special TEA::OUTPUT-PORT->IMPS-OUTPUT-PORT-FOR-SORTS))
(proclaim '(special TEA::SEXP->OUTPUT-STRING))
(proclaim '(special TEA::DROP-APPLY-OPERATORS))
(proclaim '(special TEA::OUTPUT-PORT->IMPS-OUTPUT-PORT))
(proclaim '(special TEA::STRINGIFY))
(proclaim '(special TEA::E-LENGTH))
(proclaim '(special TEA::REALLY-PR))
(proclaim '(special TEA::BREAK-DIST))
(proclaim '(special TEA::*PP-BREAK*))
(proclaim '(special TEA::*PP-BLOCK*))
(proclaim '(special TEA::*PORT-LINE-LENGTH*))
(proclaim '(special TEA::COPY-FORMATTER))
(proclaim '(special TEA::MAKE-TREE-FORMATTER))
(proclaim '(special TEA::DEFAULT-PREFIX-PRESENTATION-METHOD))
(proclaim '(special TEA::COMPOSITE-PRESENTATION-METHOD))
(proclaim '(special TEA::PRESENT-TREE))
(proclaim '(special TEA::FORMATTER-OPERATOR-TABLE))
(proclaim '(special TEA::QR-SAFE-REFERENCE))
(proclaim '(special TEA::QR-SAFE))
(proclaim '(special TEA::STRING-OR-LIST->SORT))
(proclaim '(special TEA::STRING->SORT))
(proclaim '(special TEA::PRINT-EXPRESSION-FOR-EMACS))
(proclaim '(special TEA::BUILD-EXPRESSION-FOR-EMACS))
(proclaim '(special TEA::IMPS-STRING-READ-PROC))
(proclaim '(special TEA::LANGUAGE-PARSER))
(proclaim '(special TEA::*LANGUAGE-PARSER-TABLE*))
(proclaim '(special TEA::*PARSE*))
(proclaim '(special TEA::PORT->IMPS-TOKENIZER))
(proclaim '(special TEA::NO-SORT-ERROR))
(proclaim '(special TEA::DELIMITER-ERROR))
(proclaim '(special TEA::RIGHT-MATCH-ERROR))
(proclaim '(special TEA::ILLEGAL-TOKEN-ERROR))
(proclaim '(special TEA::ILLEGAL-LIST-ERROR))
(proclaim '(special TEA::AMBIGUOUS-TOKEN-ERROR))
(proclaim '(special TEA::MAKE-BINDING))
(proclaim '(special TEA::PARSE-BINDING-OPERATOR-BOTH-SYNTAXES))
(proclaim '(special TEA::MAKE-VAR-SPEC-LISTS-CONSISTENT))
(proclaim '(special TEA::PARSE-BINDING-OPERATOR-BOTH-SYNTAXES-AUX))
(proclaim '(special TEA::PARSE-BINDING-OPERATOR))
(proclaim '(special TEA::PREFIX-SORT-DEPENDENT-OPERATOR-METHOD))
(proclaim '(special TEA::PREFIX-SORT-OPERATOR-METHOD))
(proclaim '(special TEA::BUILD-CONDITIONAL))
(proclaim '(special TEA::PARSE-IMPS-COND))
(proclaim '(special TEA::LEFT-CALL-METHOD-TERMINATOR))
(proclaim '(special TEA::NULL-CALL-METHOD-TERMINATOR))
(proclaim '(special TEA::DEFINED-IN-SORT-PREFIX))
(proclaim '(special TEA::CONSTANT-METHOD))
(proclaim '(special TEA::LEFT-CALL-METHOD-LP))
(proclaim '(special TEA::NULL-CALL-METHOD-LP))
(proclaim '(special TEA::NULL-CALL-METHOD-LFB))
(proclaim '(special TEA::LEFT-CALL-METHOD-LFB))
(proclaim '(special TEA::NULL-CALL-METHOD-SB))
(proclaim '(special TEA::SUBTRACTION-OPERATOR-METHOD))
(proclaim '(special TEA::NEGATION-OPERATOR-METHOD))
(proclaim '(special TEA::RIGHT-ASSOCIATIVE-INFIX-OPERATOR-METHOD))
(proclaim '(special TEA::NARY-INFIX-OPERATOR-METHOD))
(proclaim '(special TEA::INFIX-OPERATOR-METHOD))
(proclaim '(special TEA::POSTFIX-OPERATOR-METHOD))
(proclaim '(special TEA::PREFIX-OPERATOR-METHOD))
(proclaim '(special TEA::PREFIX-OPERATOR-NEXT-TOKEN-CHECK))
(proclaim '(special TEA::LOGLIKE-OPERATOR-METHOD))
(proclaim '(special TEA::PARSE-MATCHING-BINDING))
(proclaim '(special TEA::PARSE-MATCHING-OPERATOR))
(proclaim '(special TEA::PARSE-DOWNWARD))
(proclaim '(special TEA::OPERATOR?))
(proclaim '(special TEA::ALTERNATE-BINDING-POWER))
(proclaim '(special TEA::DEFAULT-NULL-CALL-METHOD))
(proclaim '(special TEA::*PARSING-TERMINATORS*))
(proclaim '(special TEA::NTH-SEXPRESSION-LABEL))
(proclaim '(special TEA::RETRIEVE-TOKEN-PARAMETERS))
(proclaim '(special TEA::MAKE-OPERATOR))
(proclaim '(special TEA::TOKEN-BINDING-POWER))
(proclaim '(special TEA::TOKEN-LEFT-CALL-METHOD))
(proclaim '(special TEA::TOKEN-NULL-CALL-METHOD))
(proclaim '(special TEA::TOKEN-SEXPRESSION-LABEL))
(proclaim '(special TEA::MAKE-TOKEN))
(proclaim '(special TEA::TOKEN?))
(proclaim '(special TEA::COERCE-SYMBOL-TO-TOKEN))
(proclaim '(special TEA::LINE-LEFT))
(proclaim '(special TEA::LINE-RIGHT))
(proclaim '(special TEA::INPUT-PORT->STREAM-PARSER))
(proclaim '(special TEA::INPUT-PORT->TOKEN-READER))
(proclaim '(special TEA::REPORT-ERROR))
(proclaim '(special TEA::RETURN-TOKEN))
(proclaim '(special TEA::INPUT-NEXT-TOKEN))
(proclaim '(special TEA::COPY-PARSER))
(proclaim '(special TEA::INSERT-APPLY-OPERATORS-IN-SEXP))
(proclaim '(special TEA::APPARENT-SORT-ARGUMENT-FOR-CONSTRUCTOR?))
(proclaim '(special TEA::INPUT-STRING->EXPRESSION))
(proclaim '(special TEA::PARSE-TOP-LEVEL))
(proclaim '(special TEA::POSTPEND-SEMICOLON-TO-PORT))
(proclaim '(special TEA::MAKE-PARSER))
(proclaim '(special TEA::PARSER?))
(proclaim '(special TEA::PARSER-OPERATOR-TABLE))
(proclaim '(special TEA::PARSER-TOKENIZER))
(proclaim '(special TEA::POSSIBLE-SIGNIFICANT-CHAR-SEQUENCE))
(proclaim '(special TEA::MAKE-TOKENIZER-GENERATOR))
(proclaim '(special TEA::FLUSH-SEEN-CHARS))
(proclaim '(special TEA::SEEN-CHARS))
(proclaim '(special TEA::MAKE-SIGNIFICANT-CHAR-SEQUENCE))
(proclaim '(special TEA::SIGNIFICANT-CHAR-SEQUENCE?))
(proclaim '(special TEA::LOOK-FOR-EXTENSION))
(proclaim '(special TEA::READ-SIGNIFICANT-CHAR-SEQUENCE))
(proclaim '(special TEA::READ-BRACKETED-TOKEN))
(proclaim '(special TEA::PEEK-NON-WHITESPACE-CHAR))
(proclaim '(special TEA::READ-NUMERICAL-TOKEN))
(proclaim '(special TEA::READ-MODULAR-BASE))
(proclaim '(special TEA::READ-DECIMAL-PART))
(proclaim '(special TEA::READ-IDENTIFIER-TOKEN))
(proclaim '(special TEA::TEXT-CHAR?))
(proclaim '(special TEA::RIGHT-BRACKET?))
(proclaim '(special TEA::LEFT-BRACKET?))
(proclaim '(special TEA::AMPERSAND?))
(proclaim '(special TEA::PERCENT?))
(proclaim '(special TEA::DOLLAR?))
(proclaim '(special TEA::QUOTIENT?))
(proclaim '(special TEA::DECIMAL-DIGIT?))
(proclaim '(special TEA::VERTICAL?))
(proclaim '(special TEA::UNDERSCORE?))
(proclaim '(special TEA::MINUS?))
(proclaim '(special TEA::DOT?))
(proclaim '(special TEA::IMPLODE))
(proclaim '(special TEA::THEOREM-NAME->VAR-SORT-LIST))
(proclaim '(special TEA::WRITE-IN-COMMAND-FILE))
(proclaim '(special TEA::T-E-DELIVER-THEORY-INTERPRETATIONS))
(proclaim '(special TEA::T-E-EMACS-READ-THEORY-INTERPRETATIONS))
(proclaim '(special TEA::T-E-WRITE-THEORY-INTERPRETATIONS))
(proclaim '(special TEA::T-E-DELIVER-COMMANDS))
(proclaim '(special TEA::T-E-EMACS-READ-COMMANDS))
(proclaim '(special TEA::T-E-WRITE-COMMANDS))
(proclaim '(special TEA::T-E-DELIVER-MACETES))
(proclaim '(special TEA::T-E-EMACS-READ-MACETES))
(proclaim '(special TEA::T-E-WRITE-MACETES))
(proclaim '(special TEA::T-E-DELIVER-RECURSIVE-DEFINITIONS))
(proclaim '(special TEA::T-E-EMACS-READ-RECURSIVE-DEFINITIONS))
(proclaim '(special TEA::T-E-WRITE-RECURSIVE-DEFINITIONS))
(proclaim '(special TEA::T-E-DELIVER-DEFINITIONS))
(proclaim '(special TEA::T-E-EMACS-READ-DEFINITIONS))
(proclaim '(special TEA::T-E-WRITE-DEFINITIONS))
(proclaim '(special TEA::T-E-DELIVER-THEOREMS))
(proclaim '(special TEA::T-E-EMACS-READ-THEOREMS))
(proclaim '(special TEA::T-E-WRITE-THEOREMS))
(proclaim '(special TEA::DEDUCTION-GRAPH-RETURN-SQNS))
(proclaim '(special TEA::DEDUCTION-GRAPH-APPLY-COMMAND-RETURN-SQNS))
(proclaim '(special TEA::UNIVERSALLY-QUANTIFIED-AT-POSITIVE-LOCATIONS))
(proclaim '(special TEA::DETERMINE-APPLICABLE-INDUCTORS))
(proclaim '(special TEA::QUASI-CONSTRUCTORS-IN-SEQUENT))
(proclaim '(special TEA::DISABLED-QUASI-CONSTRUCTORS))
(proclaim '(special TEA::ENABLED-QUASI-CONSTRUCTORS-IN-SEQUENT))
(proclaim '(special TEA::DEFINED-CONSTANTS-IN-ASSERTION))
(proclaim '(special TEA::SQN-BACKCHAIN-BACKWARDS-INFERENCE-ASSUMPTIONS))
(proclaim '(special TEA::SQN-BACKCHAIN-INFERENCE-ASSUMPTIONS))
(proclaim '(special TEA::SQN-ANTECEDENT-INFERENCE-ASSUMPTIONS))
(proclaim '(special TEA::SQN-EXISTENTIAL-WITH-VARIABLE-SORTS))
(proclaim '(special TEA::SQN-UNIVERAL-ASSUMPTIONS-WITH-VARIABLE-SORTS))
(proclaim '(special TEA::DG-EMACS-INSTALL-THEOREM))
(proclaim '(special TEA::SQN-U-H))
(proclaim '(special TEA::SEQUENT-UNHASH-CURRENTLY))
(proclaim '(special TEA::EXECUTE-CALL-FROM-EMACS-AND-UPDATE))
(proclaim '(special TEA::DISABLE-QCS))
(proclaim '(special TEA::ENABLE-QCS))
(proclaim '(special TEA::IMPS-POST-READ-AND-POST))
(proclaim '(special TEA::SEQUENT-READ-SEQUENT-AND-POST))
(proclaim '(special TEA::SEQUENT-NODE-READ))
(proclaim '(special TEA::SEQUENT-READ))
(proclaim '(special TEA::USE-SEQUENT-NODE-NUMBERS?))
(proclaim '(special TEA::EMACS-DG))
(proclaim '(special TEA::SEQUENT-UNHASH-IN-GRAPH-BY-NUMBER))
(proclaim '(special TEA::SEQUENT-UNHASH-IN-GRAPH))
(proclaim '(special TEA::SEQUENT-UNHASH))
(proclaim '(special TEA::EMACS-DISPLAY-SQN))
(proclaim '(special TEA::EMACS-SEND-SQN-TO-EDIT))
(proclaim '(special TEA::READ-SEQUENT-AND-START-DEDUCTION))
(proclaim '(special TEA::READ-SEQUENT-AND-START-EMACS-DEDUCTION))
(proclaim '(special TEA::READ-SEQUENT-AND-POST))
(proclaim '(special TEA::READ-SEQUENT))
(proclaim '(special TEA::EMACS-ADD-ALL-NEW-SQNS))
(proclaim '(special TEA::EMACS-SUPPLEMENT-SQNS))
(proclaim '(special TEA::EMACS-ADD-SQNS))
(proclaim '(special TEA::DG-ADD-NEW-SQNS-GROUNDED))
(proclaim '(special TEA::DG-ADD-NEW-SQNS-SENT))
(proclaim '(special TEA::EMACS-VERBOSE-UPDATE-DG))
(proclaim '(special TEA::EMACS-UPDATE-DG))
(proclaim '(special TEA::ALLOW-DG-UPDATES?))
(proclaim '(special TEA::DG->BUFFER-NAME))
(proclaim '(special TEA::DG->DGRV-INDEX))
(proclaim '(special TEA::DG-SQNS-GROUNDED))
(proclaim '(special TEA::DG-SQNS-SENT))
(proclaim '(special TEA::SET-UP-DG-INTERFACE))
(proclaim '(special TEA::DGRV-INDEX->DG))
(proclaim '(special TEA::START-EMACS-DEDUCTION))
(proclaim '(special TEA::SAVE-WINDOWS?))
(proclaim '(special TEA::*SQN-BUFFER-ROOT-NAME*))
(proclaim '(special TEA::*DG-BUFFER-ROOT-NAME*))
(proclaim '(special TEA::*DG-INTERFACE-TABLE*))
(proclaim '(special TEA::DG-FILE-PREFIX))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-INFORMAL-JUSTIFICATION))
(proclaim '(special TEA::INFORMAL-JUSTIFICATION))
(proclaim '(special TEA::TURN-ON-AUTO-BLOCK))
(proclaim '(special TEA::TURN-OFF-AUTO-BLOCK))
(proclaim '(special TEA::DG-REMOVE-BLOCK-STRUCTURE))
(proclaim '(special TEA::DG-INSERT-BLOCK-STRUCTURE))
(proclaim '(special TEA::DG-FIND-RESPONSIBLE-ENTRY-FOR-NODE))
(proclaim '(special TEA::MAYBE-INSERT-BLOCK-MARKERS))
(proclaim '(special TEA::USER-ANNOTATION?))
(proclaim '(special TEA::DG-HISTORY-ENTRY-INSERT-BLOCK-STRUCTURE))
(proclaim '(special TEA::*BLOCK-INCREMENT*))
(proclaim '(special TEA::*BLOCK-SIZE*))
(proclaim '(special TEA::SINGLE-ARG-DEINTERPRETER))
(proclaim '(special TEA::ADD-COMMAND-ARGUMENT-DEINTERPRETER))
(proclaim '(special TEA::DEINTERPRET-ARGUMENTS-FOR-COMMAND))
(proclaim '(special TEA::COMMAND-DEINTERPRETER-ALIST))
(proclaim '(special TEA::COOK-UP-VAR-FOR-SORT))
(proclaim '(special TEA::DISPLAY-AT-DEPTH))
(proclaim '(special TEA::SHALLOWEST-DISTINGUISHING-PATTERN))
(proclaim '(special TEA::BUILD-READABLE-JUMP-FORM))
(proclaim '(special TEA::DEDUCTION-GRAPH-READABLE-HISTORY-LIST))
(proclaim '(special TEA::PARENTHESIZE-HISTORY-LIST))
(proclaim '(special TEA::RECTIFY-DEDUCTION-GRAPH-HISTORY-LIST))
(proclaim '(special TEA::AUTO-BLOCK-PRINT?))
(proclaim '(special TEA::BUILD-READABLE-FORM))
(proclaim '(special TEA::HISTORY-ENTRY-JUMP))
(proclaim '(special TEA::BUILD-READABLE-COMMENT-FORM))
(proclaim '(special TEA::INTERPRET-COMMAND-ARGUMENT))
(proclaim '(special TEA::ADD-COMMAND-ARGUMENT-KEYWORD))
(proclaim '(special TEA::COMMAND-ARGUMENT-KEYWORD-PROC-ALIST))
(proclaim '(special TEA::SCRIPT-COMMENT))
(proclaim '(special TEA::INTERPRET-FOR-NODES-LIST-SPEC))
(proclaim '(special TEA::RETRIEVE-SCRIPT-NODE-LIST-PROC))
(proclaim '(special TEA::ADD-NODE-LIST-KEYWORD))
(proclaim '(special TEA::NODE-LIST-KEYWORD-PROC-ALIST))
(proclaim '(special TEA::SQN-MATCHES?))
(proclaim '(special TEA::INTERPRET-DISJUNCTIVE-CONDITION))
(proclaim '(special TEA::INTERPRET-CONJUNCTIVE-CONDITION))
(proclaim '(special TEA::RETRIEVE-SCRIPT-CONDITION-PROC))
(proclaim '(special TEA::ADD-CONDITION-KEYWORD))
(proclaim '(special TEA::CONDITION-KEYWORD-PROC-ALIST))
(proclaim '(special TEA::INTERPRET-SCRIPT-CONDITION))
(proclaim '(special TEA::INTERPRET-FOR-NODES))
(proclaim '(special TEA::INTERPRET-WHILE))
(proclaim '(special TEA::INTERPRET-IF))
(proclaim '(special TEA::INTERPRET-JUMP-TO-NODE))
(proclaim '(special TEA::INTERPRET-LABEL-NODE))
(proclaim '(special TEA::INTERPRET-LET-VAL))
(proclaim '(special TEA::INTERPRET-LET-MACETE))
(proclaim '(special TEA::INTERPRET-LET-SCRIPT))
(proclaim '(special TEA::INTERPRET-SKIP))
(proclaim '(special TEA::INTERPRET-BLOCK))
(proclaim '(special TEA::INTERPRET-KEYWORD))
(proclaim '(special TEA::ADD-COMMAND-KEYWORD))
(proclaim '(special TEA::COMMAND-SEQUENCE-KEYWORD?))
(proclaim '(special TEA::SCRIPT-KEYWORD-PROC-ALIST))
(proclaim '(special TEA::SCRIPT-ADD-BINDING-TO-DISPLAY))
(proclaim '(special TEA::EXECUTE-COMMAND-SEQUENCE))
(proclaim '(special TEA::EXECUTE-COMMAND-SEQUENCE-FOR-SCRIPTS))
(proclaim '(special TEA::INTERPRET-COMMAND-SEQUENCE))
(proclaim '(special TEA::SCRIPT-COMMAND-APPLIER))
(proclaim '(special TEA::INTERACTIVE-COMMAND-APPLIER))
(proclaim '(special TEA::COERCE-TO-COMMAND))
(proclaim '(special TEA::QUICK-MATCH-LIST?))
(proclaim '(special TEA::SQN-COERCE-TO-ASSUMPTION))
(proclaim '(special TEA::DG-COERCE-TO-SEQUENT-NODE))
(proclaim '(special TEA::COERCE-TO-MACETE))
(proclaim '(special TEA::COERCE-TO-TRANSLATION))
(proclaim '(special TEA::COERCE-TO-THEOREM))
(proclaim '(special TEA::SQN-COERCE-TO-EXPRESSION))
(proclaim '(special TEA::BUILD-SCRIPT))
(proclaim '(special TEA::UNSUPPORTED-DESCENDENTS))
(proclaim '(special TEA::SEQUENT-NODE-FIRST-UNGROUNDED-CHILD))
(proclaim '(special TEA::SEQUENT-NODE-FIRST-UNSUPPORTED-DESCENDENT))
(proclaim '(special TEA::SEQUENT-NODE-FIRST-UNSUPPORTED-RELATIVE))
(proclaim '(special TEA::DEDUCTION-GRAPH-FIND-SIBLING))
(proclaim '(special TEA::DEDUCTION-GRAPH-FOLLOW-PATH))
(proclaim '(special TEA::RELATIVE-POSITION-IN-DG))
(proclaim '(special TEA::GENERATIONS-TO-DESCENDENT))
(proclaim '(special TEA::SQNS+INFNS->PATH))
(proclaim '(special TEA::FIND-PATH-TO-DESCENDENT))
(proclaim '(special TEA::FIND-COMMON-ANCESTOR))
(proclaim '(special TEA::ENUMERATE-ANCESTORS))
(proclaim '(special TEA::NTH-ANCESTOR))
(proclaim '(special TEA::ANNOTATE-DG-HISTORY))
(proclaim '(special TEA::DEDUCTION-GRAPH-ENABLE-QUASI-CONSTRUCTOR))
(proclaim '(special TEA::DEDUCTION-GRAPH-DISABLE-QUASI-CONSTRUCTOR))
(proclaim '(special TEA::IMPS-EDIT-AND-POST-SQN))
(proclaim '(special TEA::DEDUCTION-GRAPH-CUT-USING-SEQUENT))
(proclaim '(special TEA::DEDUCTION-GRAPH-GENERALIZE-USING-SEQUENT))
(proclaim '(special TEA::DEDUCTION-GRAPH-GENERALIZE-SEQUENT))
(proclaim '(special TEA::DEDUCTION-GRAPH-CUT-WITH-SINGLE-FORMULA))
(proclaim '(special TEA::DEDUCTION-GRAPH-WEAKEN))
(proclaim '(special TEA::DEDUCTION-GRAPH-CONTRAPOSE))
(proclaim '(special TEA::DEDUCTION-GRAPH-INCORPORATE-ANTECEDENT))
(proclaim '(special TEA::DEDUCTION-GRAPH-ANTECEDENT-INFERENCE))
(proclaim '(special TEA::DEDUCTION-GRAPH-BACKCHAIN-THROUGH-FORMULA))
(proclaim '(special TEA::DEDUCTION-GRAPH-BACKCHAIN-BACKWARDS))
(proclaim '(special TEA::DEDUCTION-GRAPH-BACKCHAIN))
(proclaim '(special TEA::DEDUCTION-GRAPH-BETA-REDUCE-WITH-MINOR-PREMISES))
(proclaim '(special TEA::DEDUCTION-GRAPH-BETA-REDUCE-REPEATEDLY))
(proclaim '(special TEA::DEDUCTION-GRAPH-BETA-REDUCE-INSISTENTLY))
(proclaim '(special TEA::DEDUCTION-GRAPH-BETA-REDUCE))
(proclaim '(special TEA::DEDUCTION-GRAPH-ELIMINATE-IOTA))
(proclaim '(special TEA::DEDUCTION-GRAPH-RAISE-CONDITIONAL-MESSILY-INFERENCE))
(proclaim '(special TEA::DEDUCTION-GRAPH-RAISE-CONDITIONAL-MESSILY))
(proclaim '(special TEA::DEDUCTION-GRAPH-RAISE-CONDITIONAL-INFERENCE))
(proclaim '(special TEA::DEDUCTION-GRAPH-RAISE-CONDITIONAL))
(proclaim '(special TEA::DEDUCTION-GRAPH-FORCE-SUBSTITUTION-MESSILY-AUX))
(proclaim '(special TEA::DEDUCTION-GRAPH-FORCE-SUBSTITUTION-MESSILY))
(proclaim '(special TEA::DEDUCTION-GRAPH-FORCE-SUBSTITUTION-AT-PATH))
(proclaim '(special TEA::DEDUCTION-GRAPH-FORCE-SUBSTITUTION-AT-VIRTUAL-PATHS))
(proclaim '(special TEA::DEDUCTION-GRAPH-FORCE-SUBSTITUTION))
(proclaim '(special TEA::DEDUCTION-GRAPH-APPLY-MACETE-LOCALLY-AND-MESSILY))
(proclaim '(special TEA::DEDUCTION-GRAPH-APPLY-MACETE-LOCALLY-WITH-MINOR-PREMISES))
(proclaim '(special TEA::DEDUCTION-GRAPH-APPLY-MACETE-LOCALLY))
(proclaim '(special TEA::DEDUCTION-GRAPH-APPLY-MACETE-WITH-MINOR-PREMISES))
(proclaim '(special TEA::DEDUCTION-GRAPH-APPLY-MACETE))
(proclaim '(special TEA::DEDUCTION-GRAPH-UNFOLD-DEFINED-CONSTANT-GLOBALLY))
(proclaim '(special TEA::DEDUCTION-GRAPH-UNFOLD-DEFINED-CONSTANT-MESSILY))
(proclaim '(special TEA::DEDUCTION-GRAPH-UNFOLD-DEFINED-CONSTANT-AT-PATH))
(proclaim '(special TEA::DEDUCTION-GRAPH-UNFOLD-DEFINED-CONSTANT-AT-VIRTUAL-PATHS))
(proclaim '(special TEA::DEDUCTION-GRAPH-UNFOLD-DEFINED-CONSTANT))
(proclaim '(special TEA::DEDUCTION-GRAPH-ASSUME-THEOREM))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-CHOICE))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-UNORDERED-CONJUNCTION-DIRECT-INFERENCE))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-THEOREM-ASSUMPTION))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-SORT-DEFINEDNESS))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-DEFINEDNESS))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-EXISTENTIAL-GENERALIZATION))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-UNIVERSAL-INSTANTIATION))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-DISJUNCTION-ELIMINATION))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-CUT))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-IMPLICATION-ELIMINATION))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-BACKCHAIN-THROUGH-FORMULA-INFERENCE))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-BACKCHAIN-BACKWARDS-INFERENCE))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-BACKCHAIN-INFERENCE))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-IOTA-ELIMINATION))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-RAISE-CONDITIONAL-INFERENCE))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-FORCE-SUBSTITUTION))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-MACETE-APPLICATION-WITH-MINOR-PREMISES-AT-PATHS))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-MACETE-APPLICATION-AT-PATHS))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-DEFINED-CONSTANT-UNFOLDING))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-WEAKENING))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-EXTENSIONALITY))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-SIMPLIFICATION-WITH-MINOR-PREMISES))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-INSISTENT-SIMPLIFICATION))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-SIMPLIFICATION))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-CONTRAPOSITION))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-ANTECEDENT-INFERENCE))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-INSISTENT-DIRECT-INFERENCE))
(proclaim '(special TEA::DG-PRIMITIVE-INFERENCE-DIRECT-INFERENCE))
(proclaim '(special TEA::BUILD-UNIVERSAL-COMMAND))
(proclaim '(special TEA::DG-COMMANDS))
(proclaim '(special TEA::DEDUCTION-GRAPH-APPLY-COMMAND))
(proclaim '(special TEA::AC-INTERFACE-COMPUTE-JUMP))
(proclaim '(special TEA::HEAD-NODES-GROUNDED-BY-LAST-ENTRY))
(proclaim '(special TEA::DEDUCTION-GRAPH-APPLY-COMMAND-INTERFACE))
(proclaim '(special TEA::BUILD-COMMAND))
(proclaim '(special TEA::NAME->COMMAND))
(proclaim '(special TEA::*COMMAND-TABLE*))
(proclaim '(special TEA::DG-COMMAND-ARGUMENT-CHECK))
(proclaim '(special TEA::DG-COMMAND-TRANSMISSION-PROTOCOL))
(proclaim '(special TEA::DG-COMMAND-RETRIEVAL-PROTOCOL))
(proclaim '(special TEA::DG-COMMAND-NAME))
(proclaim '(special TEA::DG-COMMAND?))
(proclaim '(special TEA::SORT-DEFINEDNESS-DISTRIBUTE-THROUGH-IF-TERM))
(proclaim '(special TEA::SORT-DEFINEDNESS-RULE-COMPUTE-PRED-CONDITION))
(proclaim '(special TEA::SORT-DEFINEDNESS-RULE-COMPUTE-FN-CONDITION))
(proclaim '(special TEA::SORT-DEFINEDNESS-RULE-COMPUTE-HYPOTHESIS))
(proclaim '(special TEA::SORT-DEFINEDNESS-RULE-COLLECT-HYPOTHESES))
(proclaim '(special TEA::SORT-DEFINEDNESS-RULE-AUX))
(proclaim '(special TEA::SORT-DEFINEDNESS-RULE))
(proclaim '(special TEA::SORT-DEFINEDNESS-RULE-OLD))
(proclaim '(special TEA::DEFINEDNESS-RULE-PREMISES-FOR-APPLICATION))
(proclaim '(special TEA::DEFINEDNESS-RULE-PREMISES))
(proclaim '(special TEA::DEFINEDNESS-RULE))
(proclaim '(special TEA::THEORY-CONTEXT-NEUTRAL-VALUE-INFO))
(proclaim '(special TEA::THEORY-CONTEXT-ENTAILS-NEUTRAL-INTERNAL?))
(proclaim '(special TEA::THEORY-CONTEXT-ENTAILS-INTERNAL?))
(proclaim '(special TEA::*NON-LOOPING-MAX*))
(proclaim '(special TEA::THEORY-CONTEXT-ENTAILS-DEFINED-IN-SORT-1?))
(proclaim '(special TEA::THEORY-CONTEXT-ENTAILS-DEFINED-IN-SORT?))
(proclaim '(special TEA::THEORY-CONTEXT-ENTAILS-UNDEFINED?))
(proclaim '(special TEA::THEORY-CONTEXT-IMMEDIATELY-ENTAILS-DEFINED-IN-SORT?))
(proclaim '(special TEA::THEORY-CONTEXT-ENTAILS-DEFINED?))
(proclaim '(special TEA::THEORY-CONTEXT-SIMPLIFY-CONVERGENCE))
(proclaim '(special TEA::THEORY-CONTEXT-SIMPLIFY-CONVERGENCE-IN-SORT))
(proclaim '(special TEA::THEORY-CONTEXT-TEST-TOP-LEVEL-TERM-COERCIONS?))
(proclaim '(special TEA::TC-TEST-COERCION))
(proclaim '(special TEA::CONDITIONAL-CRITICAL-SUBTERMS-AND-SORTS))
(proclaim '(special TEA::APPLICATION-CRITICAL-SUBTERMS-AND-SORTS))
(proclaim '(special TEA::CRUDE-CRITICAL-SUBTERMS-AND-SORTS))
(proclaim '(special TEA::THEORY-CRITICAL-SUBTERMS-AND-SORTS))
(proclaim '(special TEA::CLEAN-TERM-SORT-LIST))
(proclaim '(special TEA::THEORY-NO-CRITICAL-SUBTERMS?))
(proclaim '(special TEA::THEORY-EXCLUDE-TERM-COERCION?))
(proclaim '(special TEA::THEORY-ENTAILS-UNDEFINED?))
(proclaim '(special TEA::THEORY-ENTAILS-DEFINED?))
(proclaim '(special TEA::THEORY-IMMEDIATELY-ENTAILS-DEFINED?))
(proclaim '(special TEA::CUT-RULE))
(proclaim '(special TEA::CUT-RULE-GENERATOR))
(proclaim '(special TEA::DISJUNCTION-ELIMINATION))
(proclaim '(special TEA::DISJUNCTION-ELIMINATION-GENERATOR))
(proclaim '(special TEA::EXISTENTIAL-ELIMINATION))
(proclaim '(special TEA::EXISTENTIAL-ELIMINATION-GENERATOR))
(proclaim '(special TEA::EXISTENTIAL-ELIMINATION-SIDEFORMULA-CONDITION))
(proclaim '(special TEA::EXISTENTIAL-GENERALIZATION))
(proclaim '(special TEA::EXISTENTIAL-GENERALIZATION-GENERATOR))
(proclaim '(special TEA::UNIVERSAL-INSTANTIATION-BUILD-CONCLUSION))
(proclaim '(special TEA::UNIVERSAL-INSTANTIATION-BUILD-MAJOR-PREMISE))
(proclaim '(special TEA::UNIVERSAL-INSTANTIATION))
(proclaim '(special TEA::UNIVERSAL-INSTANTIATION-GENERATOR))
(proclaim '(special TEA::SPECIAL-INFERENCE->RULE))
(proclaim '(special TEA::APPLY-SPECIAL-INFERENCE))
(proclaim '(special TEA::BUILD-SPECIAL-INFERENCE))
(proclaim '(special TEA::SPECIAL-INFERENCE-COMMENT))
(proclaim '(special TEA::SPECIAL-INFERENCE-SIDEFORMULA-CONDITION))
(proclaim '(special TEA::SPECIAL-INFERENCE-GENERATOR))
(proclaim '(special TEA::SPECIAL-INFERENCE-NAME))
(proclaim '(special TEA::MAKE-SPECIAL-INFERENCE))
(proclaim '(special TEA::SPECIAL-INFERENCE?))
(proclaim '(special TEA::AP-OP-RAISE-MAKE-ARGS))
(proclaim '(special TEA::IND-APPLY-OPERATOR-RAISE-CONDITIONAL))
(proclaim '(special TEA::PROP-APPLY-OPERATOR-RAISE-CONDITIONAL))
(proclaim '(special TEA::APPLY-OPERATOR-SIMPLIFIER-WITH-CONDITIONALS))
(proclaim '(special TEA::IS-DEFINED-IN-SORT-RAISE-CONDITIONAL))
(proclaim '(special TEA::IS-DEFINED-IN-SORT-SIMPLIFIER-WITH-CONDITIONALS))
(proclaim '(special TEA::IS-DEFINED-RAISE-CONDITIONAL))
(proclaim '(special TEA::IS-DEFINED-SIMPLIFIER-WITH-CONDITIONALS))
(proclaim '(special TEA::QUASI-EQUALITY-RAISE-CONDITIONAL))
(proclaim '(special TEA::QUASI-EQUALITY-SIMPLIFIER-WITH-CONDITIONALS))
(proclaim '(special TEA::EQUALITY-RAISE-CONDITIONAL))
(proclaim '(special TEA::EQUALITY-SIMPLIFIER-WITH-CONDITIONALS))
(proclaim '(special TEA::CONDITIONAL-WITH-SORT-DEFINED-LIMB))
(proclaim '(special TEA::CONDITIONAL-WITH-DEFINED-LIMB))
(proclaim '(special TEA::CONDITIONAL-WITH-UNDEFINED-LIMB))
(proclaim '(special TEA::USE-OLD-CONSTRUCTOR-SIMPLIFIERS))
(proclaim '(special TEA::USE-NEW-CONSTRUCTOR-SIMPLIFIERS))
(proclaim '(special TEA::UPDATE-CONSTRUCTOR-SIMPLIFIER))
(proclaim '(special TEA::CONSTRUCTOR-NEW-SIMPLIFIER))
(proclaim '(special TEA::CONSTRUCTOR-OLD-SIMPLIFIER))
(proclaim '(special TEA::CONSTRUCTOR-SIMPLIFIER-PAIR-ALIST))
(proclaim '(special TEA::CONTEXT-SIMPLIFY-TOTAL))
(proclaim '(special TEA::CONTEXT-SIMPLIFY-FALSELIKE-OF-SORT))
(proclaim '(special TEA::BICONDITIONAL-SYLLOGISTIC-INFERENCE))
(proclaim '(special TEA::IMPLICATION-SYLLOGISTIC-INFERENCE))
(proclaim '(special TEA::DISJUNCTION-SYLLOGISTIC-INFERENCE))
(proclaim '(special TEA::SUBST-IF-DELETABLE))
(proclaim '(special TEA::SYLLOGISTIC-INFERENCE-MATCHER))
(proclaim '(special TEA::QUANTIFIER-PARITY))
(proclaim '(special TEA::NEGATION-PARITY))
(proclaim '(special TEA::IMPLIES-PARITY))
(proclaim '(special TEA::BICONDITIONAL-PARITY))
(proclaim '(special TEA::AND-OR-PARITY))
(proclaim '(special TEA::IS-DEFINED-IN-SORT-TRUTH-VALUE-SEEKER))
(proclaim '(special TEA::IS-DEFINED-TRUTH-VALUE-SEEKER))
(proclaim '(special TEA::QUASI-EQUALITY-TRUTH-VALUE-SEEKER))
(proclaim '(special TEA::EQUALITY-TRUTH-VALUE-SEEKER))
(proclaim '(special TEA::WITH-SIMPLIFIER))
(proclaim '(special TEA::IF-FORM-SIMPLIFIER))
(proclaim '(special TEA::IF-SIMPLIFIER))
(proclaim '(special TEA::IF-TERM-SIMPLIFIER))
(proclaim '(special TEA::FORALL-SIMPLIFIER))
(proclaim '(special TEA::FORSOME-SIMPLIFIER))
(proclaim '(special TEA::QDS-VARS-FOR-COMPONENT))
(proclaim '(special TEA::FORSOME-DISTRIBUTION-SIMPLIFIER))
(proclaim '(special TEA::FORALL-DISTRIBUTION-SIMPLIFIER))
(proclaim '(special TEA::QUANTIFIER-TRIVIAL-VARIABLE-SIMPLIFIER))
(proclaim '(special TEA::QUASI-EQUALITY-SIMPLIFIER))
(proclaim '(special TEA::EQUALITY-SIMPLIFIER))
(proclaim '(special TEA::IS-DEFINED-IN-SORT-SIMPLIFIER))
(proclaim '(special TEA::IS-DEFINED-SIMPLIFIER))
(proclaim '(special TEA::BICONDITIONAL-SIMPLIFIER))
(proclaim '(special TEA::IMPLICATION-SIMPLIFIER))
(proclaim '(special TEA::DISJUNCTION-SIMPLIFIER))
(proclaim '(special TEA::CONJUNCTION-SIMPLIFIER))
(proclaim '(special TEA::MAKE-ALPHA-SET))
(proclaim '(special TEA::NEGATION-SIMPLIFIER))
(proclaim '(special TEA::APPLY-OPERATOR-SIMPLIFIER))
(proclaim '(special TEA::FORSOME-ANTECEDENT-INFERENCE))
(proclaim '(special TEA::CLEAN-EXISTENTIAL-BODY))
(proclaim '(special TEA::QUASI-EQUALITY-ANTECEDENT-INFERENCE))
(proclaim '(special TEA::BICONDITIONAL-ANTECEDENT-INFERENCE))
(proclaim '(special TEA::IMPLICATION-ANTECEDENT-INFERENCE))
(proclaim '(special TEA::CONDITIONAL-FORMULA-ANTECEDENT-INFERENCE))
(proclaim '(special TEA::CONJUNCTION-ANTECEDENT-INFERENCE))
(proclaim '(special TEA::DISJUNCTION-ANTECEDENT-INFERENCE))
(proclaim '(special TEA::ANTECEDENT-INFERENCE->RULE))
(proclaim '(special TEA::ANTECEDENT-INFERENCE?))
(proclaim '(special TEA::QUASI-EQUALITY-DIRECT-INFERENCE))
(proclaim '(special TEA::EQUALITY-DIRECT-INFERENCE))
(proclaim '(special TEA::IS-DEFINED-IN-SORT-DIRECT-INFERENCE))
(proclaim '(special TEA::FOR-ALL-DIRECT-INFERENCE))
(proclaim '(special TEA::FORALL-DIRECT-INFERENCE))
(proclaim '(special TEA::NEGATION-DIRECT-INFERENCE))
(proclaim '(special TEA::BICONDITIONAL-DIRECT-INFERENCE))
(proclaim '(special TEA::CONDITIONAL-FORMULA-DIRECT-INFERENCE))
(proclaim '(special TEA::IMPLICATION-DIRECT-INFERENCE))
(proclaim '(special TEA::DISJUNCTION-DIRECT-INFERENCE))
(proclaim '(special TEA::UNORDERED-CONJUNCTION-DIRECT-INFERENCE))
(proclaim '(special TEA::DIRECT-INFERENCE->RULE))
(proclaim '(special TEA::DIRECT-INFERENCE?))
(proclaim '(special TEA::IF-INCREMENTER))
(proclaim '(special TEA::NEGATION-LC-INCREMENTER))
(proclaim '(special TEA::BICONDITIONAL-LC-INCREMENTER))
(proclaim '(special TEA::IMPLICATION-LC-INCREMENTER))
(proclaim '(special TEA::DISJUNCTION-LC-INCREMENTER))
(proclaim '(special TEA::CONJUNCTION-LC-INCREMENTER))
(proclaim '(special TEA::DEDUCTION-GRAPH-GOAL-FORMULA?))
(proclaim '(special TEA::DEDUCTION-GRAPH-APPLY-RULE))
(proclaim '(special TEA::DEDUCTION-GRAPH-INFER))
(proclaim '(special TEA::DEDUCTION-GRAPH-GROUNDED?))
(proclaim '(special TEA::DEDUCTION-GRAPH-GROUNDED-SQNS))
(proclaim '(special TEA::DEDUCTION-GRAPH-UNSUPPORTED-UNHIDDEN-NODES))
(proclaim '(special TEA::DEDUCTION-GRAPH-UNHIDDEN-NODES))
(proclaim '(special TEA::DEDUCTION-GRAPH-UNSUPPORTED-NODES))
(proclaim '(special TEA::UNSUPPORTED?))
(proclaim '(special TEA::OLD-UPDATE-GROUNDING))
(proclaim '(special TEA::UPDATE-GROUNDING))
(proclaim '(special TEA::DISCARD-GROUNDING))
(proclaim '(special TEA::PRINT-DG))
(proclaim '(special TEA::PRINT-DG-MAIN))
(proclaim '(special TEA::PRINT-DG-PRINT-INFN))
(proclaim '(special TEA::PRINT-DG-PRINT-SQN))
(proclaim '(special TEA::XDG?))
(proclaim '(special TEA::*LIST-DETAILS-FOR-GROUNDED-NODES*))
(proclaim '(special TEA::POST-INFERENCE))
(proclaim '(special TEA::IMMEDIATELY-GROUNDED-NODES))
(proclaim '(special TEA::IMMEDIATELY-GROUNDED?))
(proclaim '(special TEA::DEDUCTION-GRAPH-ADD-INFERENCE-NODE))
(proclaim '(special TEA::DEDUCTION-GRAPH-SEEK-INFERENCE))
(proclaim '(special TEA::INFERENCE->INFERENCE-NODE))
(proclaim '(special TEA::DEDUCTION-GRAPH-ADD-SEQUENT-NODES-FOR-INFERENCE))
(proclaim '(special TEA::START-DEDUCTION))
(proclaim '(special TEA::POST))
(proclaim '(special TEA::DEDUCTION-GRAPH-ADD-SEQUENT-NODE))
(proclaim '(special TEA::DEDUCTION-GRAPH-LOCATE-SEQUENT))
(proclaim '(special TEA::DEDUCTION-GRAPH-SAVE-HISTORY))
(proclaim '(special TEA::DG-HISTORY-ENTRY-SEQUENT-NODES-GROUNDED-BY-COMMAND))
(proclaim '(special TEA::DG-HISTORY-ENTRY-SUPERFLUOUS?))
(proclaim '(special TEA::DG-HISTORY-ENTRY-POSTINGS-AFTER-LAST-ENTRY))
(proclaim '(special TEA::DG-HISTORY-ENTRY-NEW-NODES))
(proclaim '(special TEA::DG-HISTORY-ENTRY-ADDED-NODES))
(proclaim '(special TEA::DG-HISTORY-ENTRY-PREVIOUS-NODES-GROUNDED))
(proclaim '(special TEA::DG-HISTORY-ENTRY-NODES-GROUNDED-BY-COMMAND))
(proclaim '(special TEA::DG-HISTORY-ENTRY-PREVIOUS-LAST-INDEX-AFTER))
(proclaim '(special TEA::USE-VERBOSE-SEQUENT-NODES?))
(proclaim '(special TEA::BUILD-AND-POST-DG-HISTORY-ENTRY))
(proclaim '(special TEA::DG-HISTORY-ENTRY-COMMENTS))
(proclaim '(special TEA::DG-HISTORY-ENTRY-ANNOTATION-AFTER))
(proclaim '(special TEA::DG-HISTORY-ENTRY-ANNOTATION-BEFORE))
(proclaim '(special TEA::DG-HISTORY-ENTRY-FIRST-UNSUPPORTED-RELATIVE))
(proclaim '(special TEA::DG-HISTORY-ENTRY-JUMP-FROM-PREVIOUS-EXPECTATION))
(proclaim '(special TEA::DG-HISTORY-ENTRY-LAST-INDEX-AFTER))
(proclaim '(special TEA::DG-HISTORY-ENTRY-LAST-INDEX-BEFORE))
(proclaim '(special TEA::DG-HISTORY-ENTRY-NODES-GROUNDED))
(proclaim '(special TEA::DG-HISTORY-ENTRY-PREVIOUS-ENTRY))
(proclaim '(special TEA::DG-HISTORY-ENTRY-ARGUMENTS))
(proclaim '(special TEA::DG-HISTORY-ENTRY-SEQUENT-NODE))
(proclaim '(special TEA::DG-HISTORY-ENTRY-COMMAND))
(proclaim '(special TEA::DG-HISTORY-ENTRY-GRAPH))
(proclaim '(special TEA::MAKE-DG-HISTORY-ENTRY))
(proclaim '(special TEA::DG-HISTORY-ENTRY?))
(proclaim '(special TEA::REPLACE-FOCUS))
(proclaim '(special TEA::PUSH-FOCUS))
(proclaim '(special TEA::POP-FOCUS))
(proclaim '(special TEA::DG-GET-REGISTERED-NODE))
(proclaim '(special TEA::DG-REGISTER-NODE))
(proclaim '(special TEA::DISCARD-OLD-DGS))
(proclaim '(special TEA::RESET-CURRENT-DG))
(proclaim '(special TEA::SET-CURRENT-DG))
(proclaim '(special TEA::CURRENT-DG))
(proclaim '(special TEA::*DGS*))
(proclaim '(special TEA::DG-ADD-INFERENCE-NODE-INTERNAL))
(proclaim '(special TEA::DG-ADD-SEQUENT-NODE-INTERNAL))
(proclaim '(special TEA::DEDUCTION-GRAPH-NODES))
(proclaim '(special TEA::DEDUCTION-GRAPH-UNENDED-BLOCK-COUNT))
(proclaim '(special TEA::DEDUCTION-GRAPH-LAST-INDEX))
(proclaim '(special TEA::DEDUCTION-GRAPH-HISTORY))
(proclaim '(special TEA::DEDUCTION-GRAPH-FOCI))
(proclaim '(special TEA::DEDUCTION-GRAPH-THEORY))
(proclaim '(special TEA::DEDUCTION-GRAPH-IMMEDIATELY-GROUNDED))
(proclaim '(special TEA::DEDUCTION-GRAPH-INFERENCE-NODES))
(proclaim '(special TEA::DEDUCTION-GRAPH-SEQUENT-NODES))
(proclaim '(special TEA::DEDUCTION-GRAPH-GOAL))
(proclaim '(special TEA::MAKE-DEDUCTION-GRAPH))
(proclaim '(special TEA::DEDUCTION-GRAPH?))
(proclaim '(special TEA::SEQUENT-NODE-FIRST-NEW-DESCENDENT))
(proclaim '(special TEA::SEQUENT-NODE-FIRST-UNGROUNDED-SIBLING))
(proclaim '(special TEA::SEQUENT-NODE-NEXT-SIBLING))
(proclaim '(special TEA::SEQUENT-NODE-FIRST-SIBLING))
(proclaim '(special TEA::SEQUENT-NODE-FIRST-SATISFACTORY-SIBLING))
(proclaim '(special TEA::SEQUENT-NODE-SIBLINGS))
(proclaim '(special TEA::SEQUENT-NODE-FIRST-CHILD))
(proclaim '(special TEA::SEQUENT-NODE-FIRST-SATISFACTORY-CHILD))
(proclaim '(special TEA::SEQUENT-NODE-PARENT))
(proclaim '(special TEA::NODE-GRAPH))
(proclaim '(special TEA::INFERENCE-NODE-2ND-HYPOTHESIS))
(proclaim '(special TEA::INFERENCE-NODE-1ST-HYPOTHESIS))
(proclaim '(special TEA::SUCCEED-WITHOUT-GROUNDING?))
(proclaim '(special TEA::INFERENCE-NODE-MAJOR-PREMISES))
(proclaim '(special TEA::BUILD-INFERENCE-NODE))
(proclaim '(special TEA::INFERENCE-NODE->SYMBOL))
(proclaim '(special TEA::INFERENCE-NODE-CONCLUSION))
(proclaim '(special TEA::INFERENCE-NODE-HYPOTHESES))
(proclaim '(special TEA::INFERENCE-NODE-INFERENCE))
(proclaim '(special TEA::INFERENCE-NODE-LEVEL))
(proclaim '(special TEA::INFERENCE-NODE-GROUNDED?))
(proclaim '(special TEA::INFERENCE-NODE-GRAPH))
(proclaim '(special TEA::MAKE-INFERENCE-NODE))
(proclaim '(special TEA::INFERENCE-NODE?))
(proclaim '(special TEA::INFERENCE-EQUAL?))
(proclaim '(special TEA::BUILD-INFERENCE))
(proclaim '(special TEA::INFERENCE-CONTEXT-SIMPLIFICATION-PERSISTENCE))
(proclaim '(special TEA::INFERENCE-CONCLUSION))
(proclaim '(special TEA::INFERENCE-HYPOTHESES))
(proclaim '(special TEA::INFERENCE-NAME))
(proclaim '(special TEA::INFERENCE-RULE))
(proclaim '(special TEA::MAKE-INFERENCE))
(proclaim '(special TEA::INFERENCE?))
(proclaim '(special TEA::SEQUENT-NODE-UNHIDE))
(proclaim '(special TEA::SEQUENT-NODE-HIDE-SUPPORT))
(proclaim '(special TEA::SEQUENT-NODE-HIDE))
(proclaim '(special TEA::SEQUENT-NODE->SEXP))
(proclaim '(special TEA::SEQUENT-NODE->STRING))
(proclaim '(special TEA::SEQUENT-NODE-ASSERTION))
(proclaim '(special TEA::SEQUENT-NODE-CONTEXT))
(proclaim '(special TEA::SEQUENT-NODE-ASSUMPTIONS))
(proclaim '(special TEA::SEQUENT-NODE-ADD-ARROW))
(proclaim '(special TEA::SEQUENT->SEQUENT-NODE))
(proclaim '(special TEA::SEQUENT-NODE-NUMBER))
(proclaim '(special TEA::SEQUENT-NODE-HIDDEN?))
(proclaim '(special TEA::SEQUENT-NODE-SEQUENT))
(proclaim '(special TEA::SEQUENT-NODE-LEVEL))
(proclaim '(special TEA::SEQUENT-NODE-GROUNDED?))
(proclaim '(special TEA::SEQUENT-NODE-IN-ARROWS))
(proclaim '(special TEA::SEQUENT-NODE-OUT-ARROWS))
(proclaim '(special TEA::SEQUENT-NODE-GRAPH))
(proclaim '(special TEA::MAKE-SEQUENT-NODE))
(proclaim '(special TEA::SEQUENT-NODE?))
(proclaim '(special TEA::CHOICE-PRINCIPLE))
(proclaim '(special TEA::CHOICE-PRINCIPLE-RECOGNIZER))
(proclaim '(special TEA::INVERSE-IOTA-RULE-GENERATOR))
(proclaim '(special TEA::IOTA-RULE-GENERATOR))
(proclaim '(special TEA::INVERSE-IOTA-ELIMINATION-PATH-CHECK))
(proclaim '(special TEA::INVERSE-IOTA-RULE-PATH-CHECK))
(proclaim '(special TEA::INVERSE-IOTA-RULE-MAKE-ASSERTION))
(proclaim '(special TEA::INVERSE-IOTA-RULE))
(proclaim '(special TEA::IOTA-ELIMINATION-PATH-CHECK))
(proclaim '(special TEA::IOTA-RULE-PATH-CHECK))
(proclaim '(special TEA::IOTA-RULE-MAKE-ASSERTION))
(proclaim '(special TEA::IOTA-RULE))
(proclaim '(special TEA::INVERSE-EXTENSIONALITY-AUX))
(proclaim '(special TEA::INVERSE-EXTENSIONALITY))
(proclaim '(special TEA::EXTENSIONALITY-COOK-MINORS))
(proclaim '(special TEA::EXTENSIONALITY-AUX))
(proclaim '(special TEA::EXTENSIONALITY))
(proclaim '(special TEA::IMPLICATION-ELIMINATION))
(proclaim '(special TEA::IMPLICATION-ELIMINATION-RULE))
(proclaim '(special TEA::FORCE-SUBSTITUTION))
(proclaim '(special TEA::VIRTUAL-PATH-TO-POSITIVE-LOCATION?))
(proclaim '(special TEA::PATH-TO-POSITIVE-LOCATION?))
(proclaim '(special TEA::PARITY-AT-PATH))
(proclaim '(special TEA::REMOVE-BAD-QUADRUPLES-AUX))
(proclaim '(special TEA::REMOVE-BAD-QUADRUPLES))
(proclaim '(special TEA::FRONTPATH-LASTFORMULA-BACKPATH-CONDITIONAL))
(proclaim '(special TEA::RAISE-CONDITIONALS-MAKE-ASSERTION))
(proclaim '(special TEA::RAISE-CONDITIONALS))
(proclaim '(special TEA::BACKCHAIN-RULE))
(proclaim '(special TEA::CONTRAPOSITION-RULE))
(proclaim '(special TEA::UNFOLD-DEFINED-CONSTANT-RULE))
(proclaim '(special TEA::THEOREM-DISCHARGE-RULE-AUX))
(proclaim '(special TEA::THEOREM-DISCHARGE-RULE))
(proclaim '(special TEA::SEQUENT-WEAKENS-SEQUENT?))
(proclaim '(special TEA::WEAKENING-RULE))
(proclaim '(special TEA::NODE-SIMPLIFICATION-WITH-MINOR-PREMISES))
(proclaim '(special TEA::NODE-SIMPLIFICATION))
(proclaim '(special TEA::->RULE))
(proclaim '(special TEA::RULE-SOUNDNESS-PREDICATE))
(proclaim '(special TEA::RULE-MAJOR-PREMISES-PROC))
(proclaim '(special TEA::RULE-GENERATOR))
(proclaim '(special TEA::RULE?))
(proclaim '(special TEA::IMMEDIATE-BACKCHAINING-OPPORTUNITY))
(proclaim '(special TEA::TRIVIAL-BACKCHAINING-OPPORTUNITY))
(proclaim '(special TEA::GOOD-BACKCHAINING-POSSIBILITY))
(proclaim '(special TEA::BACKCHAIN-RECORD-MINORS))
(proclaim '(special TEA::BACKCHAIN-RECORD-NEW-ASSERTION))
(proclaim '(special TEA::BACKCHAIN-RECORD-ASSUMPTION))
(proclaim '(special TEA::BUILD-BACKCHAIN-RECORD))
(proclaim '(special TEA::BACKCHAINING-POSSIBILITIES))
(proclaim '(special TEA::BACKCHAIN-COOK-MINORS))
(proclaim '(special TEA::BACKCHAIN-THROUGH-SEQUENT))
(proclaim '(special TEA::BACKCHAIN-AGAINST-FORMULA))
(proclaim '(special TEA::BACKCHAIN-RECURSIVE-CALL))
(proclaim '(special TEA::BACKCHAIN-THROUGH-UNIVERSAL))
(proclaim '(special TEA::BACKCHAIN-THROUGH-CONJUNCTION))
(proclaim '(special TEA::BACKCHAIN-THROUGH-CONJUNCTION-NEXT-ITERATION))
(proclaim '(special TEA::BACKCHAIN-THROUGH-DISJUNCTION))
(proclaim '(special TEA::BACKCHAIN-THROUGH-BICONDITIONAL))
(proclaim '(special TEA::BACKCHAIN-THROUGH-IMPLICATION))
(proclaim '(special TEA::BACKCHAIN-MATCH-AND-MAYBE-RETURN))
(proclaim '(special TEA::BACKCHAIN-SELECT-PATH-AND-SUBST))
(proclaim '(special TEA::BACKCHAIN-SUBSTITUTE-AT-PATH))
(proclaim '(special TEA::BACKCHAIN-MAKE-MINORS))
(proclaim '(special TEA::BACKCHAIN-FAIL))
(proclaim '(special TEA::EQUIVALENCE-RHS))
(proclaim '(special TEA::EQUIVALENCE-LHS))
(proclaim '(special TEA::BACKCHAIN-EQUIVALENCE?))
(proclaim '(special TEA::SUBSTITUTION-DEFINEDNESS-CONDITIONS-FROM-CONTEXT))
(proclaim '(special TEA::BACKCHAIN-FORWARDS-THROUGH-EXPRESSION?))
(proclaim '(special TEA::BACKCHAIN-THROUGH-EXPRESSION?))
(proclaim '(special TEA::BACKCHAIN-THROUGH-IMPLICATION-ANTECEDENT?))
(proclaim '(special TEA::BACKCHAIN-DISCHARGE-CONVERGENCE-REQUIREMENTS?))
(proclaim '(special TEA::CONTEXT-GENERATE-INSTANCE))
(proclaim '(special TEA::ENRICH-BY-MATCHING-GET-SUBSTITUTIONS))
(proclaim '(special TEA::ENRICH-BY-MATCHING-INSTANCES))
(proclaim '(special TEA::SIMPLIFY-WITH-MINOR-PREMISES))
(proclaim '(special TEA::RUN-PROC-WITH-MINOR-PREMISES))
(proclaim '(special TEA::SEQUENT-ADD-ASSUMPTION-AND-ENRICH))
(proclaim '(special TEA::FORMULA-ENTAILS-SEQUENT?))
(proclaim '(special TEA::SEQUENT-ENTAILS-SEQUENT?))
(proclaim '(special TEA::SEQUENT-ENTAILED-1?))
(proclaim '(special TEA::SEQUENT-ENTAILED?))
(proclaim '(special TEA::*SEQUENT-ENTAILMENT-CYCLING-TRACER*))
(proclaim '(special TEA::SYLLOGISTIC-INFERENCE-SIMPLIFY-NON-FORMULA))
(proclaim '(special TEA::SYLLOGISTIC-INFERENCE-SIMPLIFY))
(proclaim '(special TEA::CONTEXT-SYLLOGISTICALLY-ENTAILS?))
(proclaim '(special TEA::ENRICHED-CONTEXT-SIMPLIFY))
(proclaim '(special TEA::ENRICHED-CONTEXT-ENTAILS?))
(proclaim '(special TEA::CONTEXT-ENTAILS-CONTEXT?))
(proclaim '(special TEA::CONTEXT-ADD-ASSUMPTION-AND-ENRICH))
(proclaim '(special TEA::CONTEXT-ADD-ASSUMPTIONS-AND-ENRICH))
(proclaim '(special TEA::SYLLOGISTIC-ENRICHMENT))
(proclaim '(special TEA::ENRICH-CONTEXT))
(proclaim '(special TEA::SYLLOGISTIC-FORWARDCHAIN-THROUGH-CONTEXT))
(proclaim '(special TEA::SYLLOGISTIC-FORWARDCHAIN-SIMPLIFY-DISJUNCTS))
(proclaim '(special TEA::SYLLOGISTIC-FORWARDCHAIN))
(proclaim '(special TEA::SYLLOGISTIC-FORWARDCHAIN-PERSISTENCE))
(proclaim '(special TEA::SYLLOGISTIC-INFERENCE-GET-REDUCED-CONJUNCTS))
(proclaim '(special TEA::CONTEXT-SIMPLIFY-ASSUMPTIONS))
(proclaim '(special TEA::SELF-CONTRAPOSE))
(proclaim '(special TEA::TC-VIGOROUSLY-PROVE-REQUIREMENTS))
(proclaim '(special TEA::TC-REFUTE-REQUIREMENTS))
(proclaim '(special TEA::TC-PROVE-REQUIREMENTS))
(proclaim '(special TEA::CONTEXT-UNIVERSAL-INSTANCE?))
(proclaim '(special TEA::CALL-CONTEXT-UNIVERSAL-INSTANCE?))
(proclaim '(special TEA::CONTEXT-MATCH))
(proclaim '(special TEA::CONTEXT-DO-MATCH?))
(proclaim '(special TEA::CONTEXT-STRONGLY-ENTAILS-SUBSTITUTION-DEFINED?))
(proclaim '(special TEA::CONTEXT-MATCH-CHECK-DEFINEDNESS?))
(proclaim '(special TEA::CONTEXT-TRIVIALLY-ENTAILS-SUBSTITUTION-DEFINED?))
(proclaim '(special TEA::SUBST-COMP->DEFINEDNESS-CONDITION))
(proclaim '(special TEA::SUBSTITUTION-DEFINEDNESS-CONDITIONS))
(proclaim '(special TEA::CONTEXT-ENTAILS-SUBSTITUTION-DEFINED?))
(proclaim '(special TEA::CONTEXT-ENTAILS-DEFINED-IN-SORT?))
(proclaim '(special TEA::CONTEXT-IMMEDIATELY-ENTAILS-DEFINED-IN-SORT?))
(proclaim '(special TEA::CONTEXT-TRIVIALLY-ENTAILS-DEFINED-IN-SORT?))
(proclaim '(special TEA::CONTEXT-ENTAILS-UNDEFINED?))
(proclaim '(special TEA::CONTEXT-IMMEDIATELY-ENTAILS-DEFINED?))
(proclaim '(special TEA::CONTEXT-TRIVIALLY-ENTAILS-DEFINED?))
(proclaim '(special TEA::CONTEXT-ENTAILS-DEFINED?))
(proclaim '(special TEA::CONTEXT-ENTAILS-UNEQUAL?))
(proclaim '(special TEA::CONTEXT-ENTAILS-EQUAL?))
(proclaim '(special TEA::CONTEXT-IMMEDIATELY-ENTAILS-EQUAL?))
(proclaim '(special TEA::COMPARE-COMPONENTS-IN-CONTEXT?))
(proclaim '(special TEA::CONTEXT-IMMEDIATELY-ENTAILS-QUASI-EQUAL?))
(proclaim '(special TEA::CONTEXT-TRIVIALLY-ENTAILS-EQUAL?))
(proclaim '(special TEA::CONTEXT-TRIVIALLY-ENTAILS-QUASI-EQUAL?))
(proclaim '(special TEA::IF-LOGICAL-TRANSFORM))
(proclaim '(special TEA::FORSOME-APPLICATION-TRANSFORM))
(proclaim '(special TEA::FORSOME-CONJUNCTION-TRANSFORM))
(proclaim '(special TEA::FORSOME-LOGICAL-TRANSFORM))
(proclaim '(special TEA::IOTA-LOGICAL-TRANSFORM))
(proclaim '(special TEA::CONVERGENCE-SIMPLIFY-CONDITIONAL-TERM))
(proclaim '(special TEA::CONTEXT-SIMPLIFY-CONVERGENCE))
(proclaim '(special TEA::CONVERGENCE-LOGICAL-TRANSFORM))
(proclaim '(special TEA::CONTEXT-SIMPLIFY-SORT-CONVERGENCE))
(proclaim '(special TEA::SORT-CONVERGENCE-LOGICAL-TRANSFORM))
(proclaim '(special TEA::CONTEXT-SIMPLIFY-EQUALITY))
(proclaim '(special TEA::EQUALITY-LOGICAL-TRANSFORM))
(proclaim '(special TEA::CONTEXT-SIMPLIFY-QUASI-EQUALITY))
(proclaim '(special TEA::QUASI-EQUALITY-LOGICAL-TRANSFORM-1))
(proclaim '(special TEA::STRENGTHENED-QUASI-EQUALITY-LOGICAL-TRANSFORM))
(proclaim '(special TEA::QUASI-EQUALITY-LOGICAL-TRANSFORM))
(proclaim '(special TEA::CONTEXT-SIMPLIFY-LAMBDA-APPLICATION))
(proclaim '(special TEA::EQUATE-TO-TYPE-QC-TRANSFORM))
(proclaim '(special TEA::TYPE-PREFERRED-QC-TRANSFORM))
(proclaim '(special TEA::MAKE-NEW-VARIABLES-IN-CONTEXT))
(proclaim '(special TEA::LAMBDA-APPLICATION-LOGICAL-TRANSFORM))
(proclaim '(special TEA::CONSTRUCTOR-SIMPLIFIER-&-CONSTRUCTOR-&-COMPONENTS))
(proclaim '(special TEA::SIMPLIFY-QUASI-CONSTRUCTORS-MESSILY?))
(proclaim '(special TEA::CONTEXT-RECURSIVELY-SEEK-FORMAL-SYMBOLS))
(proclaim '(special TEA::CONTEXT-SEEK-FORMAL-SYMBOL))
(proclaim '(special TEA::SIMPLIFY-COMPONENTS-IN-CONTEXT))
(proclaim '(special TEA::CONTEXT-APPLY-CONSTRUCTOR-SIMPLIFIER))
(proclaim '(special TEA::SIMPLIFY-LOGICALLY))
(proclaim '(special TEA::SIMPLIFY-LOGICALLY-INTERNAL))
(proclaim '(special TEA::SEEK-TRUTH-VALUE))
(proclaim '(special TEA::SIMPLIFY-BY-TRANSFORMS))
(proclaim '(special TEA::*SIMPLIFY-BY-TRANSFORMS-TRACER*))
(proclaim '(special TEA::CONTEXT-SIMPLIFY-1))
(proclaim '(special TEA::CONTEXT-SIMPLIFY-1-INTERNAL))
(proclaim '(special TEA::CONTEXT-SIMPLIFY-INSTALLER))
(proclaim '(special TEA::CONTEXT-SIMPLIFY))
(proclaim '(special TEA::CONTEXT-SIMPLIFY-TOP-LEVEL))
(proclaim '(special TEA::PRUNE-SIMPLIFICATION))
(proclaim '(special TEA::MAKE-SIMPLIFICATION-PROCEDURE))
(proclaim '(special TEA::SIMPLIFY-WITH-PARTIALLY-SIMPLIFIED-FORM))
(proclaim '(special TEA::SIMPLIFY-NON-VIRGINS?))
(proclaim '(special TEA::ACCUMULATE-UNDISCHARGED-MINOR-PREMISES?))
(proclaim '(special TEA::UNDISCHARGED-MINOR-PREMISES))
(proclaim '(special TEA::DONT-WORK-ON-DEFINEDNESS))
(proclaim '(special TEA::CONTEXT-TRIVIALLY-ENTAILS?))
(proclaim '(special TEA::CONTEXT-SIMPLIFY-VIRGIN))
(proclaim '(special TEA::CONTEXT-IMMEDIATELY-ENTAILS?))
(proclaim '(special TEA::CONTEXT-INSISTENTLY-SIMPLIFY))
(proclaim '(special TEA::CONTEXT-ENTAILS?))
(proclaim '(special TEA::SEQUENTS-ALPHA-EQUIVALENT?))
(proclaim '(special TEA::SEQUENT->SENTENCE))
(proclaim '(special TEA::SEQUENT->THEORY-SEQUENT))
(proclaim '(special TEA::SEQUENT-THEORY))
(proclaim '(special TEA::SEQUENT-CHANGE-FREE-VARIABLES))
(proclaim '(special TEA::SEQUENT-ADD-ASSUMPTION))
(proclaim '(special TEA::SEQUENT-ASSUMPTIONS))
(proclaim '(special TEA::THEORY-ASSERTION->SEQUENT))
(proclaim '(special TEA::ASSERTION->SEQUENT))
(proclaim '(special TEA::MAKE-SEQUENT-ENTAILED))
(proclaim '(special TEA::BUILD-SEQUENT))
(proclaim '(special TEA::RETRIEVE-SEQUENT))
(proclaim '(special TEA::SEQUENT-ENTAILMENT-FLAG))
(proclaim '(special TEA::SEQUENT-BOUND-VARIABLES))
(proclaim '(special TEA::SEQUENT-FREE-VARIABLES))
(proclaim '(special TEA::SEQUENT-ASSERTION))
(proclaim '(special TEA::SEQUENT-CONTEXT))
(proclaim '(special TEA::MAKE-SEQUENT))
(proclaim '(special TEA::SEQUENT?))
(proclaim '(special TEA::LOCAL-CONTEXT-AT-VIRTUAL-PATH))
(proclaim '(special TEA::LOCAL-CONTEXT-AT-PATH))
(proclaim '(special TEA::CONTEXT-AND-ADDITIONS-AT-PATH))
(proclaim '(special TEA::REQUANTIFICATION-ON-PATH?))
(proclaim '(special TEA::REQUANTIFICATION?))
(proclaim '(special TEA::REQUANTIFICATION-FILTER-CONTEXT-AND-USING))
(proclaim '(special TEA::REQUANTIFICATION-FILTER-CONTEXT))
(proclaim '(special TEA::REBINDING-FILTER-CONTEXT))
(proclaim '(special TEA::CONTEXT-OMIT-ASSUMPTION))
(proclaim '(special TEA::CONTEXT-OMIT-ASSUMPTIONS))
(proclaim '(special TEA::CONTEXT->THEORY-CONTEXT))
(proclaim '(special TEA::BUILD-CONTEXT))
(proclaim '(special TEA::CONTEXT-ADD-ASSUMPTION))
(proclaim '(special TEA::CONTEXT-ADD-ASSUMPTIONS))
(proclaim '(special TEA::EMPTY-CONTEXT?))
(proclaim '(special TEA::THEORY-EMPTY-CONTEXT))
(proclaim '(special TEA::THE-NULL-CONTEXT))
(proclaim '(special TEA::EMPTY-CONTEXT))
(proclaim '(special TEA::THEORY-NULL-CONTEXT))
(proclaim '(special TEA::RETRIEVE-CONTEXT))
(proclaim '(special TEA::CONTEXT-PREDECESSORS&SUBSETS))
(proclaim '(special TEA::CONTEXT-SUBCONTEXT-COUNT))
(proclaim '(special TEA::CONTEXT-PREDECESSOR-CHAIN-LENGTH))
(proclaim '(special TEA::MAX-INDEX))
(proclaim '(special TEA::CLEAR-CONTEXTS))
(proclaim '(special TEA::*THEORY-CONTEXT-TABLE*))
(proclaim '(special TEA::TRANSITIVE-PARTIALLY-SIMPLIFIED-FORM))
(proclaim '(special TEA::PARTIALLY-SIMPLIFIED-FORM))
(proclaim '(special TEA::SENSOR))
(proclaim '(special TEA::THEORY-CONTEXT?))
(proclaim '(special TEA::CONTEXT-SEQUENTS))
(proclaim '(special TEA::CONTEXT-ASSUMPTIONS-ALREADY-SIMPLIFIED?))
(proclaim '(special TEA::CONTEXT-PREDECESSOR))
(proclaim '(special TEA::CONTEXT-ABSURD-FLAG))
(proclaim '(special TEA::CONTEXT-ASSUMPTION-VARIABLES))
(proclaim '(special TEA::CONTEXT-VARIABLES))
(proclaim '(special TEA::CONTEXT-BOUND-VARIABLES))
(proclaim '(special TEA::CONTEXT-FREE-VARIABLES))
(proclaim '(special TEA::CONTEXT-TERM-SORTS))
(proclaim '(special TEA::CONTEXT-PARTIALLY-SIMPLIFIED))
(proclaim '(special TEA::CONTEXT-Q-HASHES))
(proclaim '(special TEA::CONTEXT-Q-CLASSES))
(proclaim '(special TEA::CONTEXT-ASSUMPTIONS))
(proclaim '(special TEA::CONTEXT-THEORY-SLOT))
(proclaim '(special TEA::MAKE-CONTEXT))
(proclaim '(special TEA::CONTEXT?))
(proclaim '(special TEA::CONTEXT-NEW-ENTRY-ABSURD?))
(proclaim '(special TEA::ADD-CONTEXT-ENTRY-ADD-SORT-CONVERGENCE))
(proclaim '(special TEA::ADD-CONTEXT-ENTRY-ADD-CONVERGENCE))
(proclaim '(special TEA::ADD-CONTEXT-ENTRY-ADD-APPLICATION))
(proclaim '(special TEA::ADD-CONTEXT-ENTRY-ADD-EQUATION))
(proclaim '(special TEA::ADD-CONTEXT-ENTRY-DO-ADDITION))
(proclaim '(special TEA::CONTEXT-TERM-DEFINED-SORTS))
(proclaim '(special TEA::TERM-SORT-TRIGGER))
(proclaim '(special TEA::ADD-CONTEXT-TERM-SORT))
(proclaim '(special TEA::DO-DEBUG?))
(proclaim '(special TEA::ADD-CONTEXT-ENTRY))
(proclaim '(special TEA::ADD-CONTEXT-ENTRIES))
(proclaim '(special TEA::PRINT-CONTEXTS-VERBOSELY?))
(proclaim '(special TEA::CONTEXT-WALK-NEGATED-EQUALITIES-OR-QUASI-EQUALITIES))
(proclaim '(special TEA::CONTEXT-WALK-EQUALITIES))
(proclaim '(special TEA::CONTEXT-ANY-MATCHING-ENTRY?))
(proclaim '(special TEA::CONTEXT-ANY-MATCHER?))
(proclaim '(special TEA::CONTEXT-WALK-ENTRIES-CONSTRUCTOR-AND-FIRST-LEAD))
(proclaim '(special TEA::CONTEXT-WALK-MATCHES-TO-CONSTRUCTOR-AND-FIRST-LEAD))
(proclaim '(special TEA::CONTEXT-WALK-POSSIBLE-MATCHING-ENTRIES))
(proclaim '(special TEA::CONTEXT-WALK-POSSIBLE-MATCHERS))
(proclaim '(special TEA::CONTEXT-EXPR-DEFINED?))
(proclaim '(special TEA::CONTEXT-EXPRS-QUASI-EQUAL?))
(proclaim '(special TEA::CONTEXT-EXPRS-EQUAL?))
(proclaim '(special TEA::ADD-CONTEXT-CONVERGENCE))
(proclaim '(special TEA::ADD-CONTEXT-QUASI-EQUATION))
(proclaim '(special TEA::ADD-CONTEXT-EQUATION))
(proclaim '(special TEA::CONTEXT-TRANSFORM-HANDLER))
(proclaim '(special TEA::CONTEXT-THEORY))
(proclaim '(special TEA::MAKE-CONTEXT-ABSURD))
(proclaim '(special TEA::INSTALL-CONTEXT-ENTRY))
(proclaim '(special TEA::CONTEXT-PRINT-Q-MEMBERS))
(proclaim '(special TEA::CONTEXT-PRINT-ENTRIES))
(proclaim '(special TEA::CONTEXT-COUNT-Q-POPULATION))
(proclaim '(special TEA::CONTEXT-WALK-ENTRIES))
(proclaim '(special TEA::CONTEXT-WALK-Q-CLASSES))
(proclaim '(special TEA::CONTEXT-Q-ROOT))
(proclaim '(special TEA::CONTEXT-Q-ROOT-IF-ANY))
(proclaim '(special TEA::CONTEXT-EQUATE-EXPRS))
(proclaim '(special TEA::CONTEXT-QUASI-EQUATE-EXPRS))
(proclaim '(special TEA::EQUATE-TO-ALPHA-ROOT))
(proclaim '(special TEA::CONTEXT-ADD-BOUND-VARIABLES))
(proclaim '(special TEA::CONTEXT-ABSURD?))
(proclaim '(special TEA::CONTEXT-PASSIVELY-CONTAINS-ENTRY?))
(proclaim '(special TEA::CONTEXT-CONTAINS-ENTRY?))
(proclaim '(special TEA::Q-WALK-MATCHES-INT))
(proclaim '(special TEA::Q-WALK-MATCHES-TO-CONSTRUCTOR))
(proclaim '(special TEA::Q-WALK-MATCHES-TO-CONSTRUCTOR-AND-FIRST-LEAD))
(proclaim '(special TEA::Q-MATCHES-TO-CONSTRUCTOR-AND-LEADS))
(proclaim '(special TEA::Q-SAME-CLASS?))
(proclaim '(special TEA::Q-EQUATE-EXPRS))
(proclaim '(special TEA::Q-INSERT-EXPR))
(proclaim '(special TEA::Q-MAKE-EXPR-DEFINED))
(proclaim '(special TEA::Q-SEEK-DEFINED?))
(proclaim '(special TEA::Q-SEEK-ROOT))
(proclaim '(special TEA::Q-HASHES-WALK-POSSIBLE-MATCHERS))
(proclaim '(special TEA::Q-EXPRESSION-MATCHES))
(proclaim '(special TEA::INITIALIZE-Q-TABLES))
(proclaim '(special TEA::INITIALIZE-Q-HASHES))
(proclaim '(special TEA::INITIALIZE-Q-CLASSES))
(proclaim '(special TEA::Q-RETRIEVE-HASHED-LIST))
(proclaim '(special TEA::Q-INSTALL-HASH-DATUM))
(proclaim '(special TEA::Q-INSTALL-HASH))
(proclaim '(special TEA::Q-RETRIEVE-&-UPDATE))
(proclaim '(special TEA::Q-ACCESS-TOTAL))
(proclaim '(special TEA::RECORD-Q-ACCESS?))
(proclaim '(special TEA::MAKE-INITIAL-Q-CLASS))
(proclaim '(special TEA::JOIN-Q-CLASSES))
(proclaim '(special TEA::Q-CLASS-E-LESS?))
(proclaim '(special TEA::Q-CLASS-INDEX))
(proclaim '(special TEA::Q-CLASS-LESS?))
(proclaim '(special TEA::Q-EXPRESSION))
(proclaim '(special TEA::Q-UPDATE-ENTRY))
(proclaim '(special TEA::Q-FIND-ULTIMATE))
(proclaim '(special TEA::Q-CLASS-DEFINED?))
(proclaim '(special TEA::Q-CLASS-EXPR-OR-NEXT))
(proclaim '(special TEA::Q-CLASS-FORWARD?))
(proclaim '(special TEA::MAKE-Q-CLASS))
(proclaim '(special TEA::Q-CLASS?))
(proclaim '(special TEA::SECTION-LOWER-CASE-NAMES))
(proclaim '(special TEA::CURRENTLY-LOADED-SECTION-NAMES))
(proclaim '(special TEA::CURRENTLY-LOADED-SECTIONS))
(proclaim '(special TEA::DOWNCASE-OBJECT))
(proclaim '(special TEA::FORMAT-IMPS-LOAD-MESSAGE))
(proclaim '(special TEA::LOAD-IMPS-FILE))
(proclaim '(special TEA::LOAD-IMPS-FILES))
(proclaim '(special TEA::LOAD-IMPS-SECTION-FILES))
(proclaim '(special TEA::LOAD-IMPS-COMPONENT-SECTIONS))
(proclaim '(special TEA::LOAD-IMPS-SECTION-AUX))
(proclaim '(special TEA::LOAD-IMPS-SECTION))
(proclaim '(special TEA::BUILD-SECTION))
(proclaim '(special TEA::SECTION-LOADED?))
(proclaim '(special TEA::SECTION-FILESPECS))
(proclaim '(special TEA::SECTION-COMPONENT-NAMES))
(proclaim '(special TEA::MAKE-SECTION))
(proclaim '(special TEA::SECTION?))
(proclaim '(special TEA::IMPS-FILE-LOADED?))
(proclaim '(special TEA::*LOADED-FILES-TABLE*))
(proclaim '(special TEA::NAME->SECTION))
(proclaim '(special TEA::*NAME-SECTION-TABLE*))
(proclaim '(special TEA::IMPS-FILESPEC-EQUAL?))
(proclaim '(special TEA::IMPS-FILESPEC->STRING))
(proclaim '(special TEA::IMPS-FILENAME->STRING))
(proclaim '(special TEA::IMPS-EXPAND-FILENAME))
(proclaim '(special TEA::IMPS-GET-DEFAULT-FILENAME))
(proclaim '(special TEA::IMPS-FILESPEC?))
(proclaim '(special TEA::MAKE-RECORD-THEORY-WITH-SORTNAMES))
(proclaim '(special TEA::RECORD-THEORY-MAKE-THEOREMS))
(proclaim '(special TEA::MAKE-RECORD-AXIOMS))
(proclaim '(special TEA::MAKE-RECORD-LANGUAGE-AND-CONSTANTS))
(proclaim '(special TEA::MAKE-RECORD-THEORY))
(proclaim '(special TEA::TRANSPORT-DEFINED-SORTS-AND-CONSTANTS-TO-THEORY-MULTIPLE-USING-PERMUTATIONS))
(proclaim '(special TEA::TRANSPORT-DEFINED-SORTS-AND-CONSTANTS-TO-THEORY-MULTIPLE))
(proclaim '(special TEA::TRANSPORT-DEFINITIONS-FROM-THEORY-MULTIPLES))
(proclaim '(special TEA::THEORY-ENSEMBLE-TRANSPORT-DEFINITIONS-FROM-THEORY-MULTIPLES-USING-MULTIPLE-PERMUTATIONS))
(proclaim '(special TEA::THEORY-ENSEMBLE-TRANSPORT-DEFINITIONS-FROM-THEORY-MULTIPLE-USING-PERMUTATION))
(proclaim '(special TEA::THEORY-ENSEMBLE-TRANSPORT-DEFINITIONS-FROM-THEORY-MULTIPLE))
(proclaim '(special TEA::THEORY-ENSEMBLE-BUILD-TRANSLATION-FROM-THEORY-MULTIPLE))
(proclaim '(special TEA::RENAME-INDEXERS-FOR-TRANSLATION-FROM-THEORY-MULTIPLE))
(proclaim '(special TEA::MULTI-ASSOCIATION-LIST-LENGTH-CHECK))
(proclaim '(special TEA::MULTI-ASSOCIATION-LIST->TRANSLATION-ALIST-FROM-THEORY-MULTIPLE))
(proclaim '(special TEA::MULTI-ASSOCIATION-LIST->TRANSLATION-ALISTS))
(proclaim '(special TEA::FIND-OR-BUILD-ENCOMPASSING-TRANSLATIONS))
(proclaim '(special TEA::TRANSLATABLE-NATIVELY-DEFINED-SORTS-IN-THEORY-MULTIPLE))
(proclaim '(special TEA::NATIVELY-DEFINED-SORTS-IN-THEORY-MULTIPLE))
(proclaim '(special TEA::NATIVELY-DEFINED-SORTS-IN-THEORY-MULTIPLE-AUX))
(proclaim '(special TEA::TRANSLATABLE-NATIVELY-DEFINED-CONSTANTS-IN-THEORY-MULTIPLE))
(proclaim '(special TEA::NATIVELY-DEFINED-CONSTANTS-IN-THEORY-MULTIPLE))
(proclaim '(special TEA::TRANSLATIONS-BETWEEN-THEORY-MULTIPLES))
(proclaim '(special TEA::NATIVELY-DEFINED-CONSTANTS-IN-THEORY-MULTIPLE-AUX))
(proclaim '(special TEA::LIST-UP-TO))
(proclaim '(special TEA::ENUMERATE-PERMUTATION-ENTRIES))
(proclaim '(special TEA::INTERSPERSE))
(proclaim '(special TEA::COMPUTE-TRANSLATION-BETWEEN-THEORY-MULTIPLES-FROM-PERMUTATION))
(proclaim '(special TEA::COMPUTE-CANONICAL-TRANSLATIONS-BETWEEN-THEORY-MULTIPLES))
(proclaim '(special TEA::MTH-TO-NTH-REPLICA-CANONICAL-TRANSLATION-ALISTS))
(proclaim '(special TEA::BASE-THEORY-TO-NTH-REPLICA-CANONICAL-TRANSLATION-ALISTS))
(proclaim '(special TEA::CANONICAL-TRANSLATIONS-BETWEEN-THEORY-MULTIPLES))
(proclaim '(special TEA::TRANSLATABLE-DEFINED-SORTS-IN-THEORY-MULTIPLE))
(proclaim '(special TEA::DEFINED-SORTS-IN-THEORY-MULTIPLE))
(proclaim '(special TEA::TRANSLATABLE-DEFINED-CONSTANTS-IN-THEORY-MULTIPLE))
(proclaim '(special TEA::DEFINED-CONSTANTS-IN-THEORY-MULTIPLE))
(proclaim '(special TEA::NAMER-FROM-SUGGESTED-NAMER))
(proclaim '(special TEA::SUBSCRIPTING-RENAMER))
(proclaim '(special TEA::ENSEMBLE-DEFAULT-RENAMER))
(proclaim '(special TEA::NEARLY-TRIVIAL-RENAMER))
(proclaim '(special TEA::ALIST-RENAME-INDEXERS))
(proclaim '(special TEA::COMPUTE-THEORY-MULTIPLE-AND-CANONICAL-TRANSLATIONS))
(proclaim '(special TEA::COMPUTE-THEORY-REPLICA-AND-CANONICAL-TRANSLATION))
(proclaim '(special TEA::THEORY-ENSEMBLE-FIND-THEORY-MULTIPLE))
(proclaim '(special TEA::THEORY-ENSEMBLE-INDEXING-NAMES))
(proclaim '(special TEA::TRANSLATABLE-DEFINED-SORTS-IN-BASE-THEORY))
(proclaim '(special TEA::DEFINED-SORTS-IN-BASE-THEORY))
(proclaim '(special TEA::TRANSLATABLE-DEFINED-CONSTANTS-IN-BASE-THEORY))
(proclaim '(special TEA::DEFINED-CONSTANTS-IN-BASE-THEORY))
(proclaim '(special TEA::DONT-TRANSLATE-SORT))
(proclaim '(special TEA::DONT-TRANSLATE-CONSTANT))
(proclaim '(special TEA::THEORY-ENSEMBLE-INSTANCE?))
(proclaim '(special TEA::TRIVIAL-TRANSLATION?))
(proclaim '(special TEA::THEORY-ENSEMBLE-COMPUTED-MULTIPLES))
(proclaim '(special TEA::THEORY-ENSEMBLE-EXPORT-TRANSPORTABLE-RWRS))
(proclaim '(special TEA::THEORY-ENSEMBLE-INSTANCES))
(proclaim '(special TEA::INTERPRETATIONS-FROM-THEORY))
(proclaim '(special TEA::RETRIEVE-THEORY-MULTIPLE))
(proclaim '(special TEA::THEORY-ENSEMBLE-MOVABLE-CONSTANTS))
(proclaim '(special TEA::THEORY-ENSEMBLE-MOVABLE-SORTS))
(proclaim '(special TEA::BUILD-THEORY-ENSEMBLE))
(proclaim '(special TEA::NAME->THEORY-ENSEMBLE))
(proclaim '(special TEA::FIND-THEORY-ENSEMBLE))
(proclaim '(special TEA::THEORY-ENSEMBLE-MAXIMUM-MULTIPLE))
(proclaim '(special TEA::THEORY-ENSEMBLE-NONTRANSLATING-DEFINED-SORTS))
(proclaim '(special TEA::THEORY-ENSEMBLE-NONTRANSLATING-DEFINED-CONSTANTS))
(proclaim '(special TEA::THEORY-ENSEMBLE-INITIAL-MOVABLE-CONSTANTS))
(proclaim '(special TEA::THEORY-ENSEMBLE-INITIAL-MOVABLE-SORTS))
(proclaim '(special TEA::THEORY-ENSEMBLE-CANONICAL-TRANSLATIONS-ALIST))
(proclaim '(special TEA::THEORY-ENSEMBLE-THEORY-MULTIPLE-ALIST))
(proclaim '(special TEA::THEORY-ENSEMBLE-THEORY-REPLICA-ALIST))
(proclaim '(special TEA::THEORY-ENSEMBLE-REPLICA-RENAMER))
(proclaim '(special TEA::THEORY-ENSEMBLE-FIXED-THEORIES-SET))
(proclaim '(special TEA::THEORY-ENSEMBLE-BASE-THEORY))
(proclaim '(special TEA::THEORY-ENSEMBLE-NAME))
(proclaim '(special TEA::MAKE-THEORY-ENSEMBLE))
(proclaim '(special TEA::THEORY-ENSEMBLE?))
(proclaim '(special TEA::THEORY-EXPRESSION?))
(proclaim '(special TEA::THEORY-SORT?))
(proclaim '(special TEA::THEORY-SPECIFIC-THEOREM-NAMES))
(proclaim '(special TEA::THEORY-SPECIFIC-THEOREMS))
(proclaim '(special TEA::THEORY-SPECIFIC-AXIOMS))
(proclaim '(special TEA::THEORY-ORDER-DEFINITIONS))
(proclaim '(special TEA::SELECT-COMMON-SUB-THEORIES))
(proclaim '(special TEA::COMPRESS-THEORIES))
(proclaim '(special TEA::DEFINE-DEFINITION))
(proclaim '(special TEA::DEFINE-THEOREM))
(proclaim '(special TEA::SEXP&LANGUAGE->THEOREM))
(proclaim '(special TEA::DEFINE-THEORY-FROM-DEFINITION))
(proclaim '(special TEA::THEORY-VERIFY-THEOREM))
(proclaim '(special TEA::THEORY-VERIFY-MODIFY-AND-ADD-THEOREM-AUX))
(proclaim '(special TEA::THEORY-VERIFY-MODIFY-AND-ADD-THEOREM))
(proclaim '(special TEA::THEORY-VERIFY-AND-ADD-THEOREM))
(proclaim '(special TEA::DESTRUCTURE-THEORY-THEOREMS-DEFINITION))
(proclaim '(special TEA::THEORY-THEOREMS-FROM-DEFINITION))
(proclaim '(special TEA::*DESTRUCTURE-THEORY-PRINT-PROC*))
(proclaim '(special TEA::*DESTRUCTURE-THEORY-READ-PROC*))
(proclaim '(special TEA::DESTRUCTURE-THEOREMS))
(proclaim '(special TEA::DESTRUCTURE-THEORY-AXIOMS))
(proclaim '(special TEA::DESTRUCTURE-DISTINCT-CONSTANTS))
(proclaim '(special TEA::DESTRUCTURE-THEORY-COMPONENT-THEORIES))
(proclaim '(special TEA::DESTRUCTURE-THEORY-DEFINITION))
(proclaim '(special TEA::THEORY-FROM-DEFINITION))
(proclaim '(special TEA::THEORY-ENTAILS-SEQUENT-IMMEDIATELY?))
(proclaim '(special TEA::THEORY-ENTAILS-IMMEDIATELY?))
(proclaim '(special TEA::GET-THEOREM-FORMULA))
(proclaim '(special TEA::THEOREM-USAGE-HOOK-ALIST))
(proclaim '(special TEA::BUILD-PSEUDO-RECURSIVE-DEFINITION))
(proclaim '(special TEA::THEORY-INSTALL-TRIGGER))
(proclaim '(special TEA::THEORY-INSTALL-SIMPLIFY-LOGICALLY-FIRST))
(proclaim '(special TEA::THEOREM-USAGE-HOOKS))
(proclaim '(special TEA::THEOREM-ADD-USAGE))
(proclaim '(special TEA::THEORY-ADD-THEOREM-AUX))
(proclaim '(special TEA::THEORY-ADD-THEOREM-AND-EVENT))
(proclaim '(special TEA::THEORY-ADD-THEOREM-WITHOUT-EVENT))
(proclaim '(special TEA::THEORY-ADD-THEOREM))
(proclaim '(special TEA::OMIT-THEOREM-USAGE-HOOKS))
(proclaim '(special TEA::THEORY-PRINT-NAMES))
(proclaim '(special TEA::THEORY-PRIMITIVE-CONSTANT?))
(proclaim '(special TEA::THEORY-CONSTANT?))
(proclaim '(special TEA::THEORY-PRIMITIVE-CONSTANTS))
(proclaim '(special TEA::THEORY-CONSTANTS))
(proclaim '(special TEA::THEORY-IND-SORTS-RESOLVED))
(proclaim '(special TEA::THEORY-PRIMITIVE-SORT?))
(proclaim '(special TEA::THEORY-RESOLVED-SORT?))
(proclaim '(special TEA::THEORY-PRIMITIVE-SORTS))
(proclaim '(special TEA::THEORY-SORTS-RESOLVED))
(proclaim '(special TEA::THEORY-GET-THEOREM-FROM-FORMULA))
(proclaim '(special TEA::THEORY-THEOREM?))
(proclaim '(special TEA::THEORY-PASSIVE-THEOREM?))
(proclaim '(special TEA::THEORY-AXIOMS-AND-DEFINITION-AXIOMS))
(proclaim '(special TEA::THEORY-TOP-LEVEL-THEOREMS))
(proclaim '(special TEA::ADD-COMPONENT-THEORY))
(proclaim '(special TEA::EXTEND-THEORY-LANGUAGE))
(proclaim '(special TEA::SUBTHEORY?))
(proclaim '(special TEA::SUB-THEORY?))
(proclaim '(special TEA::LANGUAGE->THEORY))
(proclaim '(special TEA::THEORY-UNION))
(proclaim '(special TEA::EXTEND-THEORY))
(proclaim '(special TEA::SET-THEORY-THEOREMS))
(proclaim '(special TEA::SET-THEORY-DOMAIN-RANGE-HANDLER))
(proclaim '(special TEA::SET-THEORY-TRANSFORM-TABLE))
(proclaim '(special TEA::UPDATE-THEORY-USAGE-ALIST-FOR-THEOREM))
(proclaim '(special TEA::SET-THEORY-COMPONENT-THEORIES))
(proclaim '(special TEA::SET-THEORY-NAME))
(proclaim '(special TEA::BUILD-THEORY))
(proclaim '(special TEA::FIND-SUPER-THEORY-HAVING-SORT))
(proclaim '(special TEA::FIND-SUPER-THEORY-HAVING-CONSTANT))
(proclaim '(special TEA::ENTER-SUPER-THEORY))
(proclaim '(special TEA::STRUCTURAL-SUPER-THEORY?))
(proclaim '(special TEA::FIND-STRUCTURAL-SUPER-THEORIES))
(proclaim '(special TEA::*GLOBAL-SUPER-THEORIES-ALIST*))
(proclaim '(special TEA::THEORY-NAME-STRING))
(proclaim '(special TEA::NAME->THEORY))
(proclaim '(special TEA::DISGORGE-NAMES))
(proclaim '(special TEA::DELETE-THEORY))
(proclaim '(special TEA::FIND-THEORY))
(proclaim '(special TEA::COUNT-THEORIES))
(proclaim '(special TEA::THEORY-NAMES-IN-GLOBAL-THEORY-TABLE))
(proclaim '(special TEA::THEORIES-IN-GLOBAL-THEORY-TABLE))
(proclaim '(special TEA::ENTER-THEORY))
(proclaim '(special TEA::GLOBAL-THEORY-TABLE))
(proclaim '(special TEA::THEORY-RESPECTS-DISTINCT-CONSTANTS?))
(proclaim '(special TEA::DISTINCT-CONSTANT-LISTS-EQUIVALENT?))
(proclaim '(special TEA::CLEAR-EM))
(proclaim '(special TEA::STRUCTURAL-SUB-THEORY?))
(proclaim '(special TEA::FIND-STRUCTURAL-SUB-THEORIES))
(proclaim '(special TEA::THEORY-TABLE-HASH))
(proclaim '(special TEA::THEORY-SUBSORTING-STRUCTURE))
(proclaim '(special TEA::THEORY-HISTORY))
(proclaim '(special TEA::THEORY-DISTINCT-CONSTANT-LIST))
(proclaim '(special TEA::THEORY-EQUIVALENCE-RELATIONS))
(proclaim '(special TEA::THEORY-DISTINCT-CONSTANT-TABLE))
(proclaim '(special TEA::THEORY-DOMAIN-RANGE-HANDLER))
(proclaim '(special TEA::THEORY-VALID-PROCESSORS))
(proclaim '(special TEA::THEORY-TRANSFORM-TABLE))
(proclaim '(special TEA::THEORY-THEOREM-HASH-TABLE))
(proclaim '(special TEA::THEORY-MC-EXTENSIONS))
(proclaim '(special TEA::THEORY-SORT-DEFINITIONS))
(proclaim '(special TEA::THEORY-RECURSIVE-DEFINITIONS))
(proclaim '(special TEA::THEORY-DEFINITIONS))
(proclaim '(special TEA::THEORY-TOP-LEVEL-AXIOMS))
(proclaim '(special TEA::THEORY-AXIOMS))
(proclaim '(special TEA::THEORY-ORIGINAL-LANGUAGE-NAME))
(proclaim '(special TEA::THEORY-LANGUAGE))
(proclaim '(special TEA::THEORY-COMPONENT-THEORIES))
(proclaim '(special TEA::MAKE-THEORY))
(proclaim '(special TEA::THEORY?))
(proclaim '(special TEA::THEORY-SORTING-LEQ))
(proclaim '(special TEA::THEORY-SUBSORTING-SORTING-LEQ))
(proclaim '(special TEA::BUILD-THEORY-SUBSORTING))
(proclaim '(special TEA::SUPERSORT-TABLE-ADD-COERCION))
(proclaim '(special TEA::CLOSE-SUPERSORT-TABLE))
(proclaim '(special TEA::INSTALL-IMMEDIATE-SUPERSORTS))
(proclaim '(special TEA::THEORY-ATOMIC-SUBSORTS))
(proclaim '(special TEA::THEORY-TYPES))
(proclaim '(special TEA::THEORY-SUBSORTING-THEORY))
(proclaim '(special TEA::THEORY-SUBSORTING-TABLE))
(proclaim '(special TEA::THEORY-SUBSORTING-TYPE-TABLE))
(proclaim '(special TEA::MAKE-THEORY-SUBSORTING))
(proclaim '(special TEA::THEORY-SUBSORTING?))
(proclaim '(special TEA::ADD-UNSAFE-TRANSPORTABLE-MACETE))
(proclaim '(special TEA::THEORY-INSTALL-TRANSPORTABLE-MACETE))
(proclaim '(special TEA::BUILD-TRANSPORTABLE-MACETE-INTERNAL))
(proclaim '(special TEA::BUILD-TRANSPORTABLE-MACETE))
(proclaim '(special TEA::RETRIEVE-TRANSPORTABLE-MACETE-FROM-FORMULA))
(proclaim '(special TEA::*TRANSPORTABLE-MACETES*))
(proclaim '(special TEA::TRANSPORTABLE-MACETE-SOURCE-THEORY))
(proclaim '(special TEA::TRANSPORTABLE-MACETE-RHS))
(proclaim '(special TEA::TRANSPORTABLE-MACETE-LHS))
(proclaim '(special TEA::TRANSPORTABLE-MACETE?))
(proclaim '(special TEA::APPLY-PROCEDURE-AT-VIRTUAL-PATH))
(proclaim '(special TEA::APPLY-PROCEDURE-AT-PATHS))
(proclaim '(special TEA::APPLY-PROCEDURE-AT-PATH))
(proclaim '(special TEA::THEOREM->ELEMENTARY-MACETE))
(proclaim '(special TEA::INSTALL-ELEMENTARY-MACETE))
(proclaim '(special TEA::ADD-UNSAFE-ELEMENTARY-MACETE))
(proclaim '(special TEA::ADD-ELEMENTARY-MACETE))
(proclaim '(special TEA::THEORY-INSTALL-ELEMENTARY-MACETE))
(proclaim '(special TEA::SYNTACTIC-PROCEDURE->MACETE))
(proclaim '(special TEA::EXPRESSION-QUASI-COMPONENTS-IF-ENABLED-OR-NONBINDING-COMPONENTS))
(proclaim '(special TEA::ELEMENTARY-MACETE->THEOREM))
(proclaim '(special TEA::BUILD-ELEMENTARY-MACETE-INTERNAL))
(proclaim '(special TEA::APPLY-SUBSTITUTION-UNSAFE))
(proclaim '(special TEA::BUILD-ELEMENTARY-MACETE))
(proclaim '(special TEA::FORMULA-SOURCE-TARGET-REQUIREMENTS-BIDIRECTIONAL))
(proclaim '(special TEA::FSTRB-FOR-EQUIVALENCE))
(proclaim '(special TEA::RETRIEVE-MACETE-FROM-FORMULA))
(proclaim '(special TEA::*ELEMENTARY-MACETES*))
(proclaim '(special TEA::SAFE-ELEMENTARY-MACETE?))
(proclaim '(special TEA::ELEMENTARY-MACETE?))
(proclaim '(special TEA::MACETE-REPLACEMENT-CONSTRUCTOR))
(proclaim '(special TEA::ELEMENTARY-MACETE->FORMULA))
(proclaim '(special TEA::MACETE->FORMULA))
(proclaim '(special TEA::ELEMENTARY-MACETE-RHS))
(proclaim '(special TEA::ELEMENTARY-MACETE-LHS))
(proclaim '(special TEA::MACETE-REQUIREMENTS))
(proclaim '(special TEA::TRANSPORTABLE-REWRITE-USAGE-SIMPLOG1ST))
(proclaim '(special TEA::TERM-SIMPLIFIER-IMPORT-TRANSPORTABLE-REWRITE-RULES))
(proclaim '(special TEA::THEORY-IMPORT-TRANSPORTABLE-REWRITE-RULES-AUX))
(proclaim '(special TEA::FORMULA-INSTALLED-AS-REWRITE-RULE-IN-THEORY?))
(proclaim '(special TEA::THEORY-IMPORT-TRANSPORTABLE-REWRITE-RULES))
(proclaim '(special TEA::BUILD-TRANSPORTABLE-REWRITE-RULES-FROM-FORMULA))
(proclaim '(special TEA::THEORY-INSTALL-TRANSPORTABLE-REWRITE-RULE))
(proclaim '(special TEA::MAKE-TRANSPORTABLE-REWRITE-RULE))
(proclaim '(special TEA::TRANSPORTABLE-REWRITE-RULE-FORMULA))
(proclaim '(special TEA::TRANSPORTABLE-REWRITE-RULE?))
(proclaim '(special TEA::TRANSPORTABLE-REWRITE-RULE-FIXED-THEORIES))
(proclaim '(special TEA::TRANSPORTABLE-REWRITE-RULE-RHS))
(proclaim '(special TEA::TRANSPORTABLE-REWRITE-RULE-LHS))
(proclaim '(special TEA::*TRANSPORTABLE-REWRITE-RULES-TABLE*))
(proclaim '(special TEA::REWRITE-USAGE-SORT-CHECK-TRIGGER))
(proclaim '(special TEA::SET-REWRITE-USAGE-TRIGGER))
(proclaim '(special TEA::REWRITE-USAGE-SIMPLOG1ST))
(proclaim '(special TEA::BUILD-AND-INSTALL-REWRITE-RULES-FROM-FORMULA))
(proclaim '(special TEA::THEORY-ADD-REWRITE-RULE))
(proclaim '(special TEA::THEORY-INSTALL-REWRITE-RULE))
(proclaim '(special TEA::MAKE-REWRITE-RULE))
(proclaim '(special TEA::REWRITE-RULE-TRIGGER))
(proclaim '(special TEA::REWRITE-RULE-FORMULA))
(proclaim '(special TEA::REWRITE-RULE?))
(proclaim '(special TEA::REWRITE-RULE-RHS))
(proclaim '(special TEA::REWRITE-RULE-LHS))
(proclaim '(special TEA::SIMPLIFY-LOGICALLY-FIRST?))
(proclaim '(special TEA::*REWRITE-RULES-TABLE*))
(proclaim '(special TEA::TERM-SIMPLIFIER-FROM-DEFINITION))
(proclaim '(special TEA::THEORY-ADD-EQUALITY-COMPARATOR))
(proclaim '(special TEA::THEORY-ADD-ORDER-SIMPLIFIER))
(proclaim '(special TEA::THEORY-ADD-ALGEBRAIC-SIMPLIFIER))
(proclaim '(special TEA::THEORY-BUILD-TRANSFORM-TABLE))
(proclaim '(special TEA::ORDER-PROCESSOR-FROM-DEFINITION))
(proclaim '(special TEA::MAKE-PROCESSOR-FROM-FORM))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-FROM-DEFINITION))
(proclaim '(special TEA::CLEAR-TABLE))
(proclaim '(special TEA::CLEAR-PROCESSORS))
(proclaim '(special TEA::NAME->PROCESSOR))
(proclaim '(special TEA::TABULATE-PROCESSOR-NAME))
(proclaim '(special TEA::THEORY-INSTALL-EXISTING-REWRITE-RULES-IN-ALGEBRAIC-PROCESSORS))
(proclaim '(special TEA::ALGEBRAIC-PROCESSOR-INSTALL-EXISTING-REWRITE-RULES-FROM-THEORY))
(proclaim '(special TEA::THEORY-INSTALL-TRANSFORM-IN-ALGEBRAIC-PROCESSORS))
(proclaim '(special TEA::INSTALL-TRANSFORM-AS-REWRITE-RULE))
(proclaim '(special TEA::*REWRITE-RULES-LIST*))
(proclaim '(special TEA::*PROCESSOR-TABLE*))
(proclaim '(special TEA::JOIN-THEORY-TRANSFORM-TABLES))
(proclaim '(special TEA::APPLY-MATCHING-TRANSFORMS-IN-CONTEXT))
(proclaim '(special TEA::EXPRESSION-MATCHES-LEAD-CONSTANT?))
(proclaim '(special TEA::CONTEXT-HAS-EQUALITY-TRANSFORM?))
(proclaim '(special TEA::RETRIEVE-TRANSFORMS-BY-QUASI-CONSTRUCTOR-OR-CONSTRUCTOR-AND-LEAD))
(proclaim '(special TEA::RETRIEVE-TRANSFORMS-BY-CONSTRUCTOR-AND-LEAD))
(proclaim '(special TEA::THEORY-INSTALL-TRANSFORM))
(proclaim '(special TEA::INSISTENTLY-APPLY-MATCHING-TRANSFORMS-IN-CONTEXT))
(proclaim '(special TEA::IN-SORT-IF-DEFINED))
(proclaim '(special TEA::RESTRICTED-SUBSTITUTION-DEFINEDNESS-CONDITIONS))
(proclaim '(special TEA::JOINTLY-EXPOSED-VARIABLES))
(proclaim '(special TEA::EXPOSED-VARIABLES-FOR-EXPRESSION-OF-KIND-IND))
(proclaim '(special TEA::EXPOSED-VARIABLES-FOR-ATOMIC-FORMULA))
(proclaim '(special TEA::EXPOSED-VARIABLES))
(proclaim '(special TEA::REVERSE-FORMULA-BODY))
(proclaim '(special TEA::REVERSE-FORMULA))
(proclaim '(special TEA::THEORY-THEOREMS->SEXP))
(proclaim '(special TEA::SEXP->THEOREM))
(proclaim '(special TEA::THEOREM->SEXP))
(proclaim '(special TEA::THEOREM-INSTANCE?))
(proclaim '(special TEA::FORMULA->THEOREM))
(proclaim '(special TEA::RESOLVE-THEOREM-NAME))
(proclaim '(special TEA::THEORY-WALK-THEOREMS))
(proclaim '(special TEA::THEORY-THEOREMS))
(proclaim '(special TEA::THEORY-CONTAINS-THEOREM?))
(proclaim '(special TEA::WALK-THEORY-THEOREMS-MATCHING-CONSTRUCTOR-AND-FIRST-LEAD))
(proclaim '(special TEA::WALK-POSSIBLE-MATCHING-THEOREMS))
(proclaim '(special TEA::RETRIEVE-HASHED-THEOREMS))
(proclaim '(special TEA::THEORY-LITERAL-THEOREM?))
(proclaim '(special TEA::TRIVIAL-THEOREM?))
(proclaim '(special TEA::THEORY-INSTALL-THEOREM))
(proclaim '(special TEA::RENAME-THEOREM))
(proclaim '(special TEA::BUILD-THEOREM))
(proclaim '(special TEA::THEOREM-DOWNCASED-NAME))
(proclaim '(special TEA::THEOREM-THEORY-USAGE-ALIST))
(proclaim '(special TEA::THEOREM-USAGE-LIST))
(proclaim '(special TEA::THEOREM-FORMULA))
(proclaim '(special TEA::THEOREM-HOME-THEORY))
(proclaim '(special TEA::COUNT-THEOREMS))
(proclaim '(special TEA::SET-THEOREM-INFO-NTH))
(proclaim '(special TEA::SET-THEOREM-INFO))
(proclaim '(special TEA::*THEOREM-INFO-TABLE*))
(proclaim '(special TEA::THEOREM?))
(proclaim '(special TEA::RETRIEVE-THEOREM))
(proclaim '(special TEA::NAME->THEOREM-1))
(proclaim '(special TEA::NAME->THEOREM))
(proclaim '(special TEA::*NAME-THEOREM-TABLE*))
(proclaim '(special TEA::THEORY-EXECUTE-HISTORY-SEXP))
(proclaim '(special TEA::THEORY-HISTORY->SEXP))
(proclaim '(special TEA::THEORY-ADD-HISTORY-EVENT))
(proclaim '(special TEA::HISTORY-COMPUTE-VALIDATION))
(proclaim '(special TEA::HISTORY-UPDATE-VALIDATION))
(proclaim '(special TEA::SEXP->EVENT-HISTORY))
(proclaim '(special TEA::EVENT-HISTORY->SEXP))
(proclaim '(special TEA::APPEND-HISTORIES))
(proclaim '(special TEA::THEORY-PUSH-THEOREM-EVENT))
(proclaim '(special TEA::THEORY-PUSH-MC-EXTENSION-EVENT))
(proclaim '(special TEA::THEORY-PUSH-DEFINITION-EVENT))
(proclaim '(special TEA::PUSH-HISTORY-EVENT))
(proclaim '(special TEA::BEGIN-EVENT-HISTORY))
(proclaim '(special TEA::BUILD-EVENT-HISTORY))
(proclaim '(special TEA::*INITIAL-EVENT-HISTORY-VALIDATION*))
(proclaim '(special TEA::EVENT-HISTORY-EVENTS))
(proclaim '(special TEA::EVENT-HISTORY-VALIDATION))
(proclaim '(special TEA::MAKE-EVENT-HISTORY))
(proclaim '(special TEA::EVENT-HISTORY?))
(proclaim '(special TEA::SEXP->HISTORY-EVENT))
(proclaim '(special TEA::HISTORY-EVENT->SEXP))
(proclaim '(special TEA::HISTORY-EVENTS-EQ?))
(proclaim '(special TEA::THEOREM->HISTORY-EVENT))
(proclaim '(special TEA::MC-EXTENSION->HISTORY-EVENT))
(proclaim '(special TEA::DEFINITION->HISTORY-EVENT))
(proclaim '(special TEA::HISTORY-EVENT-THEOREM?))
(proclaim '(special TEA::HISTORY-EVENT-MC-EXTENSION?))
(proclaim '(special TEA::HISTORY-EVENT-RECURSIVE-DEFINITION?))
(proclaim '(special TEA::HISTORY-EVENT-DEFINITION?))
(proclaim '(special TEA::HISTORY-EVENT-SORT-DEFINITION?))
(proclaim '(special TEA::HISTORY-EVENT-SEXP-FORM))
(proclaim '(special TEA::HISTORY-EVENT-NAME))
(proclaim '(special TEA::HISTORY-EVENT-ITEM))
(proclaim '(special TEA::MAKE-HISTORY-EVENT))
(proclaim '(special TEA::HISTORY-EVENT?))
(proclaim '(special TEA::POWER-SET))
(proclaim '(special TEA::POWER-SET-PROC))
(proclaim '(special TEA::CARTESIAN-PRODUCT))
(proclaim '(special TEA::CARTESIAN-PRODUCT-BUILDER-AND-SELECTORS-BUILD-DEFINITIONS))
(proclaim '(special TEA::CARTESIAN-PRODUCT-BUILDER-AND-SELECTORS))
(proclaim '(special TEA::SORT-COERCE-EXPR))
(proclaim '(special TEA::CARTESIAN-PRODUCT-BUILDER))
(proclaim '(special TEA::CARTESIAN-PRODUCT-PROC))
(proclaim '(special TEA::DECODE-SORT-SPEC))
(proclaim '(special TEA::MAKE-SORT-CONSTRUCTOR))
(proclaim '(special TEA::SORT-CONSTRUCTOR?))
(proclaim '(special TEA::THEORY-MC-EXTENSION-CONSTANTS))
(proclaim '(special TEA::THEORY-MC-EXTENSION-SORTS))
(proclaim '(special TEA::THEORY-MC-EXTENSION-CONSTANT?))
(proclaim '(special TEA::THEORY-MC-EXTENSION-SORT?))
(proclaim '(special TEA::THEORY-GET-MC-EXTENSION))
(proclaim '(special TEA::GET-EXISTING-MC-EXTENSION))
(proclaim '(special TEA::THEORY-BUILD-MC-EXTENSION))
(proclaim '(special TEA::THEORY-ADD-MC-EXTENSION-AUX))
(proclaim '(special TEA::THEORY-ADD-MC-EXTENSION))
(proclaim '(special TEA::BUILD-MC-EXTENSION))
(proclaim '(special TEA::MC-EXTENSION-KIND))
(proclaim '(special TEA::MC-EXTENSION-AXIOMS))
(proclaim '(special TEA::MC-EXTENSION-LANGUAGE))
(proclaim '(special TEA::MC-EXTENSION-CONSTANTS))
(proclaim '(special TEA::MC-EXTENSION-SORTS))
(proclaim '(special TEA::MC-EXTENSION-NAME))
(proclaim '(special TEA::MC-EXTENSION-HOME-THEORY))
(proclaim '(special TEA::MAKE-MC-EXTENSION))
(proclaim '(special TEA::MC-EXTENSION?))
(proclaim '(special TEA::THEORY-DEFINED-SORTS))
(proclaim '(special TEA::THEORY-DEFINED-SORT?))
(proclaim '(special TEA::THEORY-GET-SORT-DEFINITION-FROM-QUASI-SORT))
(proclaim '(special TEA::THEORY-GET-SORT-DEFINITION))
(proclaim '(special TEA::GET-EXISTING-SORT-DEFINITION))
(proclaim '(special TEA::THEORY-BUILD-SORT-DEFINITION-WITHOUT-CHECKING-NONEMPTYNESS))
(proclaim '(special TEA::THEORY-BUILD-SORT-DEFINITION-WITH-WITNESS))
(proclaim '(special TEA::THEORY-BUILD-SORT-DEFINITION))
(proclaim '(special TEA::THEORY-ADD-SORT-DEFINITION-AUX))
(proclaim '(special TEA::THEORY-ADD-SORT-DEFINITION))
(proclaim '(special TEA::MAKE-THEOREMS-FOR-SORT-DEFINITION))
(proclaim '(special TEA::MAKE-AXIOM-FOR-SORT-DEFINITION))
(proclaim '(special TEA::BUILD-SORT-DEFINITION))
(proclaim '(special TEA::ADD-NONEMPTYNESS-THEOREM))
(proclaim '(special TEA::NONEMPTYNESS-FORMULA))
(proclaim '(special TEA::SORT-DEFINITION-USAGE-LIST))
(proclaim '(special TEA::SORT-DEFINITION-THEOREMS))
(proclaim '(special TEA::SORT-DEFINITION-AXIOM))
(proclaim '(special TEA::SORT-DEFINITION-QUASI-SORT))
(proclaim '(special TEA::SORT-DEFINITION-SORT))
(proclaim '(special TEA::SORT-DEFINITION-HOME-THEORY))
(proclaim '(special TEA::MAKE-SORT-DEFINITION))
(proclaim '(special TEA::SORT-DEFINITION?))
(proclaim '(special TEA::PARAMETERIZED-RECURSIVE-DEFINITION?))
(proclaim '(special TEA::EXPAND-ALL-RECURSIVELY-DEFINED-CONSTANT-OCCURRENCES-IN-THEORY-ONCE))
(proclaim '(special TEA::THEORY-RECURSIVELY-DEFINED-CONSTANTS))
(proclaim '(special TEA::THEORY-RECURSIVELY-DEFINED-CONSTANT?))
(proclaim '(special TEA::THEORY-GET-RECURSIVE-DEFINITION-FROM-FUNCT-LIST))
(proclaim '(special TEA::THEORY-GET-RECURSIVE-DEFINITION))
(proclaim '(special TEA::GET-EXISTING-RECURSIVE-DEFINITION))
(proclaim '(special TEA::THEORY-BUILD-RECURSIVE-DEFINITION-WITHOUT-CHECKING-MONOTONICITY))
(proclaim '(special TEA::THEORY-BUILD-RECURSIVE-DEFINITION))
(proclaim '(special TEA::STABLE-FUNCTION-IN?))
(proclaim '(special TEA::STABLE-PREDICATE-IN?))
(proclaim '(special TEA::MONOTONE-FUNCTIONAL-AUX?))
(proclaim '(special TEA::MONOTONE-FUNCTIONAL?))
(proclaim '(special TEA::THEORY-ADD-RECURSIVE-DEFINITION-AUX))
(proclaim '(special TEA::THEORY-ADD-RECURSIVE-DEFINITION))
(proclaim '(special TEA::MAKE-RECURSIVE-DEFINITION-THEOREMS))
(proclaim '(special TEA::MAKE-MINIMALITY-THEOREM))
(proclaim '(special TEA::MAKE-MINIMALITY-AXIOM))
(proclaim '(special TEA::MAKE-TOTALITY-AXIOMS))
(proclaim '(special TEA::MAKE-EQUATION-AXIOMS))
(proclaim '(special TEA::MAKE-REC-DEFINING-EXPR-LIST))
(proclaim '(special TEA::MAKE-DEFINING-EXPR-LIST))
(proclaim '(special TEA::SUB-FUNCTION-FORMULAS))
(proclaim '(special TEA::SYSTEM-INEQUALITIES))
(proclaim '(special TEA::SYSTEM-EQUATIONS))
(proclaim '(special TEA::FUNCTIONAL-EXPRESSION-2))
(proclaim '(special TEA::FUNCTIONAL-EXPRESSION-1))
(proclaim '(special TEA::APPLICATION-LIST))
(proclaim '(special TEA::RECKLESSLY-BETA-REDUCED-APPLICATION))
(proclaim '(special TEA::CHECK-ARGUMENTS-OF-BUILD-RECURSIVE-DEFINITION))
(proclaim '(special TEA::BUILD-RECURSIVE-DEFINITION))
(proclaim '(special TEA::COORDINATEWISE-MONOTONICITY-FORMULA))
(proclaim '(special TEA::COORDINATEWISE-MONOTONICITY-FORMULAS))
(proclaim '(special TEA::MAKE-MONOTONICITY-THEOREM))
(proclaim '(special TEA::MONOTONICITY-FORMULA))
(proclaim '(special TEA::RECURSIVE-DEFINITION-REC-DEFINING-EXPR))
(proclaim '(special TEA::RECURSIVE-DEFINITION-DEFINING-EXPR))
(proclaim '(special TEA::RECURSIVE-DEFINITION-USAGE-LIST))
(proclaim '(special TEA::RECURSIVE-DEFINITION-THEOREMS))
(proclaim '(special TEA::RECURSIVE-DEFINITION-TOTALITY-AXIOMS))
(proclaim '(special TEA::RECURSIVE-DEFINITION-MINIMALITY-AXIOM))
(proclaim '(special TEA::RECURSIVE-DEFINITION-EQUATION-AXIOMS))
(proclaim '(special TEA::RECURSIVE-DEFINITION-REC-DEFINING-EXPR-LIST))
(proclaim '(special TEA::RECURSIVE-DEFINITION-DEFINING-EXPR-LIST))
(proclaim '(special TEA::RECURSIVE-DEFINITION-FUNCTIONAL-LIST))
(proclaim '(special TEA::RECURSIVE-DEFINITION-CONSTANT-LIST))
(proclaim '(special TEA::RECURSIVE-DEFINITION-HOME-THEORY))
(proclaim '(special TEA::RECURSIVE-DEFINITION-NAME))
(proclaim '(special TEA::MAKE-RECURSIVE-DEFINITION))
(proclaim '(special TEA::RECURSIVE-DEFINITION?))
(proclaim '(special TEA::IMPLICIT-DEFINITION?))
(proclaim '(special TEA::MAKE-IMPLICIT-DEFINITION-TYPE))
(proclaim '(special TEA::IMPLICIT-IOTA-&-UNFOLDING-THEOREMS?))
(proclaim '(special TEA::CONTRACT-EXPRESSION-OCCURRENCES))
(proclaim '(special TEA::CONTRACT-EXPRESSION))
(proclaim '(special TEA::MATCH-DEFINING-EXPR))
(proclaim '(special TEA::EXPAND-ALL-DIRECTLY-DEFINED-CONSTANT-OCCURRENCES-IN-THEORY-ONCE))
(proclaim '(special TEA::EXPAND-CONSTANT-OCCURRENCES-ONCE))
(proclaim '(special TEA::EXPAND-CONSTANT-OCCURRENCES))
(proclaim '(special TEA::EXPAND-CONSTANT))
(proclaim '(special TEA::THEORY-DEFINITIONS->SEXP))
(proclaim '(special TEA::THEORY-NONRECURSIVELY-DEFINED-CONSTANTS))
(proclaim '(special TEA::THEORY-DEFINED-CONSTANTS))
(proclaim '(special TEA::THEORY-DIRECTLY-DEFINED-CONSTANT?))
(proclaim '(special TEA::THEORY-GET-CONSTANT-DEFINITION-FROM-DEFINING-EXPR))
(proclaim '(special TEA::THEORY-GET-DEFINITION))
(proclaim '(special TEA::THEORY-DEFINED-CONSTANT?))
(proclaim '(special TEA::THEORY-GET-CONSTANT-DEFINITION))
(proclaim '(special TEA::GET-EXISTING-DEFINITION))
(proclaim '(special TEA::THEORY-BUILD-DEFINITION-WITHOUT-CHECKING-DEFINEDNESS))
(proclaim '(special TEA::THEORY-BUILD-DEFINITION))
(proclaim '(special TEA::THEORY-ADD-DEFINITION-AUX))
(proclaim '(special TEA::THEORY-ADD-DEFINITION))
(proclaim '(special TEA::SEXP->DEFINITION))
(proclaim '(special TEA::DEFINITION->SEXP))
(proclaim '(special TEA::MAKE-THEOREM-FOR-DEFINITION))
(proclaim '(special TEA::MAKE-AXIOM-FOR-DEFINITION))
(proclaim '(special TEA::BUILD-DEFINITION))
(proclaim '(special TEA::ADD-SORT-DEFINEDNESS-THEOREM))
(proclaim '(special TEA::PRESERVE-THEORY-LANGUAGE?))
(proclaim '(special TEA::DEFINITION-IMPLICIT-UNFOLDING-MACETE))
(proclaim '(special TEA::DEFINITION-IMPLICIT?))
(proclaim '(special TEA::DEFINITION-USAGE-LIST))
(proclaim '(special TEA::DEFINITION-THEOREMS))
(proclaim '(special TEA::DEFINITION-AXIOM))
(proclaim '(special TEA::DEFINITION-DEFINING-EXPR))
(proclaim '(special TEA::DEFINITION-CONSTANT))
(proclaim '(special TEA::DEFINITION-HOME-THEORY))
(proclaim '(special TEA::MAKE-DEFINITION))
(proclaim '(special TEA::DEFINITION?))
(proclaim '(special TEA::JOIN-D-R-HANDLER-LIST))
(proclaim '(special TEA::D-R-HANDLER-FROM-DEFINITION-RETRIEVE-DS-CS))
(proclaim '(special TEA::D-R-HANDLER-FROM-DEFINITION-RETRIEVE-S-D))
(proclaim '(special TEA::D-R-HANDLER-FROM-DEFINITION-RETRIEVE-V-CS))
(proclaim '(special TEA::D-R-HANDLER-FROM-DEFINITION-RETRIEVE-U-CS))
(proclaim '(special TEA::D-R-HANDLER-FROM-DEFINITION-RETRIEVE-D-CS))
(proclaim '(special TEA::D-R-HANDLER-FROM-DEFINITION-RETRIEVE-?-CS))
(proclaim '(special TEA::D-R-HANDLER-FROM-DEFINITION-RETRIEVE-COERCIONS))
(proclaim '(special TEA::D-R-HANDLER-FROM-DEFINITION-RETRIEVE-FNS))
(proclaim '(special TEA::D-R-HANDLER-FROM-DEFINITION-RETRIEVE-EXPRS))
(proclaim '(special TEA::D-R-HANDLER-FROM-DEFINITION))
(proclaim '(special TEA::THEORY-INSTALL-VALUE-CONDITION-1))
(proclaim '(special TEA::THEORY-INSTALL-VALUE-CONDITION))
(proclaim '(special TEA::THEORY-INSTALL-CONDITIONAL-SORT-COERCION-1))
(proclaim '(special TEA::THEORY-INSTALL-CONDITIONAL-SORT-COERCION))
(proclaim '(special TEA::THEORY-INSTALL-SORT-DEFINEDNESS-CONDITION-1))
(proclaim '(special TEA::THEORY-INSTALL-SORT-DEFINEDNESS-CONDITION))
(proclaim '(special TEA::THEORY-INSTALL-UNDEFINEDNESS-CONDITION-1))
(proclaim '(special TEA::THEORY-INSTALL-UNDEFINEDNESS-CONDITION))
(proclaim '(special TEA::THEORY-INSTALL-DEFINEDNESS-CONDITION-1))
(proclaim '(special TEA::THEORY-INSTALL-DEFINEDNESS-CONDITION))
(proclaim '(special TEA::THEORY-INSTALL-SORT-CONDITION))
(proclaim '(special TEA::THEORY-INSTALL-EVERYWHERE-DEFINEDNESS-CONDITION))
(proclaim '(special TEA::THEORY-INSTALL-NOWHERE-DEFINED-COERCION))
(proclaim '(special TEA::THEORY-INSTALL-EVERYWHERE-DEFINED-COERCION))
(proclaim '(special TEA::THEORY-INSTALL-CONVERGENCE-CONDITION))
(proclaim '(special TEA::THEORY-MAKE-SUMMARILY-DEFINED))
(proclaim '(special TEA::THEORY-VALUE-CONDITION))
(proclaim '(special TEA::THEORY-SORT-DEFINEDNESS-CONDITION))
(proclaim '(special TEA::THEORY-UNDEFINEDNESS-CONDITION))
(proclaim '(special TEA::THEORY-DEFINEDNESS-CONDITION))
(proclaim '(special TEA::THEORY-SUBSORTS))
(proclaim '(special TEA::THEORY-MAKE-COERCION-NOWHERE-DEFINED))
(proclaim '(special TEA::THEORY-MAKE-COERCION-EVERYWHERE-DEFINED))
(proclaim '(special TEA::THEORY-MAKE-DEFINED-SORT-FOR-FN))
(proclaim '(special TEA::THEORY-MAKE-SORT-CLOSED-UNDER-FN))
(proclaim '(special TEA::THEORY-MAKE-FN-EVERYWHERE-DEFINED))
(proclaim '(special TEA::THEORY-INSTALL-SORT-COERCION-CONDITION))
(proclaim '(special TEA::THEORY-SORT-COERCION-CONDITION))
(proclaim '(special TEA::THEORY-COERCION-NOWHERE-DEFINED?))
(proclaim '(special TEA::THEORY-COERCION-EVERYWHERE-DEFINED?))
(proclaim '(special TEA::THEORY-SORT-CLOSED-UNDER-FN?))
(proclaim '(special TEA::THEORY-FN-EVERYWHERE-DEFINED?))
(proclaim '(special TEA::THEORY-SUMMARILY-DEFINED?))
(proclaim '(special TEA::D-R-DEFINED-SORT-FOR-FN?))
(proclaim '(special TEA::D-R-SORT-CLOSED-UNDER-FN?))
(proclaim '(special TEA::D-R-SUMMARILY-DEFINED?))
(proclaim '(special TEA::D-R-SORT-DEFINEDNESS-CONDITION))
(proclaim '(special TEA::D-R-VALUE-CONDITION))
(proclaim '(special TEA::D-R-UNDEFINEDNESS-CONDITION))
(proclaim '(special TEA::D-R-DEFINEDNESS-CONDITION))
(proclaim '(special TEA::D-R-MAKE-SUMMARILY-DEFINED))
(proclaim '(special TEA::D-R-ADD-SORT-DEFINEDNESS-CONDITION))
(proclaim '(special TEA::D-R-ADD-VALUE-CONDITION))
(proclaim '(special TEA::D-R-ADD-UNDEFINEDNESS-CONDITION))
(proclaim '(special TEA::D-R-ADD-DEFINEDNESS-CONDITION))
(proclaim '(special TEA::D-R-SET-SORT-COERCION-CONDITION))
(proclaim '(special TEA::D-R-MAKE-COERCION-NOWHERE-DEFINED))
(proclaim '(special TEA::D-R-MAKE-COERCION-EVERYWHERE-DEFINED))
(proclaim '(special TEA::ALT-COMPLETE-COERCION-ENTRY))
(proclaim '(special TEA::COMPLETE-COERCION-ENTRY))
(proclaim '(special TEA::D-R-MAKE-DEFINED-SORT-FOR-FN))
(proclaim '(special TEA::D-R-MAKE-SORT-CLOSED-UNDER-FN))
(proclaim '(special TEA::D-R-MAKE-FN-EVERYWHERE-DEFINED))
(proclaim '(special TEA::COPY-D-R-HANDLER))
(proclaim '(special TEA::BUILD-D-R-HANDLER))
(proclaim '(special TEA::D-R-HANDLER-THEORY))
(proclaim '(special TEA::D-R-HANDLER-SUMMARILY-DEFINED))
(proclaim '(special TEA::D-R-HANDLER-FN-DEFINED-SORT-ALIST))
(proclaim '(special TEA::D-R-HANDLER-CLOSURE-ALIST))
(proclaim '(special TEA::D-R-HANDLER-VALUE-ALIST))
(proclaim '(special TEA::D-R-HANDLER-UNDEFINEDNESS-ALIST))
(proclaim '(special TEA::D-R-HANDLER-SORT-DEFINEDNESS-ALIST))
(proclaim '(special TEA::D-R-HANDLER-DEFINEDNESS-ALIST))
(proclaim '(special TEA::D-R-HANDLER-CONDITIONALLY-DEFINED-COERCIONS))
(proclaim '(special TEA::D-R-HANDLER-NOWHERE-DEFINED-COERCIONS))
(proclaim '(special TEA::D-R-HANDLER-EVERYWHERE-DEFINED-COERCIONS))
(proclaim '(special TEA::D-R-HANDLER-EVERYWHERE-DEFINED-FNS))
(proclaim '(special TEA::D-R-HANDLER-NAME))
(proclaim '(special TEA::MAKE-D-R-HANDLER))
(proclaim '(special TEA::D-R-HANDLER?))
(proclaim '(special TEA::PUSH-IMPS-SYNTAX))
(proclaim '(special TEA::POP-IMPS-SYNTAX))
(proclaim '(special TEA::SYNTAX-PRINT-PROCEDURE))
(proclaim '(special TEA::SYNTAX-READ-PROCEDURE))
(proclaim '(special TEA::ADD-SYNTAX))
(proclaim '(special TEA::IMPS-SYNTAX-ALIST))
(proclaim '(special TEA::SHORT-LIST-CONSTANTS))
(proclaim '(special TEA::LIST-CONSTANTS))
(proclaim '(special TEA::SEXP->SEQUENT))
(proclaim '(special TEA::SEQUENT->SEXP))
(proclaim '(special TEA::STRING->ASSUMPTIONS))
(proclaim '(special TEA::IMPS-CONTEXT-READER))
(proclaim '(special TEA::IMPS-STRING-FORM-CONTEXT-READER))
(proclaim '(special TEA::START-READING-EXPRESSION-LIST?))
(proclaim '(special TEA::IMPS-SEXP-CONTEXT-READER))
(proclaim '(special TEA::CONTEXT-READER-READ-TABLE))
(proclaim '(special TEA::ASSUMPTIONS->SEXP))
(proclaim '(special TEA::ASSUMPTIONS->STRING))
(proclaim '(special TEA::QP))
(proclaim '(special TEA::QR))
(proclaim '(special TEA::POP-CURRENT-THEORY-AND-SYNTAX))
(proclaim '(special TEA::PUSH-CURRENT-THEORY-AND-SYNTAX))
(proclaim '(special TEA::POP-CURRENT-SYNTAX))
(proclaim '(special TEA::PUSH-CURRENT-SYNTAX))
(proclaim '(special TEA::IMPS-PRINTER-PROC-STACK))
(proclaim '(special TEA::IMPS-READER-PROC-STACK))
(proclaim '(special TEA::IMPS-PRINT-EXPRESSION))
(proclaim '(special TEA::IMPS-EXPRESSION->STRING-PROCEDURE))
(proclaim '(special TEA::IMPS-PRINTER))
(proclaim '(special TEA::IMPS-SEXP-PRINT-PROC))
(proclaim '(special TEA::IMPS-READ-PROCEDURE))
(proclaim '(special TEA::IMPS-READER))
(proclaim '(special TEA::IMPS-SEXP-READ-PROC))
(proclaim '(special TEA::QS->E))
(proclaim '(special TEA::QR-SEXP))
(proclaim '(special TEA::CURRENT-LANGUAGE))
(proclaim '(special TEA::DEFAULT-LANGUAGE))
(proclaim '(special TEA::POP-CURRENT-THEORY))
(proclaim '(special TEA::PUSH-CURRENT-THEORY))
(proclaim '(special TEA::CURRENT-THEORY))
(proclaim '(special TEA::SEXP->WITHLESS-EXPRESSION))
(proclaim '(special TEA::CURRENT-LANGUAGE-DEFAULT-VARIABLES))
(proclaim '(special TEA::GET-LANGUAGE-DEFAULT-VARIABLES))
(proclaim '(special TEA::ADD-LANGUAGE-DEFAULT-SORTING))
(proclaim '(special TEA::DEFAULT-SORTINGS->NAME-VAR-ALIST))
(proclaim '(special TEA::SEXP->EXPRESSION))
(proclaim '(special TEA::EXPRESSION->SEXP-OLD))
(proclaim '(special TEA::EXPRESSION->SEXP))
(proclaim '(special TEA::SYMBOL-MEANS-BINDING-CONSTRUCTOR?))
(proclaim '(special TEA::SYMBOL-MEANS-CONSTRUCTOR-OR-QUASI-CONSTRUCTOR?))
(proclaim '(special TEA::REC-DESCENT-SEXP-DECODER))
(proclaim '(special TEA::FIND-SEXP-CONSTRUCTOR))
(proclaim '(special TEA::SEXP-CONSTRUCTOR+BODY))
(proclaim '(special TEA::SEXP->EXPRESSION-2))
(proclaim '(special TEA::SEXP->EXPRESSION-1))
(proclaim '(special TEA::OLD-DEFAULT-BUILDER))
(proclaim '(special TEA::DEFAULT-BUILDER))
(proclaim '(special TEA::NEW-DEFAULT-BUILDER))
(proclaim '(special TEA::EXPRESSION->WITHFUL-SEXP))
(proclaim '(special TEA::EXPRESSION->SEXP-NEW))
(proclaim '(special TEA::EXPRESSION->WITHLESS-SEXP))
(proclaim '(special TEA::PATHS-AND-SUBSTS-TO-MATCHING-VIRTUAL-OCCURRENCES))
(proclaim '(special TEA::VIRTUAL-PATHS-TO-GOOD-MATCHES))
(proclaim '(special TEA::VIRTUAL-PATHS-TO-SATISFYING-OCCURRENCES))
(proclaim '(special TEA::PATHS-AND-VALUES-TO-SUCCEEDING-VIRTUAL-OCCURRENCES))
(proclaim '(special TEA::PATHS-TO-SATISFYING-VIRTUAL-OCCURRENCES))
(proclaim '(special TEA::SUBSTITUTION-AT-VIRTUAL-PATH))
(proclaim '(special TEA::SORTED-VIRTUAL-PATHS-TO-OCCURRENCES))
(proclaim '(special TEA::EXPAND-VIRTUAL-PATH))
(proclaim '(special TEA::FOLLOW-VIRTUAL-PATH-SAFELY))
(proclaim '(special TEA::FOLLOW-VIRTUAL-PATH))
(proclaim '(special TEA::VIRTUAL-PATHS-TO-OCCURRENCES))
(proclaim '(special TEA::COMPONENTS-FOR-VIRTUAL-OCCURENCES))
(proclaim '(special TEA::BUILD-QUASI-CONSTRUCTOR-FROM-LAMBDA-EXPRESSION))
(proclaim '(special TEA::FIND-QC-COMPONENT-LOCATIONS))
(proclaim '(special TEA::BUILD-QC-INVERSE-PROC))
(proclaim '(special TEA::BUILD-QC-CONSTRUCTOR-PROC))
(proclaim '(special TEA::RETURN-ERROR-STRING))
(proclaim '(special TEA::BUILD-QUASI-CONSTRUCTOR-FROM-SCHEMA))
(proclaim '(special TEA::MAKE-ENCLOSURE-FORMULA))
(proclaim '(special TEA::MAKE-NONEMPTYNESS-FORMULA))
(proclaim '(special TEA::BUILD-QUASI-SORT))
(proclaim '(special TEA::VARIABLES-OF-SORT-OR-QUASI-SORT))
(proclaim '(special TEA::TYPE-OF-SORT-OR-QUASI-SORT-DOMAIN))
(proclaim '(special TEA::SORT-OR-QUASI-SORT-DOMAIN))
(proclaim '(special TEA::THEORY-SORT-OR-QUASI-SORT?))
(proclaim '(special TEA::SORT-OR-QUASI-SORT?))
(proclaim '(special TEA::THEORY-QUASI-SORT?))
(proclaim '(special TEA::QUASI-SORT?))
(proclaim '(special TEA::GENTLY-FLUSH-NOT))
(proclaim '(special TEA::CONJUNCTION-COMPUTE-GENTLY-PUSH-NOT))
(proclaim '(special TEA::GENTLY-PUSH-NOT))
(proclaim '(special TEA::QUASI-EQUATION-RHS))
(proclaim '(special TEA::QUASI-EQUATION-LHS))
(proclaim '(special TEA::EQUATION->QUASI-EQUATION))
(proclaim '(special TEA::QUASI-EQUATION))
(proclaim '(special TEA::QUASI-EQUATION?))
(proclaim '(special TEA::LAMBDA-APPLICATION))
(proclaim '(special TEA::NONVACUOUS?))
(proclaim '(special TEA::TOTALITY-FORMULA))
(proclaim '(special TEA::TOTAL?))
(proclaim '(special TEA::SUB-PREDICATE))
(proclaim '(special TEA::SUB-FUNCTION))
(proclaim '(special TEA::UNDEFINED-OR-FALSELIKE))
(proclaim '(special TEA::FALSELIKE))
(proclaim '(special TEA::FALSELIKE-OF-SORT))
(proclaim '(special TEA::QUASI-EQUALITY-OR-EQUALITY))
(proclaim '(special TEA::QUASI-EQUALITY))
(proclaim '(special TEA::NEGATED-ATOMIC-FORMULA?))
(proclaim '(special TEA::STRICT-SUBEXPRESSION?))
(proclaim '(special TEA::NECESSARILY-FALSE?))
(proclaim '(special TEA::NECESSARILY-UNDEFINED?))
(proclaim '(special TEA::NECESSARILY-DEFINED-IN-SORT?))
(proclaim '(special TEA::NECESSARILY-DEFINED?))
(proclaim '(special TEA::PROPOSITIONAL-CONSTRUCTOR?))
(proclaim '(special TEA::COMPUTE-FLUSH-NOT))
(proclaim '(special TEA::FLUSH-NOT))
(proclaim '(special TEA::CONJUNCTION-COMPUTE-PUSH-NOT))
(proclaim '(special TEA::COMPUTE-PUSH-NOT))
(proclaim '(special TEA::PUSH-NOT))
(proclaim '(special TEA::PREDICATOR-EQUIVALENCE))
(proclaim '(special TEA::DISJOIN-PREDICATES))
(proclaim '(special TEA::CONJOIN-PREDICATES))
(proclaim '(special TEA::JOIN-PREDICATES))
(proclaim '(special TEA::REDUCE-CONJUNCTIONS-AND-UNIVERSALS))
(proclaim '(special TEA::IMMEDIATELY-CONSEQUENT-CONVERGENCES-OLD))
(proclaim '(special TEA::ONE-LAYER-IMMEDIATELY-CONSEQUENT-CONVERGENCES))
(proclaim '(special TEA::IMMEDIATELY-CONSEQUENT-CONVERGENCES))
(proclaim '(special TEA::SUBTERMS-CONSEQUENTLY-DEFINED))
(proclaim '(special TEA::INSISTENTLY-APPLY-OPERATOR))
(proclaim '(special TEA::BUT1STARGS))
(proclaim '(special TEA::2NDARG))
(proclaim '(special TEA::1STARG))
(proclaim '(special TEA::OPERATOR-DEGREE))
(proclaim '(special TEA::APPLICATION?))
(proclaim '(special TEA::NEGATED-CONVERGENCE?))
(proclaim '(special TEA::NEGATED-EQUATION?))
(proclaim '(special TEA::NEGATION-BODY))
(proclaim '(special TEA::NEGATION?))
(proclaim '(special TEA::IOTA-P-EXPRESSION?))
(proclaim '(special TEA::IOTA-EXPRESSION?))
(proclaim '(special TEA::NESTED-QUANTIFIED-VARIABLES))
(proclaim '(special TEA::NESTED-UNIVERSALLY-BOUND-VARIABLES))
(proclaim '(special TEA::NESTED-EXISTENTIALLY-BOUND-VARIABLES))
(proclaim '(special TEA::NESTED-QUANTIFICATION-BOUND-VARIABLES-1))
(proclaim '(special TEA::QUANTIFICATION-MATRIX))
(proclaim '(special TEA::EXISTENTIAL-MATRIX))
(proclaim '(special TEA::UNIVERSAL-MATRIX-RESPECTING-QCS))
(proclaim '(special TEA::UNIVERSAL-MATRIX))
(proclaim '(special TEA::QUANTIFICATION-MATRIX-1))
(proclaim '(special TEA::CLEAN-UNIVERSAL-BODY))
(proclaim '(special TEA::UNIVERSAL-BODY-CLEAN-SUBSTITUTION))
(proclaim '(special TEA::EXISTENTIAL-CLOSURE))
(proclaim '(special TEA::UNIVERSAL-CLOSURE))
(proclaim '(special TEA::QUANTIFIER?))
(proclaim '(special TEA::EXISTENTIAL?))
(proclaim '(special TEA::UNIVERSAL?))
(proclaim '(special TEA::APPLY-OPERATOR-TO-SUBSTITUTION))
(proclaim '(special TEA::LAMBDA-WRAP))
(proclaim '(special TEA::LAMBDA-APPLICATION?))
(proclaim '(special TEA::LAMBDA-EXPRESSION?))
(proclaim '(special TEA::DISJUNCTIVE-COMPONENTS))
(proclaim '(special TEA::DISJUNCTIVE-FORMULA?))
(proclaim '(special TEA::DISJUNCTIVE-CONSTRUCTOR?))
(proclaim '(special TEA::ULTIMATE-DISJUNCTS))
(proclaim '(special TEA::CONJUNCTIVE-COMPONENTS))
(proclaim '(special TEA::ULTIMATE-CONJUNCTS))
(proclaim '(special TEA::REDUCE-CONJUNCTIONS))
(proclaim '(special TEA::EXPRESSION-RHS))
(proclaim '(special TEA::EXPRESSION-LHS))
(proclaim '(special TEA::CONVERGENCE-SORT))
(proclaim '(special TEA::CONVERGENCE-TERM))
(proclaim '(special TEA::CONVERGENCE-IN-SORT?))
(proclaim '(special TEA::CONVERGENCE?))
(proclaim '(special TEA::EQUATION?))
(proclaim '(special TEA::CONDITIONAL-PREDICATOR?))
(proclaim '(special TEA::CONDITIONAL-FORMULA?))
(proclaim '(special TEA::CONDITIONAL-ALTERNATIVE))
(proclaim '(special TEA::CONDITIONAL-CONSEQUENT))
(proclaim '(special TEA::CONDITIONAL-TEST))
(proclaim '(special TEA::CONDITIONAL-TERM?))
(proclaim '(special TEA::CONDITIONAL?))
(proclaim '(special TEA::BICONDITIONAL?))
(proclaim '(special TEA::CONJUNCTION?))
(proclaim '(special TEA::DISJUNCTION?))
(proclaim '(special TEA::IMPLICATION-CONSEQUENT))
(proclaim '(special TEA::IMPLICATION-ANTECEDENT))
(proclaim '(special TEA::IMPLICATION?))
(proclaim '(special TEA::TRUTH-VALUE?))
(proclaim '(special TEA::FALSEHOOD?))
(proclaim '(special TEA::TRUTH?))
(proclaim '(special TEA::WITH))
(proclaim '(special TEA::IOTA-OR-IOTA-P))
(proclaim '(special TEA::IOTA-P))
(proclaim '(special TEA::IOTA))
(proclaim '(special TEA::IMPS-LAMBDA))
(proclaim '(special TEA::FOR-SOME))
(proclaim '(special TEA::FORSOME))
(proclaim '(special TEA::FOR-ALL))
(proclaim '(special TEA::FORALL))
(proclaim '(special TEA::IF-FORM))
(proclaim '(special TEA::IF-PRED))
(proclaim '(special TEA::IF-TERM))
(proclaim '(special TEA::NEGATION))
(proclaim '(special TEA::BICONDITIONAL))
(proclaim '(special TEA::IMPLICATION))
(proclaim '(special TEA::DISJUNCTION))
(proclaim '(special TEA::CONJUNCTION))
(proclaim '(special TEA::FALSEHOOD))
(proclaim '(special TEA::THE-FALSE))
(proclaim '(special TEA::FALSEHOOD-BUILDER))
(proclaim '(special TEA::TRUTH))
(proclaim '(special TEA::THE-TRUE))
(proclaim '(special TEA::TRUTH-BUILDER))
(proclaim '(special TEA::TRIVIAL-DECODER))
(proclaim '(special TEA::UNDEFINED))
(proclaim '(special TEA::UNDEFINED-OF-SORT))
(proclaim '(special TEA::DEFINED-IN))
(proclaim '(special TEA::IS-DEFINED-IN-SORT))
(proclaim '(special TEA::IS-DEFINED))
(proclaim '(special TEA::EQUALITY))
(proclaim '(special TEA::APPLY-OPERATOR))
(proclaim '(special TEA::USE-OLD-APPLY-OPERATOR-FORM?))
(proclaim '(special TEA::GOOD-SORT-PAIR?))
(proclaim '(special TEA::VS-MATCH-MAXIMAL-HIGHER-SORT))
(proclaim '(special TEA::VS-MATCH-NAMED-SORT))
(proclaim '(special TEA::VS-MATCH-SORT))
(proclaim '(special TEA::VARIABLE-SORTS-MATCH-FROM-LISTS-AUX))
(proclaim '(special TEA::VARIABLE-SORTS-MATCH-AUX))
(proclaim '(special TEA::MERGE-SORT-ALISTS))
(proclaim '(special TEA::MERGE-AND-CHECK-SORT-ALISTS))
(proclaim '(special TEA::VARIABLE-SORTS-MATCH-FROM-LISTS))
(proclaim '(special TEA::VARIABLE-SORTS-MATCH))
(proclaim '(special TEA::APPLY-SCHEMATIC-SUBSTITUTION))
(proclaim '(special TEA::SCHEMATIC-MATCH))
(proclaim '(special TEA::SORT-SUBSTITUTE-SORT))
(proclaim '(special TEA::VARIABLE-LIST-SUBSTITUTE-SORTS))
(proclaim '(special TEA::VARIABLE-SUBSTITUTE-SORTS))
(proclaim '(special TEA::EXPRESSION-SUBSTITUTE-SORTS))
(proclaim '(special TEA::BUILD-EXPRESSION-MATCHER-UNSAFE))
(proclaim '(special TEA::BUILD-EXPRESSION-MATCHER))
(proclaim '(special TEA::MATCHER-EXPRESSION))
(proclaim '(special TEA::UNSAFE-MATCH))
(proclaim '(special TEA::PATHS-TO-MATCHES))
(proclaim '(special TEA::MATCHING-SUBEXPRESSION?))
(proclaim '(special TEA::EXPRESSION-MATCHES?))
(proclaim '(special TEA::THEORY-TRIVIALLY-ENTAILS-SUBSTITUTION-DEFINED?))
(proclaim '(special TEA::ALPHA-MATCH-FIND-PATHS-AND-SUBSTS))
(proclaim '(special TEA::PATHS-TO-ALPHA-OCCURRENCES))
(proclaim '(special TEA::MATCH-CHECK?))
(proclaim '(special TEA::LOCATORS-AGREE-IF-FIRST-DEFINED?))
(proclaim '(special TEA::FREE-VARIABLES-FOR-LOCATOR))
(proclaim '(special TEA::FREE-FOR-LOCATOR?))
(proclaim '(special TEA::LOCATOR-ENRICH-SUBSTITUTION))
(proclaim '(special TEA::LOCATORS-AGREE?))
(proclaim '(special TEA::LOCATOR-DEFINED-FOR-VAR?))
(proclaim '(special TEA::LL-RETRIEVE-VAR))
(proclaim '(special TEA::EMPTY-LEXICAL-LOCATOR))
(proclaim '(special TEA::LL-PREPEND-VAR-LIST))
(proclaim '(special TEA::ALPHA-MATCH-VARS?))
(proclaim '(special TEA::ALPHA-MATCH-COMPONENTS))
(proclaim '(special TEA::ALPHA-MATCH-1))
(proclaim '(special TEA::MATCH-WITH-EXOSCOPES-AND-SUBST))
(proclaim '(special TEA::MATCH-UNDER-EXOSCOPES))
(proclaim '(special TEA::ALPHA-EQUIVALENT-1?))
(proclaim '(special TEA::ALPHA-EQUIVALENT?))
(proclaim '(special TEA::COMPUTE-ALPHA-EQUIVALENT?))
(proclaim '(special TEA::USER-ALPHA-EQUIVALENT?))
(proclaim '(special TEA::FIND-ALPHA-ROOT-IN-LIST))
(proclaim '(special TEA::BOUND-VARIABLES-UNIQUE?))
(proclaim '(special TEA::MAKE-BOUND-VARIABLES-UNIQUE))
(proclaim '(special TEA::RESTORE-BOUND-VARIABLES-WHERE-POSSIBLE))
(proclaim '(special TEA::APPLY-BOUND-VARIABLE-RENAMING-SELECTIVELY))
(proclaim '(special TEA::CHANGE-BOUND-VARIABLES-SELECTIVELY))
(proclaim '(special TEA::APPLY-BOUND-VARIABLE-RENAMING-AS-NEEDED))
(proclaim '(special TEA::CHANGE-BOUND-VARIABLES-AS-NEEDED))
(proclaim '(special TEA::APPLY-BOUND-VARIABLE-RENAMING))
(proclaim '(special TEA::CHANGE-BOUND-VARIABLES))
(proclaim '(special TEA::AMBIGUOUSLY-NAMED-VARIABLES))
(proclaim '(special TEA::CHANGE-AMBIGUOUSLY-NAMED-VARIABLES))
(proclaim '(special TEA::APPLY-VARIABLE-RENAMING))
(proclaim '(special TEA::MAKE-VARIABLE-RENAMING))
(proclaim '(special TEA::EXPRESSION-CHANGE-FREE-VARIABLES))
(proclaim '(special TEA::MATCH-PATTERN-WITHIN-HOST-UNDER-EXOSCOPES))
(proclaim '(special TEA::MATCH-WITHIN-HOST-UNDER-EXOSCOPES))
(proclaim '(special TEA::MATCH-CHECK-WITHIN-HOST?))
(proclaim '(special TEA::MATCH-BY-LEADING-CONSTANTS?))
(proclaim '(special TEA::FREE-OCCURRENCE?))
(proclaim '(special TEA::FREE-UNDER-EXOSCOPES?))
(proclaim '(special TEA::RELEVANT-SUBST-COMPONENT?))
(proclaim '(special TEA::SUBSTITUTION-FILTER-RELEVANCE))
(proclaim '(special TEA::FILTER-SUBSTITUTION))
(proclaim '(special TEA::APPLY-SUBST-TO-NON-BINDING-EXP-WITH-EXOSCOPES))
(proclaim '(special TEA::APPLY-SUBST-TO-BINDING-EXP-WITH-EXOSCOPES))
(proclaim '(special TEA::APPLY-SUBST-TO-EXP-WITH-EXOSCOPES))
(proclaim '(special TEA::APPLY-SUBSTITUTION))
(proclaim '(special TEA::APPLY-SUBSTITUTION-AT-PATH))
(proclaim '(special TEA::APPLY-SUBSTITUTION-FASTIDIOUSLY))
(proclaim '(special TEA::CANONICAL-SYMBOL?))
(proclaim '(special TEA::MAKE-CANONICAL-SYMBOL))
(proclaim '(special TEA::MAKE-CANONICAL-VARIABLE))
(proclaim '(special TEA::MAKE-CANONICAL-SUBSTITUTION))
(proclaim '(special TEA::CANONICAL-VARIABLE?))
(proclaim '(special TEA::CANONICALIZE))
(proclaim '(special TEA::FREE-AND-BOUND-VARIABLES-DISJOINT?))
(proclaim '(special TEA::FREE-BY-NAME-FOR?))
(proclaim '(special TEA::VAR-NAMES-DISJOINT?))
(proclaim '(special TEA::FREE-FOR?))
(proclaim '(special TEA::SUBSTITUTION-PRESERVES-SORT-INCLUSIONS?))
(proclaim '(special TEA::SUBSTITUTION-PRESERVES-SORTS?))
(proclaim '(special TEA::SUBST-EQUAL?))
(proclaim '(special TEA::SUBST-INCLUSION?))
(proclaim '(special TEA::MAP-SUBSTITUTION))
(proclaim '(special TEA::EVERY-SUBST-COMPONENT?))
(proclaim '(special TEA::JOINABLE?))
(proclaim '(special TEA::JOIN-TWO-SUBSTITUTIONS))
(proclaim '(special TEA::JOIN-SUBSTITUTIONS))
(proclaim '(special TEA::ONE-COMPONENT-SUBST))
(proclaim '(special TEA::SUBSTITUTION-COMPONENT-COMPATIBLE?))
(proclaim '(special TEA::SUBSTITUTIONS-EQUAL?))
(proclaim '(special TEA::SUB-SUBSTITUTION?))
(proclaim '(special TEA::SUBSTITUTION?))
(proclaim '(special TEA::DELETE-SUBST-COMPONENT))
(proclaim '(special TEA::COMPONENT-OF-SUBST?))
(proclaim '(special TEA::SUBST-RANGE))
(proclaim '(special TEA::SUBST-DOMAIN))
(proclaim '(special TEA::REST-OF-SUBST))
(proclaim '(special TEA::FIRST-SUBST-COMPONENT))
(proclaim '(special TEA::TARGETS-AND-REPLACEMENTS->SUBST))
(proclaim '(special TEA::SUBSTITUTION-EXTEND-WITH-IDENTITY))
(proclaim '(special TEA::SUBSTITUTION-EXTEND))
(proclaim '(special TEA::IDENTITY-SUBSTITUTION?))
(proclaim '(special TEA::IDENTITY-SUBSTITUTION))
(proclaim '(special TEA::ADD-SUBST-COMPONENT))
(proclaim '(special TEA::SUBSTITUTION-FIND-REPLACEMENT))
(proclaim '(special TEA::SUBSTITUTION-FIND-COMPONENT))
(proclaim '(special TEA::SUBST-COMPONENT?))
(proclaim '(special TEA::MAKE-SUBST-COMPONENT))
(proclaim '(special TEA::*SUBSTITUTION-COMPONENT-COUNT*))
(proclaim '(special TEA::MAKE-SUBLANGUAGE))
(proclaim '(special TEA::SHRINK-LANGUAGE))
(proclaim '(special TEA::FIND-BASIC-LANGUAGE))
(proclaim '(special TEA::MAKE-FORMAL-CONSTANTS-IN-NEW-LANGUAGE))
(proclaim '(special TEA::MAKE-FORMAL-CONSTANT-IN-NEW-LANGUAGE))
(proclaim '(special TEA::BASIC-LANGUAGE-FROM-DEFINITION))
(proclaim '(special TEA::SELF-EXTENDING-LANGUAGE-FROM-DEFINITION))
(proclaim '(special TEA::COMPLEX-LANGUAGE-FROM-DEFINITION))
(proclaim '(special TEA::MAKE-LANGUAGE-CONSTANTS))
(proclaim '(special TEA::SORT-RESOLVER-FROM-DEFINITION-PROCESS-SPEC))
(proclaim '(special TEA::SORT-RESOLVER-FROM-DEFINITION))
(proclaim '(special TEA::LANGUAGE-FROM-DEFINITION))
(proclaim '(special TEA::LANGUAGE-DIFFERENCE))
(proclaim '(special TEA::RENAME-IN-LANGUAGE))
(proclaim '(special TEA::RENAME-IN-COMPOUND-LANGUAGE))
(proclaim '(special TEA::RENAME-IN-BASIC-LANGUAGE))
(proclaim '(special TEA::LANGUAGE-UNION))
(proclaim '(special TEA::EXTEND-LANGUAGE))
(proclaim '(special TEA::THE-NULL-LANGUAGE))
(proclaim '(special TEA::LIST-LANGUAGES))
(proclaim '(special TEA::FIND-LANGUAGE))
(proclaim '(special TEA::COMPOUND-LANGUAGE-SORT-NAME-CONFLICT?))
(proclaim '(special TEA::*COMPOUND-LANGUAGE-SORT-NAME-CONFLICT-TABLE*))
(proclaim '(special TEA::COMPOUND-LANGUAGE-CONSTANT-NAME-CONFLICT?))
(proclaim '(special TEA::*COMPOUND-LANGUAGE-CONSTANT-NAME-CONFLICT-TABLE*))
(proclaim '(special TEA::COMPOUND-LANGUAGE))
(proclaim '(special TEA::COMPOUND-LANGUAGE-SELF-EXTENDING-LANGUAGES))
(proclaim '(special TEA::SELF-EXTENDING-LANGUAGE-CONST-NAME->SORTING))
(proclaim '(special TEA::MAKE-SELF-EXTENDING-BASIC-LANGUAGE))
(proclaim '(special TEA::MAKE-BASIC-LANGUAGE))
(proclaim '(special TEA::NAME->LANGUAGE))
(proclaim '(special TEA::COMPOUND-EXPRESSION))
(proclaim '(special TEA::LANGUAGE-CONTAINS-SORTING?))
(proclaim '(special TEA::CONTAINS-EXPRESSION?))
(proclaim '(special TEA::COMPUTE-HOME-LANGUAGE))
(proclaim '(special TEA::FIND-CONSTANT-WITH-WARNING))
(proclaim '(special TEA::FIND-CONSTANT))
(proclaim '(special TEA::SUB-LANGUAGE?))
(proclaim '(special TEA::BASIC-LANGUAGES))
(proclaim '(special TEA::LANGUAGE?))
(proclaim '(special TEA::COMPOUND-LANGUAGE-DEFINING-FORM))
(proclaim '(special TEA::COMPOUND-LANGUAGE-TABLE-HASH))
(proclaim '(special TEA::COMPOUND-LANGUAGE-NAME))
(proclaim '(special TEA::COMPOUND-LANGUAGE-EXTRA-RESOLVER))
(proclaim '(special TEA::COMPOUND-LANGUAGE-RESOLVER))
(proclaim '(special TEA::COMPOUND-LANGUAGE-DEFAULT-SORTING-ALIST))
(proclaim '(special TEA::COMPOUND-LANGUAGE-CONSTANTS))
(proclaim '(special TEA::COMPOUND-LANGUAGE-BASE-SORTS))
(proclaim '(special TEA::COMPOUND-LANGUAGE-BASIC-LANGUAGES))
(proclaim '(special TEA::MAKE-COMPOUND-LANGUAGE))
(proclaim '(special TEA::COMPOUND-LANGUAGE?))
(proclaim '(special TEA::LANGUAGE-SORTING->NUMERICAL-TYPE))
(proclaim '(special TEA::LANGUAGE-NUMERICAL-TYPE->SORTING))
(proclaim '(special TEA::LANGUAGE-PREDICATE-SORTING-ALIST))
(proclaim '(special TEA::PREDICATE-SORTING-ALIST->SEXP))
(proclaim '(special TEA::LANGUAGE-DEFINING-FORM))
(proclaim '(special TEA::LANGUAGE-DEFAULT-SORTINGS))
(proclaim '(special TEA::SORT-SYMBOLS))
(proclaim '(special TEA::LANGUAGE-CONSTANTS))
(proclaim '(special TEA::BASIC-LANGUAGE?))
(proclaim '(special TEA::WALK-COMPOUND-EXPRESSION-LISTS))
(proclaim '(special TEA::COUNT-IMPS-EXPRESSIONS))
(proclaim '(special TEA::WALK-COMPOUND-EXPRESSIONS))
(proclaim '(special TEA::INSERT-IN-COMPOUND-TABLE))
(proclaim '(special TEA::RETRIEVE-FROM-COMPOUND-TABLE))
(proclaim '(special TEA::*COMPOUND-EXPRESSION-TABLE*))
(proclaim '(special TEA::INSTALL-CONSTANTS-IN-CHART))
(proclaim '(special TEA::RETRIEVE-OR-ADD-FORMAL-SYMBOL))
(proclaim '(special TEA::GLEAN-FORMAL-SYMBOLS-FROM-CHART))
(proclaim '(special TEA::RETRIEVE-FORMAL-SYMBOL))
(proclaim '(special TEA::ADD-FORMAL-SYMBOL-TO-CHART))
(proclaim '(special TEA::MAKE-FORMAL-SYMBOL-CHART))
(proclaim '(special TEA::FORMAL-SYMBOL-CHART-ASS))
(proclaim '(special TEA::MARK-VARIABLES))
(proclaim '(special TEA::MARK-VARIABLE))
(proclaim '(special TEA::VAR-LIST->NEW-VARIABLES))
(proclaim '(special TEA::SORTS-AND-NAMES->NEW-VARIABLES))
(proclaim '(special TEA::SORTS->NEW-VARIABLES))
(proclaim '(special TEA::UNDOLLAR-VARIABLE))
(proclaim '(special TEA::STRING-VAR-ROOT))
(proclaim '(special TEA::LAST-$-POS))
(proclaim '(special TEA::CLIP-AT-LAST-$))
(proclaim '(special TEA::FIND-VARIABLE))
(proclaim '(special TEA::*IMPS-VARIABLE-TABLE*))
(proclaim '(special TEA::LAMBDA-APPLICATION-INVERSE))
(proclaim '(special TEA::LAMBDA-APPLICATION-CONSTRUCTOR-PROC))
(proclaim '(special TEA::NONVACUOUS?-INVERSE))
(proclaim '(special TEA::NONVACUOUS?-CONSTR-PROC))
(proclaim '(special TEA::TOTAL-IN-SORT?-INVERSE))
(proclaim '(special TEA::TOTAL-IN-SORT?-CONSTR-PROC))
(proclaim '(special TEA::TOTAL?-INVERSE))
(proclaim '(special TEA::TOTAL?-CONSTR-PROC))
(proclaim '(special TEA::RANGE-INVERSE))
(proclaim '(special TEA::RANGE-CONSTR-PROC))
(proclaim '(special TEA::DOMAIN-INVERSE))
(proclaim '(special TEA::DOMAIN-CONSTR-PROC))
(proclaim '(special TEA::FALSELIKE-OF-SORT-SEXP-DECODER))
(proclaim '(special TEA::FALSELIKE-OF-SORT-SEXP-BUILDER))
(proclaim '(special TEA::FALSELIKE-OF-SORT-INVERSE))
(proclaim '(special TEA::FALSELIKE-OF-SORT-CONSTR-PROC))
(proclaim '(special TEA::SUB-PREDICATE-INVERSE))
(proclaim '(special TEA::SUB-PREDICATE-CONSTR-PROC))
(proclaim '(special TEA::SUB-FUNCTION-INVERSE))
(proclaim '(special TEA::SUB-FUNCTION-CONSTR-PROC))
(proclaim '(special TEA::QUASI-EQUATION-CONSTR-PROC))
(proclaim '(special TEA::QUASI-EQUATION-INVERSE))
(proclaim '(special TEA::SEPARATE-ANTECEDENT-AND-CONSEQUENT))
(proclaim '(special TEA::CARRY-OUT-SEPARATION))
(proclaim '(special TEA::SEPARATE-BOUND-VARIABLES))
(proclaim '(special TEA::REMOVE-LEADING-WITHS))
(proclaim '(special TEA::WITH-SEXP-BUILDER))
(proclaim '(special TEA::WITH-SEXP-DECODER))
(proclaim '(special TEA::IOTA-P-COMPONENT-CHECKER))
(proclaim '(special TEA::IOTA-COMPONENT-CHECKER))
(proclaim '(special TEA::UNDEFINED-OF-SORT-COMPONENT-CHECKER))
(proclaim '(special TEA::UNDEFINED-OF-SORT-SEXP-DECODER))
(proclaim '(special TEA::UNDEFINED-OF-SORT-SEXP-BUILDER))
(proclaim '(special TEA::*IN-SORT-PREFERRED-VARNAME*))
(proclaim '(special TEA::IS-DEFINED-IN-SORT-SEXP-DECODER))
(proclaim '(special TEA::IS-DEFINED-IN-SORT-SEXP-BUILDER))
(proclaim '(special TEA::IS-DEFINED-IN-SORT-COMPONENT-CHECKER))
(proclaim '(special TEA::LAMBDA-COMPONENT-CHECKER))
(proclaim '(special TEA::QUANTIFIER-DECODE-VAR-SUB-LIST))
(proclaim '(special TEA::QUANTIFIER-DECODE-VAR-LIST))
(proclaim '(special TEA::QUANTIFIER-SEXP-DECODER))
(proclaim '(special TEA::PARTITION-LIST-IN-PLACE))
(proclaim '(special TEA::VAR-LIST->SEXP))
(proclaim '(special TEA::QUANTIFIER-SEXP-VAR-LIST-CONFLICTS))
(proclaim '(special TEA::QUANTIFIER-SEXP-BUILDER))
(proclaim '(special TEA::QUANTIFIER-COMPONENT-CHECKER))
(proclaim '(special TEA::BINDING-BINDER))
(proclaim '(special TEA::BINDING-BODY))
(proclaim '(special TEA::BINDING-VARIABLES))
(proclaim '(special TEA::OMIT-NAME-SEXP-BUILDER))
(proclaim '(special TEA::APPLY-OPERATOR-CHECKER))
(proclaim '(special TEA::BINARY-INFIX-SEXP-BUILDER))
(proclaim '(special TEA::TWO-SIMILARLY-SORTED-PREDICATORS))
(proclaim '(special TEA::PREDICATOR-FROM-FORMULA-AND-TWO-PREDICATORS))
(proclaim '(special TEA::FORMULA-FROM-THREE-FORMULAS))
(proclaim '(special TEA::EXPR-FROM-FORMULA-AND-TWO-LIKE-EXPRS))
(proclaim '(special TEA::NO-FORMULAS))
(proclaim '(special TEA::FORMULA-FROM-ONE-COMP))
(proclaim '(special TEA::FORMULA-FROM-TERM-OR-FN))
(proclaim '(special TEA::EQUALITY-COMPONENT-CHECKER))
(proclaim '(special TEA::TWO-SIMILARLY-SORTED-TERMS))
(proclaim '(special TEA::FORMULA-FROM-TWO-SAME-SORTED-TERMS-OR-FNS))
(proclaim '(special TEA::TWO-SAME-SORTED-TERMS-OR-FNS))
(proclaim '(special TEA::TWO-LIKE-SORTED-EXPRS))
(proclaim '(special TEA::TWO-SAME-SORTED-PREDICATORS))
(proclaim '(special TEA::TWO-SAME-SORTED-TERMS))
(proclaim '(special TEA::JUST-TWO-FORMULAS))
(proclaim '(special TEA::JUST-ONE-FORMULA))
(proclaim '(special TEA::ONLY-FORMULAS))
(proclaim '(special TEA::SAME-SORTED))
(proclaim '(special TEA::SORT-COERCION-ACTION))
(proclaim '(special TEA::INSTALL-IN-COERCION-TABLE))
(proclaim '(special TEA::PRESENT-IN-COERCION-TABLE?))
(proclaim '(special TEA::COERCION-TABLE))
(proclaim '(special TEA::OMIT-ALL-COERCION-WARNINGS?))
(proclaim '(special TEA::OMIT-REDUNDANT-COERCION-WARNINGS))
(proclaim '(special TEA::OLD-VAR-LISTS?))
(proclaim '(special TEA::QUASI-CONSTRUCTOR-EQUIVALENCE-RELATION?))
(proclaim '(special TEA::MAKE-QUASI-CONSTRUCTOR-EQUIVALENCE-RELATION))
(proclaim '(special TEA::QC-EQUIVALENCE-RELATION-TABLE))
(proclaim '(special TEA::RESET-QUASI-CONSTRUCTORS))
(proclaim '(special TEA::*DISABLED-QCS-NAMES*))
(proclaim '(special TEA::EXPRESSION-QUASI-CONSTRUCTOR-IF-ENABLED-OR-CONSTRUCTOR))
(proclaim '(special TEA::EXPRESSION-QUASI-COMPONENTS-IF-ENABLED-OR-COMPONENTS))
(proclaim '(special TEA::EXPRESSION-QUASI-COMPONENTS-IF-ENABLED))
(proclaim '(special TEA::EXPRESSION-QUASI-CONSTRUCTOR-IF-ENABLED-&-COMPONENTS))
(proclaim '(special TEA::EXPRESSION-QUASI-CONSTRUCTOR-IF-ENABLED))
(proclaim '(special TEA::QUASI-CONSTRUCTOR-IF-ENABLED))
(proclaim '(special TEA::ENABLE-QUASI-CONSTRUCTOR))
(proclaim '(special TEA::DISABLE-QUASI-CONSTRUCTOR))
(proclaim '(special TEA::*DISABLED-QUASI-CONSTRUCTORS*))
(proclaim '(special TEA::USE-QUASI-CONSTRUCTOR-FORM?))
(proclaim '(special TEA::RECURSIVE-QUASI-CONSTRUCTOR-SIMPLIFY))
(proclaim '(special TEA::QUASI-CONSTRUCTOR-SIMPLIFY))
(proclaim '(special TEA::EXPRESSION-QUASI-CONSTRUCTORS))
(proclaim '(special TEA::EXPRESSION-QUASI-CONSTRUCTORS-AND-CONSTRUCTOR))
(proclaim '(special TEA::EXPRESSION-QUASI-CONSTRUCTOR-OR-CONSTRUCTOR))
(proclaim '(special TEA::EXPRESSION-QUASI-COMPONENTS-OR-COMPONENTS))
(proclaim '(special TEA::EXPRESSION-QUASI-COMPONENTS))
(proclaim '(special TEA::EXPRESSION-QUASI-CONSTRUCTOR))
(proclaim '(special TEA::EXPRESSION-QUASI-CONSTRUCTOR-&-COMPONENTS))
(proclaim '(special TEA::MAKE-QUASI-CONSTRUCTOR))
(proclaim '(special TEA::MAKE-QUASI-CONSTRUCTOR-CONSTANTLIKE))
(proclaim '(special TEA::QUASI-CONSTRUCTOR-CONSTANTLIKE?))
(proclaim '(special TEA::QUASI-CONSTRUCTOR-PATHS-TO-QUASI-COMPONENTS))
(proclaim '(special TEA::SYMBOL->QUASI-CONSTRUCTOR))
(proclaim '(special TEA::NAME->QUASI-CONSTRUCTOR))
(proclaim '(special TEA::*QUASI-CONSTRUCTORS*))
(proclaim '(special TEA::BUILD-EXPRESSION-MAYBE))
(proclaim '(special TEA::QUASI-CONSTRUCTOR-INVERSE))
(proclaim '(special TEA::QUASI-CONSTRUCTOR?))
(proclaim '(special TEA::RECURSIVE-CONSTRUCTOR-SIMPLIFY))
(proclaim '(special TEA::CONSTRUCTOR-SIMPLIFY))
(proclaim '(special TEA::BOOLEAN-COMBINATION?))
(proclaim '(special TEA::QUANTIFICATION?))
(proclaim '(special TEA::MAKE-TRANSPARENT-CONSTRUCTOR))
(proclaim '(special TEA::TRANSPARENT-CONSTRUCTOR?))
(proclaim '(special TEA::CONSTRUCTOR-CONFLICTING-VARS))
(proclaim '(special TEA::*CONSTRUCTOR-CONFLICTING-VARS-TABLE*))
(proclaim '(special TEA::*ALPHA-ROOT-TABLE*))
(proclaim '(special TEA::COMPUTE-EXPRESSION-ALPHA-ROOT))
(proclaim '(special TEA::MAKE-CONSTRUCTOR))
(proclaim '(special TEA::CONSTRUCTOR-HASH))
(proclaim '(special TEA::SET-CONSTRUCTOR-LOGICAL-TRANSFORM))
(proclaim '(special TEA::SET-CONSTRUCTOR-SYLLOGISTIC-INFERENCE))
(proclaim '(special TEA::SET-CONSTRUCTOR-TRUTH-VALUE-SEEKER))
(proclaim '(special TEA::SET-CONSTRUCTOR-ANTECEDENT-INFERENCE))
(proclaim '(special TEA::SET-CONSTRUCTOR-DIRECT-INFERENCE))
(proclaim '(special TEA::SET-CONSTRUCTOR-PARITY))
(proclaim '(special TEA::SET-CONSTRUCTOR-SIMPLIFIER))
(proclaim '(special TEA::SET-CONSTRUCTOR-LC-INCREMENTER))
(proclaim '(special TEA::CONSTRUCTOR-LOGICAL-TRANSFORM))
(proclaim '(special TEA::CONSTRUCTOR-TRUTH-VALUE-SEEKER))
(proclaim '(special TEA::CONSTRUCTOR-SYLLOGISTIC-INFERENCE))
(proclaim '(special TEA::CONSTRUCTOR-ANTECEDENT-INFERENCE))
(proclaim '(special TEA::CONSTRUCTOR-DIRECT-INFERENCE))
(proclaim '(special TEA::CONSTRUCTOR-PARITY))
(proclaim '(special TEA::CONSTRUCTOR-SIMPLIFIER))
(proclaim '(special TEA::CONSTRUCTOR-LC-INCREMENTER))
(proclaim '(special TEA::SET-SEXP-DECODER))
(proclaim '(special TEA::SET-SEXP-BUILDER))
(proclaim '(special TEA::SYMBOL->CONSTRUCTOR))
(proclaim '(special TEA::GCT-ENTRY-VALUE))
(proclaim '(special TEA::GCT-ENTRY-LOGICAL-TRANSFORM))
(proclaim '(special TEA::GCT-ENTRY-TRUTH-VALUE-SEEKER))
(proclaim '(special TEA::GCT-ENTRY-SYLLOGISTIC-INFERENCE))
(proclaim '(special TEA::GCT-ENTRY-ANTECEDENT-INFERENCE))
(proclaim '(special TEA::GCT-ENTRY-DIRECT-INFERENCE))
(proclaim '(special TEA::GCT-ENTRY-PARITY))
(proclaim '(special TEA::GCT-ENTRY-SIMPLIFIER))
(proclaim '(special TEA::GCT-ENTRY-LOCAL-CONTEXT-INCREMENTER))
(proclaim '(special TEA::GCT-ENTRY-SEXP-BUILDER))
(proclaim '(special TEA::GCT-ENTRY-SEXP-DECODER))
(proclaim '(special TEA::MAKE-GCT-ENTRY))
(proclaim '(special TEA::GCT-ENTRY?))
(proclaim '(special TEA::BINDING-EXPRESSION?))
(proclaim '(special TEA::NON-BINDING-CONSTRUCTOR?))
(proclaim '(special TEA::BINDING-CONSTRUCTOR?))
(proclaim '(special TEA::CONSTRUCTOR?))
(proclaim '(special TEA::*CONSTRUCTORS*))
(proclaim '(special TEA::MAKE-EXPRESSION-TABLE))
(proclaim '(special TEA::PATH-SUCCESSOR!))
(proclaim '(special TEA::EXPRESSION-OF-CATEGORY-PROP?))
(proclaim '(special TEA::EXPRESSION-OF-CATEGORY-IND?))
(proclaim '(special TEA::SUBEXPRESSION-SATISFIES?))
(proclaim '(special TEA::PATHS-TO-SATISFACTION))
(proclaim '(special TEA::SUBSTITUTIONS-AT-PATHS))
(proclaim '(special TEA::SAP-FILTER-LOPL))
(proclaim '(special TEA::SAP-ACCUMULATE-NILS))
(proclaim '(special TEA::SUBSTITUTION-AT-PATH))
(proclaim '(special TEA::SORTED-PATHS-TO-OCCURRENCES))
(proclaim '(special TEA::PATHS-TO-OCCURRENCES))
(proclaim '(special TEA::PROPER-SUBEXPRESSION?))
(proclaim '(special TEA::SUBEXPRESSION?))
(proclaim '(special TEA::BOUND-VARIABLES-ON-PATH))
(proclaim '(special TEA::HOST-AND-PATH-AFTER-STEP))
(proclaim '(special TEA::FOLLOW-PATH))
(proclaim '(special TEA::FUNCTION-CONSTANT?))
(proclaim '(special TEA::NUMERICAL-CONSTANT?))
(proclaim '(special TEA::FLOATING-POINT-CONSTANT?))
(proclaim '(special TEA::INTEGER-CONSTANT?))
(proclaim '(special TEA::NONNEGATIVE-INTEGER-CONSTANT?))
(proclaim '(special TEA::RATIONAL-CONSTANT?))
(proclaim '(special TEA::CONSTANT?))
(proclaim '(special TEA::VARIABLE?))
(proclaim '(special TEA::FORMAL-SYMBOL?))
(proclaim '(special TEA::MAKE-FORMAL-SYMBOL))
(proclaim '(special TEA::COMPARE-POSSIBLE-SYMBOL-FORMS))
(proclaim '(special TEA::POSSIBLE-SYMBOL-FORM?))
(proclaim '(special TEA::SEEK-SYMBOL-FORM))
(proclaim '(special TEA::INSTALL-SYMBOL-FORM))
(proclaim '(special TEA::RETRIEVE-SYMBOL-FORM))
(proclaim '(special TEA::IMPS-SYMBOL-FORM-TABLE))
(proclaim '(special TEA::HEREDITARILY-PROP-FREE?))
(proclaim '(special TEA::ATOMIC-FORMULA?))
(proclaim '(special TEA::SENTENCE?))
(proclaim '(special TEA::CLOSED?))
(proclaim '(special TEA::FORMAL-SYMBOLS))
(proclaim '(special TEA::NEWLY-BOUND-VARIABLES))
(proclaim '(special TEA::BOUND-VARIABLES))
(proclaim '(special TEA::FREE-VARIABLES))
(proclaim '(special TEA::EXPRESSION-CATEGORY))
(proclaim '(special TEA::EXPRESSION-TYPE))
(proclaim '(special TEA::EXPRESSION-SORTING-NECESSARILY-WITHIN?))
(proclaim '(special TEA::RANGE-TYPE))
(proclaim '(special TEA::EXPRESSION-RANGE))
(proclaim '(special TEA::DOMAIN-TYPES))
(proclaim '(special TEA::ARITY))
(proclaim '(special TEA::TERM-OR-FN?))
(proclaim '(special TEA::FUNCTION?))
(proclaim '(special TEA::FORMULA-OR-PREDICATOR?))
(proclaim '(special TEA::PREDICATOR?))
(proclaim '(special TEA::BINARY-PREDICATE?))
(proclaim '(special TEA::UNARY-PREDICATE-DOMAIN))
(proclaim '(special TEA::UNARY-PREDICATE?))
(proclaim '(special TEA::TERM?))
(proclaim '(special TEA::FORMULA?))
(proclaim '(special TEA::HOME-LANGUAGE))
(proclaim '(special TEA::EXPRESSION-LIST?))
(proclaim '(special TEA::HASH-COMBINE-EXPRS))
(proclaim '(special TEA::ALPHA-HASH-COMBINE-EXPRS))
(proclaim '(special TEA::IMPS-HASH))
(proclaim '(special TEA::COMPUTE-IMPS-HASH))
(proclaim '(special TEA::EXPRESSION-PRINT-METHOD))
(proclaim '(special TEA::TREAT-QCS-SPECIALLY?))
(proclaim '(special TEA::USE-STRING-FORM?))
(proclaim '(special TEA::EXPRESSION-SECOND-LEAD-CONSTANT))
(proclaim '(special TEA::LEAD-CONSTANT?))
(proclaim '(special TEA::EXPRESSION-DESCRIPTOR-HASH))
(proclaim '(special TEA::EXPRESSION-ALPHA-ROOT))
(proclaim '(special TEA::EXPRESSION-ALPHA-HASH))
(proclaim '(special TEA::EXPRESSION-HEREDITARILY-PROP-FREE?))
(proclaim '(special TEA::EXPRESSION-NECESSARILY-UNDEFINED?))
(proclaim '(special TEA::EXPRESSION-FLUSHED-NOT))
(proclaim '(special TEA::EXPRESSION-PUSHED-NOT))
(proclaim '(special TEA::EXPRESSION-HASH))
(proclaim '(special TEA::EXPRESSION-HEIGHT))
(proclaim '(special TEA::EXPRESSION-HOME))
(proclaim '(special TEA::EXPRESSION-SORTING))
(proclaim '(special TEA::EXPRESSION-VAR-NAME-CONFLICT?))
(proclaim '(special TEA::EXPRESSION-LEAD-CONSTANT))
(proclaim '(special TEA::EXPRESSION-CONSTANTS))
(proclaim '(special TEA::EXPRESSION-VARIABLES))
(proclaim '(special TEA::EXPRESSION-NEWLY-BOUND-VARIABLES))
(proclaim '(special TEA::EXPRESSION-BOUND-VARIABLES))
(proclaim '(special TEA::EXPRESSION-FREE-VARIABLES))
(proclaim '(special TEA::EXPRESSION-QCS))
(proclaim '(special TEA::EXPRESSION-CONSTRUCTOR))
(proclaim '(special TEA::EXPRESSION-COMPONENTS))
(proclaim '(special TEA::EXPRESSION-NAME))
(proclaim '(special TEA::MAKE-EXPRESSION))
(proclaim '(special TEA::EXPRESSION?))
(proclaim '(special TEA::MAKE-SORTING-HASH-TABLE))
(proclaim '(special TEA::SORTING-LIST-LEQ))
(proclaim '(special TEA::BIG-SORTING-LUB))
(proclaim '(special TEA::CONTAINS-SORT?))
(proclaim '(special TEA::ENCLOSING-MAXIMAL-HIGHER-SORT))
(proclaim '(special TEA::NOMINAL-UPPER-BOUND))
(proclaim '(special TEA::COMMON-ENCLOSING-SORT-LIST))
(proclaim '(special TEA::COMMON-ENCLOSING-SORT))
(proclaim '(special TEA::BUILD-NEW-SORT))
(proclaim '(special TEA::LIST->SORT))
(proclaim '(special TEA::MAKE-SORT-RESOLVER-FROM-NAMED-SORTS))
(proclaim '(special TEA::SUBTRACT-SORT-RESOLVERS))
(proclaim '(special TEA::JOIN-SORT-RESOLVERS))
(proclaim '(special TEA::RENAME-SORT-RESOLVER))
(proclaim '(special TEA::EXTEND-SORT-RESOLVER))
(proclaim '(special TEA::NULL-SORT-RESOLVER))
(proclaim '(special TEA::MAKE-TYPE-RESOLVER))
(proclaim '(special TEA::NAME-SORT-ALIST))
(proclaim '(special TEA::SORTS-RESOLVED))
(proclaim '(special TEA::SORT-NAMES-RESOLVED))
(proclaim '(special TEA::NAME->SORT))
(proclaim '(special TEA::SORT-RESOLVER?))
(proclaim '(special TEA::SINGLE-SORTED-LIST?))
(proclaim '(special TEA::SAME-SORTED?))
(proclaim '(special TEA::SORTING-PERMISSIBLE?))
(proclaim '(special TEA::HEREDITARY-TYPE-DOMAINS))
(proclaim '(special TEA::HEREDITARY-SORT-DOMAINS))
(proclaim '(special TEA::SORT->LIST))
(proclaim '(special TEA::COLLECT-NAMED-SORTS))
(proclaim '(special TEA::SORTINGS-EQUAL?))
(proclaim '(special TEA::EQUAL-SORTINGS?))
(proclaim '(special TEA::SORTS-NECESSARILY-DISJOINT?))
(proclaim '(special TEA::SORTS-MAY-OVERLAP?))
(proclaim '(special TEA::SORT-NECESSARILY-INCLUDED?))
(proclaim '(special TEA::IMMEDIATELY-ENCLOSING-SORTS))
(proclaim '(special TEA::COMPUTE-SORTING-LUB))
(proclaim '(special TEA::SORTING-LEQ))
(proclaim '(special TEA::SORTING-LUB))
(proclaim '(special TEA::*SORTING-LUBS*))
(proclaim '(special TEA::SORTING?))
(proclaim '(special TEA::PRINT-SORTS-VERBOSELY?))
(proclaim '(special TEA::HIGHER-SORT-EXHAUSTS-DOMAINS->RANGE?))
(proclaim '(special TEA::BUILD-HIGHER-SORT))
(proclaim '(special TEA::BUILD-MAXIMAL-HIGHER-SORT))
(proclaim '(special TEA::NON-NULLARY-AND-DOMAINS-ARE-SORTS?))
(proclaim '(special TEA::RETRIEVE-HIGHER-SORT))
(proclaim '(special TEA::HIGHER-SORT-TABLE))
(proclaim '(special TEA::RENAME-HIGHER-SORT))
(proclaim '(special TEA::RENAME-SORT))
(proclaim '(special TEA::IND-SORTING?))
(proclaim '(special TEA::PROP-SORTING?))
(proclaim '(special TEA::FLOATING-SORT?))
(proclaim '(special TEA::SORT-ALPHA-HASH))
(proclaim '(special TEA::NUMERICAL?))
(proclaim '(special TEA::TYPE-OF-SORT))
(proclaim '(special TEA::SORT-IS-TYPE?))
(proclaim '(special TEA::SORT-CATEGORY))
(proclaim '(special TEA::SORT?))
(proclaim '(special TEA::HIGHER-SORT-IS-TYPE?))
(proclaim '(special TEA::SORT-LEVEL))
(proclaim '(special TEA::HIGHER-SORT-ALPHA-HASH))
(proclaim '(special TEA::HIGHER-SORT-NUMERICAL?))
(proclaim '(special TEA::HIGHER-SORT-BASES))
(proclaim '(special TEA::HIGHER-SORT-LEVEL))
(proclaim '(special TEA::HIGHER-SORT-ENCLOSING-SORT))
(proclaim '(special TEA::HIGHER-SORT-TYPE))
(proclaim '(special TEA::HIGHER-SORT-CATEGORY))
(proclaim '(special TEA::HIGHER-SORT-DOMAINS))
(proclaim '(special TEA::HIGHER-SORT-RANGE))
(proclaim '(special TEA::HIGHER-SORT-NAME))
(proclaim '(special TEA::MAKE-HIGHER-SORT))
(proclaim '(special TEA::HIGHER-SORT?))
(proclaim '(special TEA::RENAME-BASE-SORT))
(proclaim '(special TEA::BASE-SORT-FLOATS?))
(proclaim '(special TEA::BASE-SORT-IS-TYPE?))
(proclaim '(special TEA::PROP))
(proclaim '(special TEA::IND))
(proclaim '(special TEA::BUILD-BASE-TYPE))
(proclaim '(special TEA::BUILD-BASE-SORT))
(proclaim '(special TEA::RETRIEVE-BASE-SORT))
(proclaim '(special TEA::BASE-SORT-TABLE))
(proclaim '(special TEA::BASE-SORT-ALPHA-HASH))
(proclaim '(special TEA::BASE-SORT-NUMERICAL?))
(proclaim '(special TEA::BASE-SORT-ENCLOSING-SORT))
(proclaim '(special TEA::BASE-SORT-TYPE))
(proclaim '(special TEA::BASE-SORT-CATEGORY))
(proclaim '(special TEA::BASE-SORT-NAME))
(proclaim '(special TEA::MAKE-BASE-SORT))
(proclaim '(special TEA::BASE-SORT?))
(proclaim '(special TEA::BASE-SORTS))
(proclaim '(special TEA::ADD-ELEMENT-TO-PARTITION-CLASS))
(proclaim '(special TEA::MERGE-PARTITION-CLASSES))
(proclaim '(special TEA::PARTITION-SET))
(proclaim '(special TEA::MERGE-PARTITIONS))
(proclaim '(special TEA::MAKE-PARTITION))
(proclaim '(special TEA::CONTAINING-SET))
(proclaim '(special TEA::COLLECT-SET))
(proclaim '(special TEA::SELECT-SET-ELEMENT))
(proclaim '(special TEA::SET-SPLIT))
(proclaim '(special TEA::SET-SEPARATE))
(proclaim '(special TEA::BIG-CAP))
(proclaim '(special TEA::BIG-U))
(proclaim '(special TEA::NON-NULL-INTERSECTION?))
(proclaim '(special TEA::NULL-INTERSECTION?))
(proclaim '(special TEA::SET-WALK))
(proclaim '(special TEA::SET-MAP))
(proclaim '(special TEA::ANY-SET-ELEMENT?))
(proclaim '(special TEA::EVERY-SET-ELEMENT?))
(proclaim '(special TEA::CARDINALITY))
(proclaim '(special TEA::FILTER-LIST))
(proclaim '(special TEA::RETRIEVE-UNUSED-NAME))
(proclaim '(special TEA::MAP-ALTERNATE-INSERT))
(proclaim '(special TEA::ALTERNATE-INSERT))
(proclaim '(special TEA::MAKE-ANONYMOUS-NAME))
(proclaim '(special TEA::ANONYMOUS-NAME?))
(proclaim '(special TEA::LIST-DIFFERENCE))
(proclaim '(special TEA::CHOOSE-LIST-ENTRIES))
(proclaim '(special TEA::REPLACE-LIST-ENTRIES))
(proclaim '(special TEA::BIG-PRODUCT))
(proclaim '(special TEA::REPLACE-NTH))
(proclaim '(special TEA::TRUE-ASSOCIATION-LIST?))
(proclaim '(special TEA::PATH-EXTENDS?))
(proclaim '(special TEA::EXTRACT-MINIMAL-DISJOINT-PATHS))
(proclaim '(special TEA::EXTRACT-DISJOINT-PATHS))
(proclaim '(special TEA::SORT-PATHS-1!))
(proclaim '(special TEA::SORT-PATHS!))
(proclaim '(special TEA::SORT-PATHS))
(proclaim '(special TEA::RETRIEVE-OBJECT-FROM-USER))
(proclaim '(special TEA::PRINT-TABLE))
(proclaim '(special TEA::TWO-D-TABLE-HASH))
(proclaim '(special TEA::SETTABLE-SYMBOL-ALIST))
(proclaim '(special TEA::SETTABLE-ALIST))
(proclaim '(special TEA::REDUCE-MAP))
(proclaim '(special TEA::HASH-COMBINE-TWO-FIXNUMS))
(proclaim '(special TEA::HASH-COMBINE-FIXNUMS))
(proclaim '(special TEA::FLOATING-HASH))
(proclaim '(special TEA::ASS-APPLY))
(proclaim '(special TEA::ASSQ-VAL))
(proclaim '(special TEA::ASS-VAL))
(proclaim '(special TEA::ASS-LQ))
(proclaim '(special TEA::ASS-L))
(proclaim '(special TEA::NEGATIVE-INTEGER?))
(proclaim '(special TEA::NON-NEGATIVE-INTEGER?))
(proclaim '(special TEA::SYMBOL-APPEND))
(proclaim '(special TEA::LEAST-UNDER-DESCRIPTOR-HASH))
(proclaim '(special TEA::LEAST-UNDER-FUNCTION))
(proclaim '(special TEA::LIST-ORDERING-1))
(proclaim '(special TEA::LIST-ORDERING))
(proclaim '(special TEA::FLAT-MAP))
(proclaim '(special TEA::TREE-MAP))
(proclaim '(special TEA::NEST-BELOW-MAXIMUM-AND-APPLY))
(proclaim '(special TEA::APPLY-THROUGH-NESTED-LIST))
(proclaim '(special TEA::NEST-BELOW-MAXIMUM-NUMBER-OF-ARGUMENTS))
(proclaim '(special TEA::NEST-BELOW-EXTRACT-CHUNK!))
(proclaim '(special TEA::PATHS-DISJOINT?))
(proclaim '(special TEA::PATH-DISJOINT-FROM-PATHS?))
(proclaim '(special TEA::PATHS-DIVERGE?))
(proclaim '(special TEA::RECURSIVELY-COPY-LIST))
(proclaim '(special TEA::LEAVES))
(proclaim '(special TEA::FIRST-N-CARS))
(proclaim '(special TEA::FIRST-N-CARS-&-REST))
(proclaim '(special TEA::APPEND-ITEM-TO-LAST-CDR!))
(proclaim '(special TEA::APPEND-ITEM-TO-END-OF-LIST))
(proclaim '(special TEA::LAST-&-ALL-BUT-LAST!))
(proclaim '(special TEA::ALL-BUT-LAST))
(proclaim '(special TEA::LAST-&-ALL-BUT-LAST))
(proclaim '(special TEA::REPLACE-NTH-IN-LIST))
(proclaim '(special TEA::REPLACE-NTH-IN-LIST!))
(proclaim '(special TEA::DELETE-1))
(proclaim '(special TEA::INDEX-OF-ANY))
(proclaim '(special TEA::ANY-SUCH-THAT))
(proclaim '(special TEA::FIND-POSITIONS-IN-LIST))
(proclaim '(special TEA::FIND-POSITION-IN-LIST))
(proclaim '(special TEA::UNCOMPUTED))
(proclaim '(special TEA::UNCOMPUTED?))
(proclaim '(special TEA::SUCCEED))
(proclaim '(special TEA::FAIL))
(proclaim '(special TEA::SUCCEED?))
(proclaim '(special TEA::FAIL?))
(proclaim '(special TEA::EMACS-WRITE))
(proclaim '(special TEA::READ-EMACS-COMMUNICATION))
(proclaim '(special TEA::EMACS-ERROR))
(proclaim '(special TEA::EMACS-MESSAGE))
(proclaim '(special TEA::EMACS-BUFFER-APPLY-TO-STRING))
(proclaim '(special TEA::EMACS-APPLY-TO-STRING))
(proclaim '(special TEA::EMACS-EVAL))
(proclaim '(special TEA::EMACS-BUFFER-EVAL))
(proclaim '(special TEA::UNSET-EMACS-PROCESS-FILTER))
(proclaim '(special TEA::SET-EMACS-PROCESS-FILTER))
(proclaim '(special TEA::EMACS-PROCESS-FILTER?))
(proclaim '(special TEA::EMACS-UNEVAL-START-STR))
(proclaim '(special TEA::EMACS-EVAL-END-STR))
(proclaim '(special TEA::EMACS-EVAL-START-STR))
(proclaim '(special TEA::EMACS-UNEVAL-START))
(proclaim '(special TEA::EMACS-EVAL-END))
(proclaim '(special TEA::EMACS-EVAL-START))
(proclaim '(special TEA::EMACS-OUTPUT))
(proclaim '(special TEA::*OCTET-TYPE*))
(proclaim '(special TEA::BITOP))
(proclaim '(special TEA::BITOP-NUMBER-CONSTRUCTOR))
(proclaim '(special TEA::BITOP-NUMBER?))
(proclaim '(special TEA::FIND-BITOP-TYPE))
(proclaim '(special TEA::*MOD-2-TYPE*))
(proclaim '(special TEA::MODULAR))
(proclaim '(special TEA::MODULAR-NUMBER-CONSTRUCTOR))
(proclaim '(special TEA::NUMERICAL-OBJECT-KEY))
(proclaim '(special TEA::MODULAR-NUMBER?))
(proclaim '(special TEA::REPRESENTATIVE))
(proclaim '(special TEA::FIND-MODULAR-TYPE))
(proclaim '(special TEA::CHECK-NUMERICAL-TYPES))
(proclaim '(special TEA::NUMERICAL-TYPE))
(proclaim '(special TEA::INTEGER-EXTENSION-TYPE?))
(proclaim '(special TEA::*INTEGER-EXTENSION-TYPES*))
(proclaim '(special TEA::*NUMBER-TYPE*))
(proclaim '(special TEA::*FLOAT-TYPE*))
(proclaim '(special TEA::*RATIONAL-TYPE*))
(proclaim '(special TEA::*INTEGER-TYPE*))
(proclaim '(special TEA::*NON-NEGATIVE-INTEGER-TYPE*))
(proclaim '(special TEA::COERCE-TYPE))
(proclaim '(special TEA::NUMERICAL-TYPE-IDENTIFIER))
(proclaim '(special TEA::NUMERICAL-TYPE-RECOGNIZER))
(proclaim '(special TEA::NUMERICAL-TYPE-COERCION-FUNCTION))
(proclaim '(special TEA::MAKE-NUMERICAL-TYPE))
(proclaim '(special TEA::NUMERICAL-TYPE?))
(proclaim '(special TEA::NUMERICAL-<))
(proclaim '(special TEA::NUMERICAL->))
(proclaim '(special TEA::NUMERICAL-=1?))
(proclaim '(special TEA::NUMERICAL-=0?))
(proclaim '(special TEA::NUMERICAL-MINUS))
(proclaim '(special TEA::NUMERICAL-EXPT))
(proclaim '(special TEA::NUMERICAL-*))
(proclaim '(special TEA::NUMERICAL-+))
(proclaim '(special TEA::NUMERICAL-=))
(proclaim '(special TEA::NUMERICAL-OBJECT?))
(proclaim '(special TEA::IMPS-ERROR-FILE))
(proclaim '(special TEA::IMPS-THEORY-INTERPRETATIONS-FILE))
(proclaim '(special TEA::IMPS-RECURSIVE-DEFINITIONS-FILE))
(proclaim '(special TEA::IMPS-DEFINITIONS-FILE))
(proclaim '(special TEA::IMPS-MACETES-FILE))
(proclaim '(special TEA::IMPS-THEOREMS-FILE))
(proclaim '(special TEA::IMPS-COMMAND-FILE))
(proclaim '(special TEA::SQN-EDIT-FILE-NAME))
(proclaim '(special TEA::CMPN-FILE-NAME))
(proclaim '(special TEA::SQN-FILE-NAME))
(proclaim '(special TEA::DG-FILE-NAME))
(proclaim '(special TEA::IMPS-TEX-FILE))
(proclaim '(special TEA::PRINT-DG-PROOF-INFORMATION))
(proclaim '(special TEA::PRINT-EXISTING-THEOREM-INFORMATION))
(proclaim '(special TEA::PRINT-DG-CONTEXT-INFORMATION))
(proclaim '(special TEA::LOG-IMPS-PROOF))
(proclaim '(special TEA::START-DG-AND-EXECUTE-COMMAND-SEQUENCE))
(proclaim '(special TEA::*THEOREM-NUMBER*))
(proclaim '(special TEA::*CURRENT-THEOREM*))
(proclaim '(special TEA::*TOTAL-FAILED-PROOFS*))
(proclaim '(special TEA::*TOTAL-ERRORS*))
(proclaim '(special TEA::STATUS-OF-THEORY-NETWORK-ALIST))
(proclaim '(special TEA::STATUS-OF-THEORY-NETWORK))
(proclaim '(special TEA::QUICK-LOAD))
(proclaim '(special TEA::QUICK-LOAD?))
(proclaim '(special TEA::PROOF-LOG-PORT))
(proclaim '(special TEA::CONTEXT-LOW-SIMPLIFICATION-PERSISTENCE))
(proclaim '(special TEA::CONTEXT-SIMPLIFICATION-PERSISTENCE))
(proclaim '(special TEA::MAYBE-START-XDVI-AND-XDG))
(proclaim '(special TEA::FINISH-LOAD))
(proclaim '(special TEA::LOAD-IMPS))
(proclaim '(special TEA::UPDATE-IMPS))
(proclaim '(special TEA::MAYBE-COMPILE-IMPS))
(proclaim '(special TEA::COMPILE-IMPS))
(proclaim '(special TEA::WALK-SOME-IMPS-FILES))
(proclaim '(special TEA::IMPS-REF))
(proclaim '(special TEA::IMPS-ENFORCE))
(proclaim '(special TEA::MAYBE-IMPS-WARNING))
(proclaim '(special TEA::IMPS-CONGRATULATION))
(proclaim '(special TEA::IMPS-CONGRATULATIONS-HOOK))
(proclaim '(special TEA::IMPS-WARNING))
(proclaim '(special TEA::RAISE-NAME-ERROR?))
(proclaim '(special TEA::IMPS-RAISE-ERROR?))
(proclaim '(special TEA::MAYBE-IMPS-ERROR))
(proclaim '(special TEA::IMPS-ERROR-OR-RETURN-FALSE))
(proclaim '(special TEA::IMPS-USER-ERROR))
(proclaim '(special TEA::IMPS-ERROR))
(proclaim '(special TEA::*IMPS-FILES*))
(proclaim '(special TEA::IMPORT-REWRITE-RULES))
(proclaim '(special TEA::BUILD-DEF-THEORY-ENSEMBLE-INSTANCES-FORM))
(proclaim '(special TEA::FIXED-THEORIES-FROM-KEYWORDS))
(proclaim '(special TEA::DIGEST-PROCESSOR-SPECS))
(proclaim '(special TEA::RESET-DONT-UNFOLD))
(proclaim '(special TEA::THEORY-VERIFY-ETC))
(proclaim '(special TEA::WRAP-WITH-DEF-FORM-BIND))
(proclaim '(special TEA::DEF-FORM-SYNTAX-BIND))
(proclaim '(special TEA::MODIFIER-AND-KEYWORD-CHECK-FOR-DEF-FORM))
(proclaim '(special TEA::COLLECT-MODIFIER-AND-KEYWORD-ARGUMENTS-FOR-DEF-FORM))
(proclaim '(special TEA::OBJECT-UNHASH))
(proclaim '(special TEA::COPY-TABLE))
(proclaim '(special TEA::MAKE-TWO-D-TABLE))
(proclaim '(special TEA::SET-TABLE?))
(proclaim '(special TEA::MAKE-STRING-TABLE))
(proclaim '(special TEA::MAKE-TABLE))
(proclaim '(special TEA::WALK-TABLE))
(proclaim '(special TEA::TABLE?))
(proclaim '(special TEA::MAKE-HASH-TABLE))
(proclaim '(special TEA::COMPILE-IF-OUTDATED))
(proclaim '(special TEA::COMPILE-FILE))
(proclaim '(special TEA::PROVIDE))
(proclaim '(special TEA::*REQUIRE))
(proclaim '(special TEA::LOAD))
(proclaim '(special TEA::FILESPEC?))
(proclaim '(special TEA::EXPAND-FILENAME))
(proclaim '(special TEA::GET-DEFAULT-FILENAME))
(proclaim '(special TEA::FILE-DELETE))
(proclaim '(special TEA::FILE-EXISTS?))
(proclaim '(special TEA::FILENAME?))
(proclaim '(special TEA::FILENAME->STRING))
(proclaim '(special TEA::FILENAME-TYPE))
(proclaim '(special TEA::FILENAME-NAME))
(proclaim '(special TEA::FILENAME-DIR))
(proclaim '(special TEA::PRINT-TYPE-STRING))
(proclaim '(special TEA::IDENTIFICATION))
(proclaim '(special TEA::JOIN))
(proclaim '(special TEA::READ-OBJECTS-FROM-STRING))
(proclaim '(special TEA::ERROR-OUTPUT))
(proclaim '(special TEA::STANDARD-OUTPUT))
(proclaim '(special TEA::STANDARD-INPUT))
(proclaim '(special TEA::STRING->INPUT-PORT))
(proclaim '(special TEA::PRINT))
(proclaim '(special TEA::PRETTY-PRINT))
(proclaim '(special TEA::PORT-NAME))
(proclaim '(special TEA::HPOS))
(proclaim '(special TEA::CLOSE))
(proclaim '(special TEA::FORCE-OUTPUT))
(proclaim '(special TEA::WRITE-LINE))
(proclaim '(special TEA::FRESH-LINE))
(proclaim '(special TEA::NEWLINE))
(proclaim '(special TEA::WRITE-CHAR))
(proclaim '(special TEA::WRITE))
(proclaim '(special TEA::PORT-READ-TABLE))
(proclaim '(special TEA::READ-LINE))
(proclaim '(special TEA::PEEK-CHAR))
(proclaim '(special TEA::UNREAD-CHAR))
(proclaim '(special TEA::READ-CHAR))
(proclaim '(special TEA::READ))
(proclaim '(special TEA::OUTPUT-PORT?))
(proclaim '(special TEA::INPUT-PORT?))
(proclaim '(special TEA::PORT?))
(proclaim '(special TEA::FLOAT?))
(proclaim '(special TEA::->FLOAT))
(proclaim '(special TEA::FIXNUM-ASHL))
(proclaim '(special TEA::ASHL))
(proclaim '(special TEA::FIXNUM-LOGNOT))
(proclaim '(special TEA::FIXNUM-LOGIOR))
(proclaim '(special TEA::FIXNUM-LOGAND))
(proclaim '(special TEA::FX>=))
(proclaim '(special TEA::FX>))
(proclaim '(special TEA::FX<=))
(proclaim '(special TEA::FX<))
(proclaim '(special TEA::FX=))
(proclaim '(special TEA::FX*))
(proclaim '(special TEA::FX-))
(proclaim '(special TEA::FX+))
(proclaim '(special TEA::BOOLEAN?))
(proclaim '(special TEA::TRUE?))
(proclaim '(special TEA::FALSE?))
(proclaim '(special TEA::FALSE))
(proclaim '(special TEA::TRUE))
(proclaim '(special TEA::EXIT))
(proclaim '(special TEA::QUIT))
(proclaim '(special TEA::RETRIEVE-Y-OR-N-FROM-USER))
(proclaim '(special TEA::EVAL))
(proclaim '(special TEA::OBJECT-HASH))
(proclaim '(special TEA::DESCRIPTOR-HASH))
(proclaim '(special TEA::SYMBOL-HASH))
(proclaim '(special TEA::STRING-HASH))
(proclaim '(special TEA::HASH-<))
(proclaim '(special TEA::SORT-LIST!))
(proclaim '(special TEA::ASCII->CHAR))
(proclaim '(special TEA::CHAR->ASCII))
(proclaim '(special TEA::VECTOR-LENGTH))
(proclaim '(special TEA::LIST*))
(proclaim '(special TEA::CONS*))
(proclaim '(special TEA::REDUCE))
(proclaim '(special TEA::APPEND))
(proclaim '(special TEA::APPEND!))
(proclaim '(special TEA::REVERSE!))
(proclaim '(special TEA::NTHCHDR))
(proclaim '(special TEA::NTHCHAR))
(proclaim '(special TEA::STRING-LESS?))
(proclaim '(special TEA::STRING-APPEND))
(proclaim '(special TEA::BLANK?))
(proclaim '(special TEA::STRING-LENGTH))
(proclaim '(special TEA::SUBSTRING?))
(proclaim '(special TEA::STRING-EQUAL?))
(proclaim '(special TEA::STRING?))
(proclaim '(special TEA::WHITESPACE?))
(proclaim '(special TEA::ALPHABETIC?))
(proclaim '(special TEA::LOWERCASE?))
(proclaim '(special TEA::UPPERCASE?))
(proclaim '(special TEA::DIGIT?))
(proclaim '(special TEA::CHAR?))
(proclaim '(special TEA::PROPER-LIST?))
(proclaim '(special TEA::SYMBOL?))
(proclaim '(special TEA::RATIONAL?))
(proclaim '(special TEA::INTEGER?))
(proclaim '(special TEA::NUMBER?))
(proclaim '(special TEA::PROCEDURE?))
(proclaim '(special TEA::COPY-LIST))
(proclaim '(special TEA::NULL?))
(proclaim '(special TEA::LIST?))
(proclaim '(special TEA::PAIR?))
(proclaim '(special TEA::ATOM?))
(proclaim '(special TEA::ENFORCE))
(proclaim '(special TEA::IDENTITY))
(proclaim '(special TEA::ALWAYS))
(proclaim '(special TEA::STRING-ELT))
(proclaim '(special TEA::SUBSTRING))
(proclaim '(special TEA::STRING-DOWNCASE!))
(proclaim '(special TEA::STRING-DOWNCASE))
(proclaim '(special TEA::SYMBOL->STRING))
(proclaim '(special TEA::STRING->SYMBOL))
(proclaim '(special TEA::GENERATE-SYMBOL))
(proclaim '(special USER::CONCATENATE-SYMBOL))
(proclaim '(special TEA::CHAR>))
(proclaim '(special TEA::CHAR<))
(proclaim '(special TEA::CHAR>=))
(proclaim '(special TEA::CHAR<=))
(proclaim '(special TEA::CHAR=))
(proclaim '(special TEA::CDDDAR))
(proclaim '(special TEA::CDDAAR))
(proclaim '(special TEA::CDDADR))
(proclaim '(special TEA::CDDDDR))
(proclaim '(special TEA::CDADAR))
(proclaim '(special TEA::CDAAAR))
(proclaim '(special TEA::CDAADR))
(proclaim '(special TEA::CDADDR))
(proclaim '(special TEA::CADDAR))
(proclaim '(special TEA::CADAAR))
(proclaim '(special TEA::CADADR))
(proclaim '(special TEA::CADDDR))
(proclaim '(special TEA::CAADAR))
(proclaim '(special TEA::CAAAAR))
(proclaim '(special TEA::CAAADR))
(proclaim '(special TEA::CAADDR))
(proclaim '(special TEA::CDDAR))
(proclaim '(special TEA::CDAAR))
(proclaim '(special TEA::CDADR))
(proclaim '(special TEA::CDDDR))
(proclaim '(special TEA::CADAR))
(proclaim '(special TEA::CAAAR))
(proclaim '(special TEA::CAADR))
(proclaim '(special TEA::CADDR))
(proclaim '(special TEA::CAAR))
(proclaim '(special TEA::CDDR))
(proclaim '(special TEA::CDAR))
(proclaim '(special TEA::CADR))
(proclaim '(special TEA::CDR))
(proclaim '(special TEA::CAR))
(proclaim '(special TEA::EQUAL?))
(proclaim '(special TEA::EQUIV?))
(proclaim '(special TEA::EQ?))
(proclaim '(special TEA::MAKE-STRING))
(proclaim '(special TEA::LENGTH))
(proclaim '(special TEA::LOGNOT))
(proclaim '(special TEA::LOGIOR))
(proclaim '(special TEA::LOGXOR))
(proclaim '(special TEA::LOGAND))
(proclaim '(special TEA::DENOMINATOR))
(proclaim '(special TEA::NUMERATOR))
(proclaim '(special TEA::GCD))
(proclaim '(special TEA::LCM))
(proclaim '(special TEA::SUBTRACT1))
(proclaim '(special TEA::-1+))
(proclaim '(special TEA::1+))
(proclaim '(special TEA::NOT-LESS?))
(proclaim '(special TEA::NOT-GREATER?))
(proclaim '(special TEA::ZERO?))
(proclaim '(special TEA::>0?))
(proclaim '(special TEA::=0?))
(proclaim '(special TEA::NEGATIVE?))
(proclaim '(special TEA::POSITIVE?))
(proclaim '(special TEA::ODD?))
(proclaim '(special TEA::EVEN?))
(proclaim '(special TEA::MIN))
(proclaim '(special TEA::MOD))
(proclaim '(special TEA::ABS))
(proclaim '(special TEA::>=))
(proclaim '(special TEA::<=))
(proclaim '(special TEA::=))
(proclaim '(special TEA::>))
(proclaim '(special TEA::GREATER?))
(proclaim '(special TEA::LESS?))
(proclaim '(special TEA::<))
(proclaim '(special TEA::/))
(proclaim '(special TEA::SUBTRACT))
(proclaim '(special TEA::-))
(proclaim '(special TEA::*))
(proclaim '(special TEA::+))
(proclaim '(special TEA::CONS))


