; Copyright (c) 1990-1997 The MITRE Corporation
; 
; Authors: W. M. Farmer, J. D. Guttman, F. J. Thayer
;   
; The MITRE Corporation (MITRE) provides this software to you without
; charge to use, copy, modify or enhance for any legitimate purpose
; provided you reproduce MITRE's copyright notice in any copy or
; derivative work of this software.
; 
; This software is the copyright work of MITRE.  No ownership or other
; proprietary interest in this software is granted you other than what
; is granted in this license.
; 
; Any modification or enhancement of this software must identify the
; part of this software that was modified, by whom and when, and must
; inherit this license including its warranty disclaimers.
; 
; MITRE IS PROVIDING THE PRODUCT "AS IS" AND MAKES NO WARRANTY, EXPRESS
; OR IMPLIED, AS TO THE ACCURACY, CAPABILITY, EFFICIENCY OR FUNCTIONING
; OF THIS SOFTWARE AND DOCUMENTATION.  IN NO EVENT WILL MITRE BE LIABLE
; FOR ANY GENERAL, CONSEQUENTIAL, INDIRECT, INCIDENTAL, EXEMPLARY OR
; SPECIAL DAMAGES, EVEN IF MITRE HAS BEEN ADVISED OF THE POSSIBILITY OF
; SUCH DAMAGES.
; 
; You, at your expense, hereby indemnify and hold harmless MITRE, its
; Board of Trustees, officers, agents and employees, from any and all
; liability or damages to third parties, including attorneys' fees,
; court costs, and other related costs and expenses, arising out of your
; use of this software irrespective of the cause of said liability.
; 
; The export from the United States or the subsequent reexport of this
; software is subject to compliance with United States export control
; and munitions control restrictions.  You agree that in the event you
; seek to export this software or any derivative work thereof, you
; assume full responsibility for obtaining all necessary export licenses
; and approvals and for assuring compliance with applicable reexport
; restrictions.
; 
; 
; 
; COPYRIGHT NOTICE INSERTED: Thu Mar  6 14:25:07 EST 1997

; This file was generated from original IMPS sources, written in the
; TEA programming language, by an automatic conversion program.
; A small number of manual changes were also made to improve performance
; and deal with compiler idiosyncrasies.
; F. J. Thayer, Thu Mar  6 15:02:11 EST 1997

(in-package "TEA")

(comment transforms)

(define (insistently-apply-matching-transforms-in-context context expr
            persist)
        (if (formal-symbol? expr) (return expr nil value-false)
            (receive (expr1 reqs1 any?)
                     (apply-matching-transforms-in-context context expr
                         persist)
                     (if (alpha-equivalent? expr1 expr)
                         (return expr nil any?)
                         (receive (expr2 reqs2 ())
                                  (insistently-apply-matching-transforms-in-context
                                      context expr1 persist)
                                  (return
                                    expr2
                                    (set-union reqs2 reqs1)
                                    value-true))))))

(define (theory-install-transform theory constructor lead transform)
        (let* ((transform-table (theory-transform-table theory)))
          (set (two-d-table-entry transform-table constructor lead)
               (add-set-element transform
                   (two-d-table-entry transform-table constructor lead)))
          (return transform)))

(define (retrieve-transforms-by-constructor-and-lead theory constr lead)
        (let ((table (theory-transform-table theory)))
          (if (expression? lead)
              (append (two-d-table-entry table constr lead)
                      (two-d-table-entry table constr
                          'no-lead-constant))
              (two-d-table-entry table constr lead))))

(define retrieve-transforms-by-quasi-constructor-or-constructor-and-lead
        retrieve-transforms-by-constructor-and-lead)

(define (context-has-equality-transform? context)
        (not (null? (retrieve-transforms-by-constructor-and-lead
                        (context-theory context) equality
                        'no-lead-constant))))

(define (expression-matches-lead-constant? expression lead)
  (if (expression? lead) (eq? expression lead) value-true))

(define (apply-matching-transforms-in-context context expr persist)
  (let ((constr (expression-quasi-constructor-or-constructor
		 expr))
	(lead (expression-lead-constant expr)))

    (iterate loop
	((transforms
	  (retrieve-transforms-by-constructor-and-lead
	   (context-theory context) constr lead))
	 (expr expr) (reqs nil) (any-satisfy? value-false))
      (if (null? transforms) (return expr reqs any-satisfy?)
	  (receive (simp reqs1 this?)
	    (funcall (car transforms) context
		     expr persist)
	    (if (and
		 (expression-matches-lead-constant?
		  (expression-lead-constant simp)
		  lead)
		 (eq? constr
		      (expression-quasi-constructor-or-constructor
		       simp)))
		(loop
		 (cdr transforms)
		 simp
		 (set-union reqs1 reqs)
		 (or any-satisfy? this?))
		(return
		 simp
		 (set-union reqs1 reqs)
		 (or any-satisfy? this?))))))))

(define (join-theory-transform-tables tables)
        (let ((new (make-table)))
          (walk (lambda (tab)
                  (walk-two-d-table
                      (lambda (k1 k2 val)
                        (set (two-d-table-entry new k1 k2)
                             (append (two-d-table-entry new k1 k2)
                                     (copy-list val))))
                      tab))
                tables)
          new))
