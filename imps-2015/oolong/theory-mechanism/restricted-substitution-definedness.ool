; Copyright (c) 1990-1997 The MITRE Corporation
; 
; Authors: W. M. Farmer, J. D. Guttman, F. J. Thayer
;   
; The MITRE Corporation (MITRE) provides this software to you without
; charge to use, copy, modify or enhance for any legitimate purpose
; provided you reproduce MITRE's copyright notice in any copy or
; derivative work of this software.
; 
; This software is the copyright work of MITRE.  No ownership or other
; proprietary interest in this software is granted you other than what
; is granted in this license.
; 
; Any modification or enhancement of this software must identify the
; part of this software that was modified, by whom and when, and must
; inherit this license including its warranty disclaimers.
; 
; MITRE IS PROVIDING THE PRODUCT "AS IS" AND MAKES NO WARRANTY, EXPRESS
; OR IMPLIED, AS TO THE ACCURACY, CAPABILITY, EFFICIENCY OR FUNCTIONING
; OF THIS SOFTWARE AND DOCUMENTATION.  IN NO EVENT WILL MITRE BE LIABLE
; FOR ANY GENERAL, CONSEQUENTIAL, INDIRECT, INCIDENTAL, EXEMPLARY OR
; SPECIAL DAMAGES, EVEN IF MITRE HAS BEEN ADVISED OF THE POSSIBILITY OF
; SUCH DAMAGES.
; 
; You, at your expense, hereby indemnify and hold harmless MITRE, its
; Board of Trustees, officers, agents and employees, from any and all
; liability or damages to third parties, including attorneys' fees,
; court costs, and other related costs and expenses, arising out of your
; use of this software irrespective of the cause of said liability.
; 
; The export from the United States or the subsequent reexport of this
; software is subject to compliance with United States export control
; and munitions control restrictions.  You agree that in the event you
; seek to export this software or any derivative work thereof, you
; assume full responsibility for obtaining all necessary export licenses
; and approvals and for assuring compliance with applicable reexport
; restrictions.
; 
; 
; 
; COPYRIGHT NOTICE INSERTED: Thu Mar  6 14:25:07 EST 1997

; This file was generated from original IMPS sources, written in the
; TEA programming language, by an automatic conversion program.
; A small number of manual changes were also made to improve performance
; and deal with compiler idiosyncrasies.
; F. J. Thayer, Thu Mar  6 15:02:11 EST 1997

(in-package "TEA")

(comment restricted-substitution-definedness)

(define (exposed-variables expr)
        (if (expression-of-category-prop? expr)
            (apply append
                   (map exposed-variables-for-atomic-formula
                        (ultimate-conjuncts (list expr))))
            (exposed-variables-for-expression-of-kind-ind expr)))

(define (exposed-variables-for-atomic-formula expr)
        (if (or (equation? expr) (application? expr)
                (conjunction? expr) (convergence? expr)
                (convergence-in-sort? expr))
            (apply append
                   (map exposed-variables-for-expression-of-kind-ind
                        (expression-components expr)))
            nil))

(define (exposed-variables-for-expression-of-kind-ind expr)
        (if (expression-of-category-ind? expr)
            (if (variable? expr) (list expr)
                (if (application? expr)
                    (apply append
                           (map exposed-variables-for-expression-of-kind-ind
                                (expression-components expr)))
                    nil))
            nil))

(define (jointly-exposed-variables expr1 expr2)
        (intersection (exposed-variables expr1)
            (exposed-variables expr2)))

(define (restricted-substitution-definedness-conditions subst
            exposed-vars)
        (receive (check-definedness check-sort)
                 (iterate loop
                          ((check-definedness nil) (check-sort nil)
                           (rem-subst subst))
                          (cond
                            ((null? rem-subst)
                             (return check-definedness check-sort))
                            ((memq? (caar rem-subst) exposed-vars)
                             (loop
                               check-definedness
                               (if (sorting-leq
                                    (expression-sorting
                                     (cdar rem-subst))
                                    (expression-sorting
                                     (caar rem-subst)))
                                   check-sort
                                   (cons (car rem-subst) check-sort))
                               (cdr rem-subst)))
                            (else (loop
                                    (cons (car rem-subst)
                                     check-definedness)
                                    check-sort
                                    (cdr rem-subst)))))
                 (append (map (lambda (x)
                                (in-sort-if-defined (cdr x)
                                    (expression-sorting (car x))))
                              check-sort)
                         (substitution-definedness-conditions
                             check-definedness))))

(define (in-sort-if-defined term sort)
        (if (predicate? term) (the-true)
            (implication (is-defined term) (defined-in term sort))))
