; Copyright (c) 1990-1997 The MITRE Corporation
; 
; Authors: W. M. Farmer, J. D. Guttman, F. J. Thayer
;   
; The MITRE Corporation (MITRE) provides this software to you without
; charge to use, copy, modify or enhance for any legitimate purpose
; provided you reproduce MITRE's copyright notice in any copy or
; derivative work of this software.
; 
; This software is the copyright work of MITRE.  No ownership or other
; proprietary interest in this software is granted you other than what
; is granted in this license.
; 
; Any modification or enhancement of this software must identify the
; part of this software that was modified, by whom and when, and must
; inherit this license including its warranty disclaimers.
; 
; MITRE IS PROVIDING THE PRODUCT "AS IS" AND MAKES NO WARRANTY, EXPRESS
; OR IMPLIED, AS TO THE ACCURACY, CAPABILITY, EFFICIENCY OR FUNCTIONING
; OF THIS SOFTWARE AND DOCUMENTATION.  IN NO EVENT WILL MITRE BE LIABLE
; FOR ANY GENERAL, CONSEQUENTIAL, INDIRECT, INCIDENTAL, EXEMPLARY OR
; SPECIAL DAMAGES, EVEN IF MITRE HAS BEEN ADVISED OF THE POSSIBILITY OF
; SUCH DAMAGES.
; 
; You, at your expense, hereby indemnify and hold harmless MITRE, its
; Board of Trustees, officers, agents and employees, from any and all
; liability or damages to third parties, including attorneys' fees,
; court costs, and other related costs and expenses, arising out of your
; use of this software irrespective of the cause of said liability.
; 
; The export from the United States or the subsequent reexport of this
; software is subject to compliance with United States export control
; and munitions control restrictions.  You agree that in the event you
; seek to export this software or any derivative work thereof, you
; assume full responsibility for obtaining all necessary export licenses
; and approvals and for assuring compliance with applicable reexport
; restrictions.
; 
; 
; 
; COPYRIGHT NOTICE INSERTED: Thu Mar  6 14:25:07 EST 1997

; This file was generated from original IMPS sources, written in the
; TEA programming language, by an automatic conversion program.
; A small number of manual changes were also made to improve performance
; and deal with compiler idiosyncrasies.
; F. J. Thayer, Thu Mar  6 15:02:11 EST 1997

(in-package "TEA")

(comment numerical-objects)

(eval-always 
 (define numerical-object? (operation number?))

(define-operation (numerical-= x y)
    (cond
      ((and (number? x) (number? y)) (= x y))
      ((number? x) (numerical-= y x))
      (else (error "numerical-=: bogus args ~s ~s" x y))))

(define numerical-+ (operation +))

(define numerical-* (operation *))

(define numerical-expt (operation expt))

(define numerical-minus (operation -))

(define numerical-=0? (operation =0?))

(define numerical-=1? (operation (lambda (a) (= a 1))))

(define numerical-> (operation >))

(define numerical-< (operation (lambda (x y) (numerical-> y x))))

(define-structure-type numerical-type coercion-function recognizer
    identifier
    (((print soi port)
      (format port "~a" (numerical-type-identifier soi)))))

(define (coerce-type type num) (enforce number? num)
        (enforce numerical-type? type)
        (funcall (numerical-type-coercion-function type) num))

(define *non-negative-integer-type*
        (let ((new-type (make-numerical-type)))
          (set (numerical-type-coercion-function new-type)
               (lambda (n) (if (non-negative-integer? n) n value-false)))
          (set (numerical-type-recognizer new-type)
               non-negative-integer?)
          (set (numerical-type-identifier new-type)
               'non-negative-integer)
          new-type))

(define *integer-type*
        (let ((new-type (make-numerical-type)))
          (set (numerical-type-coercion-function new-type)
               (lambda (n) (if (integer? n) n value-false)))
          (set (numerical-type-recognizer new-type) integer?)
          (set (numerical-type-identifier new-type) 'integer)
          new-type))

(define *rational-type*
        (let ((new-type (make-numerical-type)))
          (set (numerical-type-coercion-function new-type)
               (lambda (n) (if (rational? n) n value-false)))
          (set (numerical-type-recognizer new-type) rational?)
          (set (numerical-type-identifier new-type) 'rational)
          new-type))

(define *float-type*
        (let ((new-type (make-numerical-type)))
          (set (numerical-type-coercion-function new-type)
               (lambda (n) (if (float? n) n value-false)))
          (set (numerical-type-recognizer new-type) float?)
          (set (numerical-type-identifier new-type) 'float)
          new-type))

(define *number-type*
        (let ((new-type (make-numerical-type)))
          (set (numerical-type-coercion-function new-type)
               (lambda (n) (if (number? n) n value-false)))
          (set (numerical-type-recognizer new-type) number?)
          (set (numerical-type-identifier new-type) 'number)
          new-type))

(define *integer-extension-types*
        (list *integer-type* *rational-type*))

(define (integer-extension-type? type) (enforce numerical-type? type)
        (memq? type *integer-extension-types*))

(define-operation (numerical-type x))

(define (check-numerical-types . args)
        (let ((type (numerical-type (car args))))
          (walk (lambda (x)
                  (if (not (eq? type (numerical-type x)))
                      (error "Numerical type incompatibility ~a ~a"
                             (car args) x)))
                (cdr args))
          t))

(let ((modular-number-types
       (make-hash-table equiv? 'modular-types)))
  (define (find-modular-type q) (enforce integer? q)
    (cond
     ((table-entry modular-number-types q))
     (else (let ((new-type (make-numerical-type)))
	     (set (numerical-type-coercion-function
		   new-type)
		  (lambda (p)
		    (modular-number-constructor p q
						new-type)))
	     (set (numerical-type-recognizer new-type)
		  (lambda (x)
		    (and (modular-number? x) (= (base x) q))))
	     (set (numerical-type-identifier new-type)
		  (string->symbol
		   (format nil "NUMBER-MOD-~a" q)))
	     (set (table-entry modular-number-types q)
		  new-type)
	     new-type)))))

(define-operation (representative x) (enforce number? x) x)

(define-predicate modular-number?)

(define-operation (base soi) 0)

(define-operation (numerical-object-key soi) soi)

(define (modular-number-constructor p q type) (enforce integer? p)
        (let* ((q (abs q)) (p (mod p q)) (key (cons p q)))
          (object nil ((numerical-object? soi) t)
                  ((numerical-object-key soi) key)
                  ((numerical-= soi a)
                   (and (= q (base a)) (= (representative a) p)))
                  ((numerical-type soi) type)
                  ((numerical-+ soi . args)
                   (walk (lambda (x)
                           (enforce modular-number? x)
                           (or (= q (base x))
                               (error "numerical-+ different modular bases")))
                         args)
                   (modular (apply + p (map representative args)) q))
                  ((numerical-* soi . args)
                   (walk (lambda (x)
                           (enforce modular-number? x)
                           (or (= q (base x))
                               (error "numerical-* different modular bases")))
                         args)
                   (modular (apply * p (map representative args)) q))
                  ((numerical-minus soi) (modular (- p) q))
                  ((numerical-expt soi num) (modular (expt p num) q))
                  ((numerical-=0? soi) (= p 0))
                  ((numerical-=1? soi) (or (= p 1) (= q 1)))
                  ((numerical-> soi b)
                   (if (= q (base b)) (> p (representative b))
                       (> q (base b))))
                  ((base soi) q) ((representative soi) p)
                  ((modular-number? soi) t)
                  ((print soi port) (format port "~a|~a" p q)))))

(define (modular p q)
        (modular-number-constructor p q (find-modular-type q)))

(define *mod-2-type* (find-modular-type 2))
)
