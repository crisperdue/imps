; Copyright (c) 1990-1997 The MITRE Corporation
; 
; Authors: W. M. Farmer, J. D. Guttman, F. J. Thayer
;   
; The MITRE Corporation (MITRE) provides this software to you without
; charge to use, copy, modify or enhance for any legitimate purpose
; provided you reproduce MITRE's copyright notice in any copy or
; derivative work of this software.
; 
; This software is the copyright work of MITRE.  No ownership or other
; proprietary interest in this software is granted you other than what
; is granted in this license.
; 
; Any modification or enhancement of this software must identify the
; part of this software that was modified, by whom and when, and must
; inherit this license including its warranty disclaimers.
; 
; MITRE IS PROVIDING THE PRODUCT "AS IS" AND MAKES NO WARRANTY, EXPRESS
; OR IMPLIED, AS TO THE ACCURACY, CAPABILITY, EFFICIENCY OR FUNCTIONING
; OF THIS SOFTWARE AND DOCUMENTATION.  IN NO EVENT WILL MITRE BE LIABLE
; FOR ANY GENERAL, CONSEQUENTIAL, INDIRECT, INCIDENTAL, EXEMPLARY OR
; SPECIAL DAMAGES, EVEN IF MITRE HAS BEEN ADVISED OF THE POSSIBILITY OF
; SUCH DAMAGES.
; 
; You, at your expense, hereby indemnify and hold harmless MITRE, its
; Board of Trustees, officers, agents and employees, from any and all
; liability or damages to third parties, including attorneys' fees,
; court costs, and other related costs and expenses, arising out of your
; use of this software irrespective of the cause of said liability.
; 
; The export from the United States or the subsequent reexport of this
; software is subject to compliance with United States export control
; and munitions control restrictions.  You agree that in the event you
; seek to export this software or any derivative work thereof, you
; assume full responsibility for obtaining all necessary export licenses
; and approvals and for assuring compliance with applicable reexport
; restrictions.
; 
; 
; 
; COPYRIGHT NOTICE INSERTED: Thu Mar  6 14:25:07 EST 1997

; This file was generated from original IMPS sources, written in the
; TEA programming language, by an automatic conversion program.
; A small number of manual changes were also made to improve performance
; and deal with compiler idiosyncrasies.
; F. J. Thayer, Thu Mar  6 15:02:11 EST 1997

(in-package "TEA")

(comment emacs-buffers)

(define emacs-output (standard-output))

(define emacs-eval-start (ascii->char 29))

(define emacs-eval-end (ascii->char 30))

(define emacs-uneval-start (ascii->char 31))

(define emacs-eval-start-str (char->string emacs-eval-start))

(define emacs-eval-end-str (char->string emacs-eval-end))

(define emacs-uneval-start-str (char->string emacs-uneval-start))

;;Changed the default value of  (emacs-process-filter?) from NIL to T. 
;;jt Tue Jun 10 10:41:16 EDT 1997

(define emacs-process-filter?
        (make-simple-switch 'emacs-process-filter? boolean? value-true))

(define (set-emacs-process-filter) (set (emacs-process-filter?) value-true)
        (format value-true ";; Emacs-process-filter now on.")
        repl-wont-print)

(define (unset-emacs-process-filter)
        (set (emacs-process-filter?) value-false)
        (format value-true ";; Emacs-process-filter now off.")
        repl-wont-print)

(define (emacs-buffer-eval buffname str . args)
        (apply emacs-eval
               (format nil "(progn (set-buffer ~S) ~A)" buffname str)
               args))

(define (emacs-eval str . args)
        (if (emacs-process-filter?)
            (block (apply format emacs-output
                          (string-append emacs-eval-start-str str
                              emacs-eval-end-str)
                          args)
              (force-output emacs-output)
              repl-wont-print)
            (imps-warning
                "Emacs-eval: wanted emacs to execute ~S~%Emacs process-filter not on.~%~%"
                (apply format nil str args))))

;;;(define (emacs-apply-to-string fn-part unevalled-str)
;;;        (emacs-eval
;;;            (format nil "~A~A~A" fn-part emacs-uneval-start
;;;                    unevalled-str)))

;;;(define (emacs-buffer-apply-to-string buffname fn-part unevalled-str)
;;;        (emacs-eval
;;;            (format nil
;;;                    "(lambda (str) (set-buffer ~S) (funcall ~A str))~A~A"
;;;                    buffname fn-part emacs-uneval-start unevalled-str)))

(define (emacs-message format-str . args)
        (emacs-eval
            (format value-false "(message ~S \"~A\")" format-str
                    (separated-string-append "\" \"" args))))

(define (emacs-error str)
        (emacs-eval (format value-false "(imps-error ~S)" str)))

;;;(define (read-emacs-communication read-fn)
;;;        (emacs-eval "(process-read tea-process)")
;;;        (funcall read-fn (standard-input)))

;;;(define (emacs-write buffname str)
;;;        (emacs-buffer-apply-to-string buffname
;;;            "'(lambda (str)(save-excursion
;;;		   (let ((buffer-read-only nil))
;;;		     (goto-char (point-max))
;;;		     (insert str))))" str))


