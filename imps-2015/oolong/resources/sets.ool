; Copyright (c) 1990-1997 The MITRE Corporation
; 
; Authors: W. M. Farmer, J. D. Guttman, F. J. Thayer
;   
; The MITRE Corporation (MITRE) provides this software to you without
; charge to use, copy, modify or enhance for any legitimate purpose
; provided you reproduce MITRE's copyright notice in any copy or
; derivative work of this software.
; 
; This software is the copyright work of MITRE.  No ownership or other
; proprietary interest in this software is granted you other than what
; is granted in this license.
; 
; Any modification or enhancement of this software must identify the
; part of this software that was modified, by whom and when, and must
; inherit this license including its warranty disclaimers.
; 
; MITRE IS PROVIDING THE PRODUCT "AS IS" AND MAKES NO WARRANTY, EXPRESS
; OR IMPLIED, AS TO THE ACCURACY, CAPABILITY, EFFICIENCY OR FUNCTIONING
; OF THIS SOFTWARE AND DOCUMENTATION.  IN NO EVENT WILL MITRE BE LIABLE
; FOR ANY GENERAL, CONSEQUENTIAL, INDIRECT, INCIDENTAL, EXEMPLARY OR
; SPECIAL DAMAGES, EVEN IF MITRE HAS BEEN ADVISED OF THE POSSIBILITY OF
; SUCH DAMAGES.
; 
; You, at your expense, hereby indemnify and hold harmless MITRE, its
; Board of Trustees, officers, agents and employees, from any and all
; liability or damages to third parties, including attorneys' fees,
; court costs, and other related costs and expenses, arising out of your
; use of this software irrespective of the cause of said liability.
; 
; The export from the United States or the subsequent reexport of this
; software is subject to compliance with United States export control
; and munitions control restrictions.  You agree that in the event you
; seek to export this software or any derivative work thereof, you
; assume full responsibility for obtaining all necessary export licenses
; and approvals and for assuring compliance with applicable reexport
; restrictions.
; 
; 
; 
; COPYRIGHT NOTICE INSERTED: Thu Mar  6 14:25:07 EST 1997

; This file was generated from original IMPS sources, written in the
; TEA programming language, by an automatic conversion program.
; A small number of manual changes were also made to improve performance
; and deal with compiler idiosyncrasies.
; F. J. Thayer, Thu Mar  6 15:02:11 EST 1997

(in-package "TEA")

(define cardinality length)

(define (every-set-element? fn the-set)
  (every? fn the-set))

(define (any-set-element? fn the-set)
  (any? fn the-set))

(define (set-map proc set) (make-set (map proc set)))

(define (set-walk proc set) (walk proc set))

(define (null-intersection? set1 set2)
        (or (null? set2)
            (iterate iter ((set1 set1) (set2 set2))
                     (cond
                       ((null? set1))
                       ((memq? (car set1) set2) value-false)
                       (else (iter (cdr set1) set2))))))

(define (non-null-intersection? set1 set2)
        (not (null-intersection? set1 set2)))

(define (big-u family-of-sets)
        (iterate iter ((family family-of-sets) (union-so-far nil))
                 (if (null? family) (reverse! union-so-far)
                     (iter (cdr family)
                           (set-union (car family) union-so-far)))))

(define (big-cap family-of-sets)
        (if (null? family-of-sets) (error "BIG-CAP: Null family.")
            (iterate iter
                     ((family (cdr family-of-sets))
                      (intersection-so-far (car family-of-sets)))
                     (if (null? family) intersection-so-far
                         (iter (cdr family)
                               (set-intersection (car family)
                                   intersection-so-far))))))

(define (set-separate filter? set)
        (iterate iter ((set set) (already the-empty-set))
                 (cond
                   ((empty-set? set) (reverse! already))
                   ((funcall filter? (first-set-element set))
                    (iter (rest-of-set set)
                          (cons (first-set-element set) already)))
                   (else (iter (rest-of-set set) already)))))

(define (set-split filter? set)
        (iterate iter
                 ((set set) (ins the-empty-set) (outs the-empty-set))
                 (cond
                   ((empty-set? set) (return ins outs))
                   ((funcall filter? (first-set-element set))
                    (iter (rest-of-set set)
                          (add-set-element (first-set-element set) ins)
                          outs))
                   (else (iter (rest-of-set set) ins
                               (add-set-element (first-set-element set)
                                   outs))))))

(define (select-set-element predicate? set)
        (cond
          ((empty-set? set) (return value-false value-false))
          ((funcall predicate? (first-set-element set))
           (return value-true (first-set-element set)))
          (else (select-set-element predicate? (rest-of-set set)))))

(define (collect-set proc sources)
        (and sources
             (do ((rem (cdr sources) (cdr rem))
                  (total (funcall proc (car sources))
                         (append (funcall proc (car rem)) total)))
                 ((null? rem) (make-set total)))))

(define (containing-set family elem)
        (iterate iter ((family family))
                 (cond
                   ((null? family) value-false)
                   ((memq? elem (car family)) (car family))
                   (else (iter (cdr family))))))

(define (make-partition family)
        (iterate iter ((family family) (partition nil))
                 (cond
                   ((null? family) partition)
                   ((any (lambda (p-s)
                           (and (non-null-intersection? (car family)
                                    p-s)
                                p-s))
                         partition)
                    =>
                    (lambda (p-s)
                      (iter (cdr family)
                            (cons (set-union (car family) p-s)
                                  (delq! p-s partition)))))
                   (else (iter (cdr family)
                               (cons (car family) partition))))))

(define (merge-partitions a b) (make-partition (append a b)))

(define (partition-set the-set equiv-rel?)
        (iterate step-through ((the-set the-set) (family nil))
                 (if (null? the-set)
                     (reverse! (map! (lambda (l) (reverse! l)) family))
                     (let ((elem (car the-set)))
                       (cond
                         ((any (lambda (class)
                                 (and (funcall equiv-rel? elem
                                       (car class))
                                      class))
                               family)
                          =>
                          (lambda (class)
                            (step-through (cdr the-set)
                                (if (memq? elem class) family
                                    (cons (cons elem class)
                                     (delq! class family))))))
                         (else (step-through (cdr the-set)
                                   (cons (list elem) family))))))))

(define (merge-partition-classes partition set1 set2)
        (if (and (memq? set1 partition) (memq? set2 partition))
            (add-set-element (set-union set1 set2)
                (set-diff partition (list set1 set2)))
            (error "MERGE-PARTITION-CLASSES: bogus partition elements.")))

(define (add-element-to-partition-class partition class element)
        (add-set-element (add-set-element element class)
            (delete-set-element class partition)))
