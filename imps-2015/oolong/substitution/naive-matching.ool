; Copyright (c) 1990-1997 The MITRE Corporation
; 
; Authors: W. M. Farmer, J. D. Guttman, F. J. Thayer
;   
; The MITRE Corporation (MITRE) provides this software to you without
; charge to use, copy, modify or enhance for any legitimate purpose
; provided you reproduce MITRE's copyright notice in any copy or
; derivative work of this software.
; 
; This software is the copyright work of MITRE.  No ownership or other
; proprietary interest in this software is granted you other than what
; is granted in this license.
; 
; Any modification or enhancement of this software must identify the
; part of this software that was modified, by whom and when, and must
; inherit this license including its warranty disclaimers.
; 
; MITRE IS PROVIDING THE PRODUCT "AS IS" AND MAKES NO WARRANTY, EXPRESS
; OR IMPLIED, AS TO THE ACCURACY, CAPABILITY, EFFICIENCY OR FUNCTIONING
; OF THIS SOFTWARE AND DOCUMENTATION.  IN NO EVENT WILL MITRE BE LIABLE
; FOR ANY GENERAL, CONSEQUENTIAL, INDIRECT, INCIDENTAL, EXEMPLARY OR
; SPECIAL DAMAGES, EVEN IF MITRE HAS BEEN ADVISED OF THE POSSIBILITY OF
; SUCH DAMAGES.
; 
; You, at your expense, hereby indemnify and hold harmless MITRE, its
; Board of Trustees, officers, agents and employees, from any and all
; liability or damages to third parties, including attorneys' fees,
; court costs, and other related costs and expenses, arising out of your
; use of this software irrespective of the cause of said liability.
; 
; The export from the United States or the subsequent reexport of this
; software is subject to compliance with United States export control
; and munitions control restrictions.  You agree that in the event you
; seek to export this software or any derivative work thereof, you
; assume full responsibility for obtaining all necessary export licenses
; and approvals and for assuring compliance with applicable reexport
; restrictions.
; 
; 
; 
; COPYRIGHT NOTICE INSERTED: Thu Mar  6 14:25:07 EST 1997

; This file was generated from original IMPS sources, written in the
; TEA programming language, by an automatic conversion program.
; A small number of manual changes were also made to improve performance
; and deal with compiler idiosyncrasies.
; F. J. Thayer, Thu Mar  6 15:02:11 EST 1997

(in-package "TEA")

(comment naive-matching)

(define (theory-trivially-entails-substitution-defined? theory subst)
        (and (succeed? subst)
             (every? (lambda (component)
                       (destructure (((target . repl) component))
                           (null? (theory-critical-subterms-and-sorts
                                      theory repl
                                      (expression-sorting target)))))
                     subst)))

(define-operation (expression-matches? matcher expr strict?)
    (let ((subst (funcall matcher expr)))
      (and (succeed? subst)
           (or (not strict?)
               (if (theory? strict?)
                   (theory-trivially-entails-substitution-defined?
                       strict? subst)
                   (substitution-preserves-sort-inclusions? subst))))))

(define-operation (matching-subexpression? matcher expr strict?)
    (if (expression-matches? matcher expr strict?) value-true
        (any? (lambda (x) (matching-subexpression? matcher x strict?))
              (expression-components expr))))

(define-operation (paths-to-matches matcher expr depth-bound strict?)
    (ignore strict?)
    (paths-to-satisfaction expr
        (lambda (x) (succeed? (funcall matcher x))) depth-bound))

(define (unsafe-match expr pattern)
        (cond
          ((variable? pattern)
           (if (sorts-may-overlap? (expression-sorting expr)
                   (expression-sorting pattern))
               (one-component-subst pattern expr) (fail)))
          ((constant? pattern)
           (if (eq? expr pattern) the-empty-substitution (fail)))
          ((and (eq? (expression-constructor pattern)
                     (expression-constructor expr))
                (= (length (expression-components pattern))
                   (length (expression-components expr))))
           (apply join-substitutions
                  (map (lambda (x y) (unsafe-match x y))
                       (expression-components expr)
                       (expression-components pattern))))
          (else (fail))))

(define-operation (matcher-expression self)
    (imps-error "MATCHER-EXPRESSION:  Non-matcher ~S" self))

(define (build-expression-matcher pattern)
        (object (lambda (expr) (match expr pattern))
                ((matcher-expression soi) pattern)))

(define (build-expression-matcher-unsafe pattern)
        (object (lambda (expr) (unsafe-match expr pattern))
                ((matcher-expression soi) pattern)))
